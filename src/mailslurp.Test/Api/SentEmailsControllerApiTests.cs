/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing SentEmailsControllerApi
    /// </summary>
    public sealed class SentEmailsControllerApiTests : ApiTestsBase
    {
        private readonly ISentEmailsControllerApi _instance;

        public SentEmailsControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ISentEmailsControllerApi>();
        }

        /// <summary>
        /// Test DeleteAllSentEmails
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAllSentEmailsAsyncTest()
        {
            await _instance.DeleteAllSentEmailsAsync();
        }

        /// <summary>
        /// Test DeleteSentEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteSentEmailAsyncTest()
        {
            Guid id = default;
            await _instance.DeleteSentEmailAsync(id);
        }

        /// <summary>
        /// Test GetAllSentTrackingPixels
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllSentTrackingPixelsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetAllSentTrackingPixelsAsync(page, size, sort, searchFilter, since, before);
            var model = response.Ok();
            Assert.IsType<PageTrackingPixelProjection>(model);
        }

        /// <summary>
        /// Test GetRawSentEmailContents
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetRawSentEmailContentsAsyncTest()
        {
            Guid emailId = default;
            await _instance.GetRawSentEmailContentsAsync(emailId);
        }

        /// <summary>
        /// Test GetRawSentEmailJson
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetRawSentEmailJsonAsyncTest()
        {
            Guid emailId = default;
            var response = await _instance.GetRawSentEmailJsonAsync(emailId);
            var model = response.Ok();
            Assert.IsType<RawEmailJson>(model);
        }

        /// <summary>
        /// Test GetSentDeliveryStatus
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSentDeliveryStatusAsyncTest()
        {
            Guid deliveryId = default;
            var response = await _instance.GetSentDeliveryStatusAsync(deliveryId);
            var model = response.Ok();
            Assert.IsType<DeliveryStatusDto>(model);
        }

        /// <summary>
        /// Test GetSentDeliveryStatuses
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSentDeliveryStatusesAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetSentDeliveryStatusesAsync(page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageDeliveryStatus>(model);
        }

        /// <summary>
        /// Test GetSentDeliveryStatusesBySentId
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSentDeliveryStatusesBySentIdAsyncTest()
        {
            Guid sentId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetSentDeliveryStatusesBySentIdAsync(sentId, page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageDeliveryStatus>(model);
        }

        /// <summary>
        /// Test GetSentEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSentEmailAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetSentEmailAsync(id);
            var model = response.Ok();
            Assert.IsType<SentEmailDto>(model);
        }

        /// <summary>
        /// Test GetSentEmailHTMLContent
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSentEmailHTMLContentAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetSentEmailHTMLContentAsync(id);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test GetSentEmailPreviewURLs
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSentEmailPreviewURLsAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetSentEmailPreviewURLsAsync(id);
            var model = response.Ok();
            Assert.IsType<EmailPreviewUrls>(model);
        }

        /// <summary>
        /// Test GetSentEmailTrackingPixels
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSentEmailTrackingPixelsAsyncTest()
        {
            Guid id = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetSentEmailTrackingPixelsAsync(id, page, size, sort, searchFilter, since, before);
            var model = response.Ok();
            Assert.IsType<PageTrackingPixelProjection>(model);
        }

        /// <summary>
        /// Test GetSentEmails
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSentEmailsAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetSentEmailsAsync(inboxId, page, size, sort, searchFilter, since, before);
            var model = response.Ok();
            Assert.IsType<PageSentEmailProjection>(model);
        }

        /// <summary>
        /// Test GetSentEmailsWithQueueResults
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSentEmailsWithQueueResultsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetSentEmailsWithQueueResultsAsync(page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageSentEmailWithQueueProjection>(model);
        }

        /// <summary>
        /// Test GetSentOrganizationEmails
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSentOrganizationEmailsAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetSentOrganizationEmailsAsync(inboxId, page, size, sort, searchFilter, since, before);
            var model = response.Ok();
            Assert.IsType<PageSentEmailProjection>(model);
        }

        /// <summary>
        /// Test WaitForDeliveryStatuses
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WaitForDeliveryStatusesAsyncTest()
        {
            Client.Option<Guid> sentId = default;
            Client.Option<Guid> inboxId = default;
            Client.Option<long> timeout = default;
            Client.Option<int> index = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.WaitForDeliveryStatusesAsync(sentId, inboxId, timeout, index, since, before);
            var model = response.Ok();
            Assert.IsType<DeliveryStatusDto>(model);
        }
    }
}
