/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing PhoneControllerApi
    /// </summary>
    public sealed class PhoneControllerApiTests : ApiTestsBase
    {
        private readonly IPhoneControllerApi _instance;

        public PhoneControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IPhoneControllerApi>();
        }

        /// <summary>
        /// Test CreateEmergencyAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateEmergencyAddressAsyncTest()
        {
            CreateEmergencyAddressOptions createEmergencyAddressOptions = default;
            var response = await _instance.CreateEmergencyAddressAsync(createEmergencyAddressOptions);
            var model = response.Ok();
            Assert.IsType<EmergencyAddress>(model);
        }

        /// <summary>
        /// Test CreatePhoneNumber
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreatePhoneNumberAsyncTest()
        {
            CreatePhoneNumberOptions createPhoneNumberOptions = default;
            var response = await _instance.CreatePhoneNumberAsync(createPhoneNumberOptions);
            var model = response.Ok();
            Assert.IsType<PhoneNumberDto>(model);
        }

        /// <summary>
        /// Test DeleteEmergencyAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteEmergencyAddressAsyncTest()
        {
            Guid addressId = default;
            var response = await _instance.DeleteEmergencyAddressAsync(addressId);
            var model = response.Ok();
            Assert.IsType<EmptyResponseDto>(model);
        }

        /// <summary>
        /// Test DeletePhoneNumber
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeletePhoneNumberAsyncTest()
        {
            Guid phoneNumberId = default;
            await _instance.DeletePhoneNumberAsync(phoneNumberId);
        }

        /// <summary>
        /// Test GetAllPhoneMessageThreads
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllPhoneMessageThreadsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            var response = await _instance.GetAllPhoneMessageThreadsAsync(page, size);
            var model = response.Ok();
            Assert.IsType<PagePhoneMessageThreadProjection>(model);
        }

        /// <summary>
        /// Test GetConsentStatus
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConsentStatusAsyncTest()
        {
            var response = await _instance.GetConsentStatusAsync();
            var model = response.Ok();
            Assert.IsType<ConsentStatusDto>(model);
        }

        /// <summary>
        /// Test GetEmergencyAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmergencyAddressAsyncTest()
        {
            Guid addressId = default;
            var response = await _instance.GetEmergencyAddressAsync(addressId);
            var model = response.Ok();
            Assert.IsType<EmergencyAddress>(model);
        }

        /// <summary>
        /// Test GetEmergencyAddresses
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmergencyAddressesAsyncTest()
        {
            var response = await _instance.GetEmergencyAddressesAsync();
            var model = response.Ok();
            Assert.IsType<List<EmergencyAddressDto>>(model);
        }

        /// <summary>
        /// Test GetPhoneMessageThreadItems
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPhoneMessageThreadItemsAsyncTest()
        {
            Guid phoneNumberId = default;
            string otherNumber = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            var response = await _instance.GetPhoneMessageThreadItemsAsync(phoneNumberId, otherNumber, page, size);
            var model = response.Ok();
            Assert.IsType<PagePhoneMessageThreadItemProjection>(model);
        }

        /// <summary>
        /// Test GetPhoneMessageThreads
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPhoneMessageThreadsAsyncTest()
        {
            Guid phoneNumberId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            var response = await _instance.GetPhoneMessageThreadsAsync(phoneNumberId, page, size);
            var model = response.Ok();
            Assert.IsType<PagePhoneMessageThreadProjection>(model);
        }

        /// <summary>
        /// Test GetPhoneNumber
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPhoneNumberAsyncTest()
        {
            Guid phoneNumberId = default;
            var response = await _instance.GetPhoneNumberAsync(phoneNumberId);
            var model = response.Ok();
            Assert.IsType<PhoneNumberDto>(model);
        }

        /// <summary>
        /// Test GetPhoneNumberByName
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPhoneNumberByNameAsyncTest()
        {
            string name = default;
            var response = await _instance.GetPhoneNumberByNameAsync(name);
            var model = response.Ok();
            Assert.IsType<PhoneNumberDto>(model);
        }

        /// <summary>
        /// Test GetPhoneNumberByPhoneNumber
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPhoneNumberByPhoneNumberAsyncTest()
        {
            string phoneNumber = default;
            var response = await _instance.GetPhoneNumberByPhoneNumberAsync(phoneNumber);
            var model = response.Ok();
            Assert.IsType<PhoneNumberDto>(model);
        }

        /// <summary>
        /// Test GetPhoneNumbers
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPhoneNumbersAsyncTest()
        {
            Client.Option<string> phoneCountry = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> search = default;
            Client.Option<List<Guid>> include = default;
            Client.Option<bool> favourite = default;
            var response = await _instance.GetPhoneNumbersAsync(phoneCountry, page, size, sort, since, before, search, include, favourite);
            var model = response.Ok();
            Assert.IsType<PagePhoneNumberProjection>(model);
        }

        /// <summary>
        /// Test GetPhonePlans
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPhonePlansAsyncTest()
        {
            var response = await _instance.GetPhonePlansAsync();
            var model = response.Ok();
            Assert.IsType<List<PhonePlanDto>>(model);
        }

        /// <summary>
        /// Test GetPhonePlansAvailability
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPhonePlansAvailabilityAsyncTest()
        {
            var response = await _instance.GetPhonePlansAvailabilityAsync();
            var model = response.Ok();
            Assert.IsType<PhonePlanAvailability>(model);
        }

        /// <summary>
        /// Test GetSentSmsByPhoneNumber
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSentSmsByPhoneNumberAsyncTest()
        {
            Guid phoneNumberId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> search = default;
            var response = await _instance.GetSentSmsByPhoneNumberAsync(phoneNumberId, page, size, sort, since, before, search);
            var model = response.Ok();
            Assert.IsType<PageSentSmsProjection>(model);
        }

        /// <summary>
        /// Test GetSmsByPhoneNumber
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSmsByPhoneNumberAsyncTest()
        {
            Guid phoneNumberId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<bool> unreadOnly = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> search = default;
            Client.Option<bool> favourite = default;
            var response = await _instance.GetSmsByPhoneNumberAsync(phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite);
            var model = response.Ok();
            Assert.IsType<PageSmsProjection>(model);
        }

        /// <summary>
        /// Test SendSmsFromPhoneNumber
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendSmsFromPhoneNumberAsyncTest()
        {
            Guid phoneNumberId = default;
            SmsSendOptions smsSendOptions = default;
            var response = await _instance.SendSmsFromPhoneNumberAsync(phoneNumberId, smsSendOptions);
            var model = response.Ok();
            Assert.IsType<SentSmsDto>(model);
        }

        /// <summary>
        /// Test SetConsentStatus
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetConsentStatusAsyncTest()
        {
            bool agree = default;
            var response = await _instance.SetConsentStatusAsync(agree);
            var model = response.Ok();
            Assert.IsType<ConsentStatusDto>(model);
        }

        /// <summary>
        /// Test SetPhoneFavourited
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetPhoneFavouritedAsyncTest()
        {
            Guid phoneNumberId = default;
            SetPhoneFavouritedOptions setPhoneFavouritedOptions = default;
            var response = await _instance.SetPhoneFavouritedAsync(phoneNumberId, setPhoneFavouritedOptions);
            var model = response.Ok();
            Assert.IsType<PhoneNumberDto>(model);
        }

        /// <summary>
        /// Test TestPhoneNumberSendSms
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TestPhoneNumberSendSmsAsyncTest()
        {
            Guid phoneNumberId = default;
            TestPhoneNumberOptions testPhoneNumberOptions = default;
            Client.Option<string> xTestId = default;
            await _instance.TestPhoneNumberSendSmsAsync(phoneNumberId, testPhoneNumberOptions, xTestId);
        }

        /// <summary>
        /// Test UpdatePhoneNumber
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdatePhoneNumberAsyncTest()
        {
            Guid phoneNumberId = default;
            UpdatePhoneNumberOptions updatePhoneNumberOptions = default;
            var response = await _instance.UpdatePhoneNumberAsync(phoneNumberId, updatePhoneNumberOptions);
            var model = response.Ok();
            Assert.IsType<PhoneNumberDto>(model);
        }

        /// <summary>
        /// Test ValidatePhoneNumber
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ValidatePhoneNumberAsyncTest()
        {
            ValidatePhoneNumberOptions validatePhoneNumberOptions = default;
            var response = await _instance.ValidatePhoneNumberAsync(validatePhoneNumberOptions);
            var model = response.Ok();
            Assert.IsType<PhoneNumberValidationDto>(model);
        }
    }
}
