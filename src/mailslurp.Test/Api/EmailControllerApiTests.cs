/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing EmailControllerApi
    /// </summary>
    public sealed class EmailControllerApiTests : ApiTestsBase
    {
        private readonly IEmailControllerApi _instance;

        public EmailControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IEmailControllerApi>();
        }

        /// <summary>
        /// Test ApplyImapFlagOperation
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApplyImapFlagOperationAsyncTest()
        {
            Guid emailId = default;
            ImapFlagOperationOptions imapFlagOperationOptions = default;
            var response = await _instance.ApplyImapFlagOperationAsync(emailId, imapFlagOperationOptions);
            var model = response.Ok();
            Assert.IsType<EmailPreview>(model);
        }

        /// <summary>
        /// Test CanSend
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CanSendAsyncTest()
        {
            Guid inboxId = default;
            SendEmailOptions sendEmailOptions = default;
            var response = await _instance.CanSendAsync(inboxId, sendEmailOptions);
            var model = response.Ok();
            Assert.IsType<CanSendEmailResults>(model);
        }

        /// <summary>
        /// Test CheckEmailBody
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CheckEmailBodyAsyncTest()
        {
            Guid emailId = default;
            var response = await _instance.CheckEmailBodyAsync(emailId);
            var model = response.Ok();
            Assert.IsType<CheckEmailBodyResults>(model);
        }

        /// <summary>
        /// Test CheckEmailBodyFeatureSupport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CheckEmailBodyFeatureSupportAsyncTest()
        {
            Guid emailId = default;
            var response = await _instance.CheckEmailBodyFeatureSupportAsync(emailId);
            var model = response.Ok();
            Assert.IsType<CheckEmailBodyFeatureSupportResults>(model);
        }

        /// <summary>
        /// Test CheckEmailClientSupport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CheckEmailClientSupportAsyncTest()
        {
            CheckEmailClientSupportOptions checkEmailClientSupportOptions = default;
            var response = await _instance.CheckEmailClientSupportAsync(checkEmailClientSupportOptions);
            var model = response.Ok();
            Assert.IsType<CheckEmailClientSupportResults>(model);
        }

        /// <summary>
        /// Test DeleteAllEmails
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAllEmailsAsyncTest()
        {
            await _instance.DeleteAllEmailsAsync();
        }

        /// <summary>
        /// Test DeleteEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteEmailAsyncTest()
        {
            Guid emailId = default;
            await _instance.DeleteEmailAsync(emailId);
        }

        /// <summary>
        /// Test DownloadAttachment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DownloadAttachmentAsyncTest()
        {
            Guid emailId = default;
            string attachmentId = default;
            Client.Option<string> apiKey = default;
            var response = await _instance.DownloadAttachmentAsync(emailId, attachmentId, apiKey);
            var model = response.Default();
            Assert.IsType<byte[]>(model);
        }

        /// <summary>
        /// Test DownloadAttachmentBase64
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DownloadAttachmentBase64AsyncTest()
        {
            Guid emailId = default;
            string attachmentId = default;
            var response = await _instance.DownloadAttachmentBase64Async(emailId, attachmentId);
            var model = response.Ok();
            Assert.IsType<DownloadAttachmentDto>(model);
        }

        /// <summary>
        /// Test DownloadBody
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DownloadBodyAsyncTest()
        {
            Guid emailId = default;
            var response = await _instance.DownloadBodyAsync(emailId);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test DownloadBodyBytes
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DownloadBodyBytesAsyncTest()
        {
            Guid emailId = default;
            var response = await _instance.DownloadBodyBytesAsync(emailId);
            var model = response.Default();
            Assert.IsType<byte[]>(model);
        }

        /// <summary>
        /// Test ForwardEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ForwardEmailAsyncTest()
        {
            Guid emailId = default;
            ForwardEmailOptions forwardEmailOptions = default;
            var response = await _instance.ForwardEmailAsync(emailId, forwardEmailOptions);
            var model = response.Created();
            Assert.IsType<SentEmailDto>(model);
        }

        /// <summary>
        /// Test GetAttachmentMetaData
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAttachmentMetaDataAsyncTest()
        {
            Guid emailId = default;
            string attachmentId = default;
            var response = await _instance.GetAttachmentMetaDataAsync(emailId, attachmentId);
            var model = response.Ok();
            Assert.IsType<AttachmentMetaData>(model);
        }

        /// <summary>
        /// Test GetEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailAsyncTest()
        {
            Guid emailId = default;
            var response = await _instance.GetEmailAsync(emailId);
            var model = response.Ok();
            Assert.IsType<Email>(model);
        }

        /// <summary>
        /// Test GetEmailAttachments
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailAttachmentsAsyncTest()
        {
            Guid emailId = default;
            var response = await _instance.GetEmailAttachmentsAsync(emailId);
            var model = response.Ok();
            Assert.IsType<List<AttachmentMetaData>>(model);
        }

        /// <summary>
        /// Test GetEmailContentMatch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailContentMatchAsyncTest()
        {
            Guid emailId = default;
            ContentMatchOptions contentMatchOptions = default;
            var response = await _instance.GetEmailContentMatchAsync(emailId, contentMatchOptions);
            var model = response.Ok();
            Assert.IsType<EmailContentMatchResult>(model);
        }

        /// <summary>
        /// Test GetEmailContentPart
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailContentPartAsyncTest()
        {
            Guid emailId = default;
            string contentType = default;
            Client.Option<bool> strict = default;
            Client.Option<int> index = default;
            var response = await _instance.GetEmailContentPartAsync(emailId, contentType, strict, index);
            var model = response.Ok();
            Assert.IsType<EmailContentPartResult>(model);
        }

        /// <summary>
        /// Test GetEmailContentPartContent
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailContentPartContentAsyncTest()
        {
            Guid emailId = default;
            string contentType = default;
            Client.Option<bool> strict = default;
            Client.Option<int> index = default;
            var response = await _instance.GetEmailContentPartContentAsync(emailId, contentType, strict, index);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test GetEmailCount
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailCountAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            var response = await _instance.GetEmailCountAsync(inboxId);
            var model = response.Ok();
            Assert.IsType<CountDto>(model);
        }

        /// <summary>
        /// Test GetEmailHTML
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailHTMLAsyncTest()
        {
            Guid emailId = default;
            Client.Option<bool> replaceCidImages = default;
            var response = await _instance.GetEmailHTMLAsync(emailId, replaceCidImages);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test GetEmailHTMLJson
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailHTMLJsonAsyncTest()
        {
            Guid emailId = default;
            Client.Option<bool> replaceCidImages = default;
            var response = await _instance.GetEmailHTMLJsonAsync(emailId, replaceCidImages);
            var model = response.Ok();
            Assert.IsType<EmailHtmlDto>(model);
        }

        /// <summary>
        /// Test GetEmailHTMLQuery
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailHTMLQueryAsyncTest()
        {
            Guid emailId = default;
            string htmlSelector = default;
            var response = await _instance.GetEmailHTMLQueryAsync(emailId, htmlSelector);
            var model = response.Ok();
            Assert.IsType<EmailTextLinesResult>(model);
        }

        /// <summary>
        /// Test GetEmailLinks
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailLinksAsyncTest()
        {
            Guid emailId = default;
            Client.Option<string> selector = default;
            var response = await _instance.GetEmailLinksAsync(emailId, selector);
            var model = response.Ok();
            Assert.IsType<EmailLinksResult>(model);
        }

        /// <summary>
        /// Test GetEmailPreviewURLs
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailPreviewURLsAsyncTest()
        {
            Guid emailId = default;
            var response = await _instance.GetEmailPreviewURLsAsync(emailId);
            var model = response.Ok();
            Assert.IsType<EmailPreviewUrls>(model);
        }

        /// <summary>
        /// Test GetEmailScreenshotAsBase64
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailScreenshotAsBase64AsyncTest()
        {
            Guid emailId = default;
            GetEmailScreenshotOptions getEmailScreenshotOptions = default;
            var response = await _instance.GetEmailScreenshotAsBase64Async(emailId, getEmailScreenshotOptions);
            var model = response.Ok();
            Assert.IsType<EmailScreenshotResult>(model);
        }

        /// <summary>
        /// Test GetEmailScreenshotAsBinary
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailScreenshotAsBinaryAsyncTest()
        {
            Guid emailId = default;
            GetEmailScreenshotOptions getEmailScreenshotOptions = default;
            await _instance.GetEmailScreenshotAsBinaryAsync(emailId, getEmailScreenshotOptions);
        }

        /// <summary>
        /// Test GetEmailSummary
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailSummaryAsyncTest()
        {
            Guid emailId = default;
            Client.Option<bool> decode = default;
            var response = await _instance.GetEmailSummaryAsync(emailId, decode);
            var model = response.Ok();
            Assert.IsType<EmailPreview>(model);
        }

        /// <summary>
        /// Test GetEmailTextLines
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailTextLinesAsyncTest()
        {
            Guid emailId = default;
            Client.Option<bool> decodeHtmlEntities = default;
            Client.Option<string> lineSeparator = default;
            var response = await _instance.GetEmailTextLinesAsync(emailId, decodeHtmlEntities, lineSeparator);
            var model = response.Ok();
            Assert.IsType<EmailTextLinesResult>(model);
        }

        /// <summary>
        /// Test GetEmailThread
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailThreadAsyncTest()
        {
            Guid threadId = default;
            var response = await _instance.GetEmailThreadAsync(threadId);
            var model = response.Ok();
            Assert.IsType<EmailThreadDto>(model);
        }

        /// <summary>
        /// Test GetEmailThreadItems
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailThreadItemsAsyncTest()
        {
            Guid threadId = default;
            Client.Option<string> sort = default;
            var response = await _instance.GetEmailThreadItemsAsync(threadId, sort);
            var model = response.Ok();
            Assert.IsType<EmailThreadItemsDto>(model);
        }

        /// <summary>
        /// Test GetEmailThreads
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailThreadsAsyncTest()
        {
            Client.Option<Guid> htmlSelector = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetEmailThreadsAsync(htmlSelector, page, size, sort, searchFilter, since, before);
            var model = response.Ok();
            Assert.IsType<PageEmailThreadProjection>(model);
        }

        /// <summary>
        /// Test GetEmailsOffsetPaginated
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailsOffsetPaginatedAsyncTest()
        {
            Client.Option<List<Guid>> inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<bool> unreadOnly = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<bool> favourited = default;
            Client.Option<bool> syncConnectors = default;
            Client.Option<Guid> plusAddressId = default;
            var response = await _instance.GetEmailsOffsetPaginatedAsync(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, favourited, syncConnectors, plusAddressId);
            var model = response.Ok();
            Assert.IsType<PageEmailProjection>(model);
        }

        /// <summary>
        /// Test GetEmailsPaginated
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailsPaginatedAsyncTest()
        {
            Client.Option<List<Guid>> inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<bool> unreadOnly = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<bool> syncConnectors = default;
            Client.Option<Guid> plusAddressId = default;
            Client.Option<bool> favourited = default;
            var response = await _instance.GetEmailsPaginatedAsync(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, plusAddressId, favourited);
            var model = response.Ok();
            Assert.IsType<PageEmailProjection>(model);
        }

        /// <summary>
        /// Test GetGravatarUrlForEmailAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGravatarUrlForEmailAddressAsyncTest()
        {
            string emailAddress = default;
            Client.Option<string> size = default;
            var response = await _instance.GetGravatarUrlForEmailAddressAsync(emailAddress, size);
            var model = response.Ok();
            Assert.IsType<GravatarUrl>(model);
        }

        /// <summary>
        /// Test GetLatestEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLatestEmailAsyncTest()
        {
            Client.Option<List<Guid>> inboxIds = default;
            var response = await _instance.GetLatestEmailAsync(inboxIds);
            var model = response.Ok();
            Assert.IsType<Email>(model);
        }

        /// <summary>
        /// Test GetLatestEmailInInbox1
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLatestEmailInInbox1AsyncTest()
        {
            Guid inboxId = default;
            var response = await _instance.GetLatestEmailInInbox1Async(inboxId);
            var model = response.Ok();
            Assert.IsType<Email>(model);
        }

        /// <summary>
        /// Test GetOrganizationEmailsPaginated
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetOrganizationEmailsPaginatedAsyncTest()
        {
            Client.Option<List<Guid>> inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<bool> unreadOnly = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<bool> syncConnectors = default;
            Client.Option<bool> favourited = default;
            Client.Option<Guid> plusAddressId = default;
            var response = await _instance.GetOrganizationEmailsPaginatedAsync(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, favourited, plusAddressId);
            var model = response.Ok();
            Assert.IsType<PageEmailProjection>(model);
        }

        /// <summary>
        /// Test GetRawEmailContents
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetRawEmailContentsAsyncTest()
        {
            Guid emailId = default;
            await _instance.GetRawEmailContentsAsync(emailId);
        }

        /// <summary>
        /// Test GetRawEmailJson
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetRawEmailJsonAsyncTest()
        {
            Guid emailId = default;
            var response = await _instance.GetRawEmailJsonAsync(emailId);
            var model = response.Ok();
            Assert.IsType<RawEmailJson>(model);
        }

        /// <summary>
        /// Test GetUnreadEmailCount
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUnreadEmailCountAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            var response = await _instance.GetUnreadEmailCountAsync(inboxId);
            var model = response.Ok();
            Assert.IsType<UnreadCount>(model);
        }

        /// <summary>
        /// Test MarkAllAsRead
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MarkAllAsReadAsyncTest()
        {
            Client.Option<bool> read = default;
            Client.Option<Guid> inboxId = default;
            await _instance.MarkAllAsReadAsync(read, inboxId);
        }

        /// <summary>
        /// Test MarkAsRead
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MarkAsReadAsyncTest()
        {
            Guid emailId = default;
            Client.Option<bool> read = default;
            var response = await _instance.MarkAsReadAsync(emailId, read);
            var model = response.Ok();
            Assert.IsType<EmailPreview>(model);
        }

        /// <summary>
        /// Test ReplyToEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ReplyToEmailAsyncTest()
        {
            Guid emailId = default;
            ReplyToEmailOptions replyToEmailOptions = default;
            var response = await _instance.ReplyToEmailAsync(emailId, replyToEmailOptions);
            var model = response.Ok();
            Assert.IsType<SentEmailDto>(model);
        }

        /// <summary>
        /// Test SearchEmails
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchEmailsAsyncTest()
        {
            SearchEmailsOptions searchEmailsOptions = default;
            Client.Option<bool> syncConnectors = default;
            Client.Option<bool> favourited = default;
            Client.Option<Guid> plusAddressId = default;
            var response = await _instance.SearchEmailsAsync(searchEmailsOptions, syncConnectors, favourited, plusAddressId);
            var model = response.Ok();
            Assert.IsType<PageEmailProjection>(model);
        }

        /// <summary>
        /// Test SendEmailSourceOptional
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendEmailSourceOptionalAsyncTest()
        {
            SendEmailOptions sendEmailOptions = default;
            Client.Option<Guid> inboxId = default;
            Client.Option<bool> useDomainPool = default;
            Client.Option<bool> virtualSend = default;
            await _instance.SendEmailSourceOptionalAsync(sendEmailOptions, inboxId, useDomainPool, virtualSend);
        }

        /// <summary>
        /// Test SetEmailFavourited
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetEmailFavouritedAsyncTest()
        {
            Guid emailId = default;
            bool favourited = default;
            await _instance.SetEmailFavouritedAsync(emailId, favourited);
        }

        /// <summary>
        /// Test ValidateEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ValidateEmailAsyncTest()
        {
            Guid emailId = default;
            var response = await _instance.ValidateEmailAsync(emailId);
            var model = response.Created();
            Assert.IsType<ValidationDto>(model);
        }
    }
}
