/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing InboxForwarderControllerApi
    /// </summary>
    public sealed class InboxForwarderControllerApiTests : ApiTestsBase
    {
        private readonly IInboxForwarderControllerApi _instance;

        public InboxForwarderControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IInboxForwarderControllerApi>();
        }

        /// <summary>
        /// Test CreateNewInboxForwarder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNewInboxForwarderAsyncTest()
        {
            CreateInboxForwarderOptions createInboxForwarderOptions = default;
            Client.Option<Guid> inboxId = default;
            var response = await _instance.CreateNewInboxForwarderAsync(createInboxForwarderOptions, inboxId);
            var model = response.Ok();
            Assert.IsType<InboxForwarderDto>(model);
        }

        /// <summary>
        /// Test DeleteInboxForwarder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteInboxForwarderAsyncTest()
        {
            Guid id = default;
            await _instance.DeleteInboxForwarderAsync(id);
        }

        /// <summary>
        /// Test DeleteInboxForwarders
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteInboxForwardersAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            await _instance.DeleteInboxForwardersAsync(inboxId);
        }

        /// <summary>
        /// Test GetAllInboxForwarderEvents
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllInboxForwarderEventsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<Guid> inboxId = default;
            Client.Option<Guid> emailId = default;
            Client.Option<Guid> sentId = default;
            Client.Option<string> sort = default;
            var response = await _instance.GetAllInboxForwarderEventsAsync(page, size, inboxId, emailId, sentId, sort);
            var model = response.Ok();
            Assert.IsType<PageInboxForwarderEvents>(model);
        }

        /// <summary>
        /// Test GetForwarderEvent
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetForwarderEventAsyncTest()
        {
            Guid eventId = default;
            var response = await _instance.GetForwarderEventAsync(eventId);
            var model = response.Ok();
            Assert.IsType<InboxForwarderEventDto>(model);
        }

        /// <summary>
        /// Test GetInboxForwarder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxForwarderAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetInboxForwarderAsync(id);
            var model = response.Ok();
            Assert.IsType<InboxForwarderDto>(model);
        }

        /// <summary>
        /// Test GetInboxForwarderEvent
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxForwarderEventAsyncTest()
        {
            Guid id = default;
            Guid eventId = default;
            var response = await _instance.GetInboxForwarderEventAsync(id, eventId);
            var model = response.Ok();
            Assert.IsType<InboxForwarderEventDto>(model);
        }

        /// <summary>
        /// Test GetInboxForwarderEvents
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxForwarderEventsAsyncTest()
        {
            Guid id = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            var response = await _instance.GetInboxForwarderEventsAsync(id, page, size, sort);
            var model = response.Ok();
            Assert.IsType<PageInboxForwarderEvents>(model);
        }

        /// <summary>
        /// Test GetInboxForwarders
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxForwardersAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetInboxForwardersAsync(inboxId, page, size, sort, searchFilter, since, before);
            var model = response.Ok();
            Assert.IsType<PageInboxForwarderDto>(model);
        }

        /// <summary>
        /// Test TestInboxForwarder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TestInboxForwarderAsyncTest()
        {
            Guid id = default;
            InboxForwarderTestOptions inboxForwarderTestOptions = default;
            var response = await _instance.TestInboxForwarderAsync(id, inboxForwarderTestOptions);
            var model = response.Ok();
            Assert.IsType<InboxForwarderTestResult>(model);
        }

        /// <summary>
        /// Test TestInboxForwardersForInbox
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TestInboxForwardersForInboxAsyncTest()
        {
            Guid inboxId = default;
            InboxForwarderTestOptions inboxForwarderTestOptions = default;
            var response = await _instance.TestInboxForwardersForInboxAsync(inboxId, inboxForwarderTestOptions);
            var model = response.Ok();
            Assert.IsType<InboxForwarderTestResult>(model);
        }

        /// <summary>
        /// Test TestNewInboxForwarder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TestNewInboxForwarderAsyncTest()
        {
            TestNewInboxForwarderOptions testNewInboxForwarderOptions = default;
            var response = await _instance.TestNewInboxForwarderAsync(testNewInboxForwarderOptions);
            var model = response.Ok();
            Assert.IsType<InboxForwarderTestResult>(model);
        }

        /// <summary>
        /// Test UpdateInboxForwarder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateInboxForwarderAsyncTest()
        {
            Guid id = default;
            CreateInboxForwarderOptions createInboxForwarderOptions = default;
            var response = await _instance.UpdateInboxForwarderAsync(id, createInboxForwarderOptions);
            var model = response.Ok();
            Assert.IsType<InboxForwarderDto>(model);
        }
    }
}
