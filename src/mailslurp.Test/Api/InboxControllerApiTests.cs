/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing InboxControllerApi
    /// </summary>
    public sealed class InboxControllerApiTests : ApiTestsBase
    {
        private readonly IInboxControllerApi _instance;

        public InboxControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IInboxControllerApi>();
        }

        /// <summary>
        /// Test CancelScheduledJob
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CancelScheduledJobAsyncTest()
        {
            Guid jobId = default;
            var response = await _instance.CancelScheduledJobAsync(jobId);
            var model = response.Ok();
            Assert.IsType<ScheduledJobDto>(model);
        }

        /// <summary>
        /// Test CreateInbox
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateInboxAsyncTest()
        {
            Client.Option<string> emailAddress = default;
            Client.Option<List<string>> tags = default;
            Client.Option<string> name = default;
            Client.Option<string> description = default;
            Client.Option<bool> useDomainPool = default;
            Client.Option<bool> favourite = default;
            Client.Option<DateTime> expiresAt = default;
            Client.Option<long> expiresIn = default;
            Client.Option<bool> allowTeamAccess = default;
            Client.Option<string> inboxType = default;
            Client.Option<bool> virtualInbox = default;
            Client.Option<bool> useShortAddress = default;
            Client.Option<Guid> domainId = default;
            Client.Option<string> domainName = default;
            Client.Option<string> prefix = default;
            var response = await _instance.CreateInboxAsync(emailAddress, tags, name, description, useDomainPool, favourite, expiresAt, expiresIn, allowTeamAccess, inboxType, virtualInbox, useShortAddress, domainId, domainName, prefix);
            var model = response.Created();
            Assert.IsType<InboxDto>(model);
        }

        /// <summary>
        /// Test CreateInboxRuleset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateInboxRulesetAsyncTest()
        {
            Guid inboxId = default;
            CreateInboxRulesetOptions createInboxRulesetOptions = default;
            var response = await _instance.CreateInboxRulesetAsync(inboxId, createInboxRulesetOptions);
            var model = response.Ok();
            Assert.IsType<InboxRulesetDto>(model);
        }

        /// <summary>
        /// Test CreateInboxWithDefaults
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateInboxWithDefaultsAsyncTest()
        {
            var response = await _instance.CreateInboxWithDefaultsAsync();
            var model = response.Created();
            Assert.IsType<InboxDto>(model);
        }

        /// <summary>
        /// Test CreateInboxWithOptions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateInboxWithOptionsAsyncTest()
        {
            CreateInboxDto createInboxDto = default;
            var response = await _instance.CreateInboxWithOptionsAsync(createInboxDto);
            var model = response.Created();
            Assert.IsType<InboxDto>(model);
        }

        /// <summary>
        /// Test DeleteAllInboxEmails
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAllInboxEmailsAsyncTest()
        {
            Guid inboxId = default;
            await _instance.DeleteAllInboxEmailsAsync(inboxId);
        }

        /// <summary>
        /// Test DeleteAllInboxes
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAllInboxesAsyncTest()
        {
            await _instance.DeleteAllInboxesAsync();
        }

        /// <summary>
        /// Test DeleteAllInboxesByDescription
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAllInboxesByDescriptionAsyncTest()
        {
            string description = default;
            await _instance.DeleteAllInboxesByDescriptionAsync(description);
        }

        /// <summary>
        /// Test DeleteAllInboxesByName
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAllInboxesByNameAsyncTest()
        {
            string name = default;
            await _instance.DeleteAllInboxesByNameAsync(name);
        }

        /// <summary>
        /// Test DeleteAllInboxesByTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAllInboxesByTagAsyncTest()
        {
            string tag = default;
            await _instance.DeleteAllInboxesByTagAsync(tag);
        }

        /// <summary>
        /// Test DeleteInbox
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteInboxAsyncTest()
        {
            Guid inboxId = default;
            await _instance.DeleteInboxAsync(inboxId);
        }

        /// <summary>
        /// Test DoesInboxExist
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DoesInboxExistAsyncTest()
        {
            string emailAddress = default;
            Client.Option<bool> allowCatchAll = default;
            var response = await _instance.DoesInboxExistAsync(emailAddress, allowCatchAll);
            var model = response.Ok();
            Assert.IsType<InboxExistsDto>(model);
        }

        /// <summary>
        /// Test DoesInboxHaveAutomations
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DoesInboxHaveAutomationsAsyncTest()
        {
            await _instance.DoesInboxHaveAutomationsAsync();
        }

        /// <summary>
        /// Test FlushExpired
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task FlushExpiredAsyncTest()
        {
            Client.Option<DateTime> before = default;
            var response = await _instance.FlushExpiredAsync(before);
            var model = response.Ok();
            Assert.IsType<FlushExpiredInboxesResult>(model);
        }

        /// <summary>
        /// Test GetAllInboxes
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllInboxesAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<bool> favourite = default;
            Client.Option<string> search = default;
            Client.Option<string> tag = default;
            Client.Option<bool> teamAccess = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> inboxType = default;
            Client.Option<string> inboxFunction = default;
            Client.Option<Guid> domainId = default;
            var response = await _instance.GetAllInboxesAsync(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId);
            var model = response.Ok();
            Assert.IsType<PageInboxProjection>(model);
        }

        /// <summary>
        /// Test GetAllInboxesOffsetPaginated
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllInboxesOffsetPaginatedAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<bool> favourite = default;
            Client.Option<string> search = default;
            Client.Option<string> tag = default;
            Client.Option<bool> teamAccess = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> inboxType = default;
            Client.Option<string> inboxFunction = default;
            Client.Option<Guid> domainId = default;
            var response = await _instance.GetAllInboxesOffsetPaginatedAsync(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId);
            var model = response.Ok();
            Assert.IsType<PageInboxProjection>(model);
        }

        /// <summary>
        /// Test GetAllPlusAddresses
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllPlusAddressesAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<Guid> inboxId = default;
            var response = await _instance.GetAllPlusAddressesAsync(page, size, sort, inboxId);
            var model = response.Ok();
            Assert.IsType<PagePlusAddressProjection>(model);
        }

        /// <summary>
        /// Test GetAllScheduledJobs
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllScheduledJobsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<Guid> inboxId = default;
            var response = await _instance.GetAllScheduledJobsAsync(page, size, sort, since, before, inboxId);
            var model = response.Ok();
            Assert.IsType<PageScheduledJobs>(model);
        }

        /// <summary>
        /// Test GetDeliveryStatusesByInboxId
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDeliveryStatusesByInboxIdAsyncTest()
        {
            Guid inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetDeliveryStatusesByInboxIdAsync(inboxId, page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageDeliveryStatus>(model);
        }

        /// <summary>
        /// Test GetEmails
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailsAsyncTest()
        {
            Guid inboxId = default;
            Client.Option<int> size = default;
            Client.Option<int> limit = default;
            Client.Option<string> sort = default;
            Client.Option<long> retryTimeout = default;
            Client.Option<long> delayTimeout = default;
            Client.Option<long> minCount = default;
            Client.Option<bool> unreadOnly = default;
            Client.Option<DateTime> before = default;
            Client.Option<DateTime> since = default;
            var response = await _instance.GetEmailsAsync(inboxId, size, limit, sort, retryTimeout, delayTimeout, minCount, unreadOnly, before, since);
            var model = response.Ok();
            Assert.IsType<List<EmailPreview>>(model);
        }

        /// <summary>
        /// Test GetImapAccess
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetImapAccessAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            var response = await _instance.GetImapAccessAsync(inboxId);
            var model = response.Ok();
            Assert.IsType<ImapAccessDetails>(model);
        }

        /// <summary>
        /// Test GetImapSmtpAccess
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetImapSmtpAccessAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            var response = await _instance.GetImapSmtpAccessAsync(inboxId);
            var model = response.Ok();
            Assert.IsType<ImapSmtpAccessDetails>(model);
        }

        /// <summary>
        /// Test GetImapSmtpAccessEnv
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetImapSmtpAccessEnvAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            var response = await _instance.GetImapSmtpAccessEnvAsync(inboxId);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test GetImapSmtpAccessServers
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetImapSmtpAccessServersAsyncTest()
        {
            var response = await _instance.GetImapSmtpAccessServersAsync();
            var model = response.Ok();
            Assert.IsType<ImapSmtpAccessServers>(model);
        }

        /// <summary>
        /// Test GetInbox
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxAsyncTest()
        {
            Guid inboxId = default;
            var response = await _instance.GetInboxAsync(inboxId);
            var model = response.Ok();
            Assert.IsType<InboxDto>(model);
        }

        /// <summary>
        /// Test GetInboxByEmailAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxByEmailAddressAsyncTest()
        {
            string emailAddress = default;
            var response = await _instance.GetInboxByEmailAddressAsync(emailAddress);
            var model = response.Ok();
            Assert.IsType<InboxByEmailAddressResult>(model);
        }

        /// <summary>
        /// Test GetInboxByName
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxByNameAsyncTest()
        {
            string name = default;
            var response = await _instance.GetInboxByNameAsync(name);
            var model = response.Ok();
            Assert.IsType<InboxByNameResult>(model);
        }

        /// <summary>
        /// Test GetInboxCount
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxCountAsyncTest()
        {
            var response = await _instance.GetInboxCountAsync();
            var model = response.Ok();
            Assert.IsType<CountDto>(model);
        }

        /// <summary>
        /// Test GetInboxEmailCount
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxEmailCountAsyncTest()
        {
            Guid inboxId = default;
            var response = await _instance.GetInboxEmailCountAsync(inboxId);
            var model = response.Ok();
            Assert.IsType<CountDto>(model);
        }

        /// <summary>
        /// Test GetInboxEmailsPaginated
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxEmailsPaginatedAsyncTest()
        {
            Guid inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<bool> syncConnectors = default;
            var response = await _instance.GetInboxEmailsPaginatedAsync(inboxId, page, size, sort, since, before, syncConnectors);
            var model = response.Ok();
            Assert.IsType<PageEmailPreview>(model);
        }

        /// <summary>
        /// Test GetInboxIds
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxIdsAsyncTest()
        {
            var response = await _instance.GetInboxIdsAsync();
            var model = response.Ok();
            Assert.IsType<InboxIdsResult>(model);
        }

        /// <summary>
        /// Test GetInboxPlusAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxPlusAddressAsyncTest()
        {
            Guid plusAddressId = default;
            Guid inboxId = default;
            var response = await _instance.GetInboxPlusAddressAsync(plusAddressId, inboxId);
            var model = response.Ok();
            Assert.IsType<PlusAddressDto>(model);
        }

        /// <summary>
        /// Test GetInboxPlusAddressById
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxPlusAddressByIdAsyncTest()
        {
            Guid plusAddressId = default;
            Client.Option<Guid> inboxId = default;
            var response = await _instance.GetInboxPlusAddressByIdAsync(plusAddressId, inboxId);
            var model = response.Ok();
            Assert.IsType<PlusAddressDto>(model);
        }

        /// <summary>
        /// Test GetInboxPlusAddressEmails
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxPlusAddressEmailsAsyncTest()
        {
            string plusAddress = default;
            Guid inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetInboxPlusAddressEmailsAsync(plusAddress, inboxId, page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageEmailPreview>(model);
        }

        /// <summary>
        /// Test GetInboxPlusAddressEmailsForPlusAddressId
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxPlusAddressEmailsForPlusAddressIdAsyncTest()
        {
            Guid plusAddressId = default;
            Guid inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetInboxPlusAddressEmailsForPlusAddressIdAsync(plusAddressId, inboxId, page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageEmailPreview>(model);
        }

        /// <summary>
        /// Test GetInboxPlusAddresses
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxPlusAddressesAsyncTest()
        {
            Guid inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            var response = await _instance.GetInboxPlusAddressesAsync(inboxId, page, size, sort);
            var model = response.Ok();
            Assert.IsType<PagePlusAddressProjection>(model);
        }

        /// <summary>
        /// Test GetInboxSentCount
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxSentCountAsyncTest()
        {
            Guid inboxId = default;
            var response = await _instance.GetInboxSentCountAsync(inboxId);
            var model = response.Ok();
            Assert.IsType<CountDto>(model);
        }

        /// <summary>
        /// Test GetInboxSentEmails
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxSentEmailsAsyncTest()
        {
            Guid inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetInboxSentEmailsAsync(inboxId, page, size, sort, searchFilter, since, before);
            var model = response.Ok();
            Assert.IsType<PageSentEmailProjection>(model);
        }

        /// <summary>
        /// Test GetInboxTags
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxTagsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            var response = await _instance.GetInboxTagsAsync(page, size, sort, searchFilter);
            var model = response.Ok();
            Assert.IsType<List<string>>(model);
        }

        /// <summary>
        /// Test GetInboxTagsPaginated
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxTagsPaginatedAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            var response = await _instance.GetInboxTagsPaginatedAsync(page, size, sort, searchFilter);
            var model = response.Ok();
            Assert.IsType<PageInboxTags>(model);
        }

        /// <summary>
        /// Test GetInboxes
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxesAsyncTest()
        {
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<bool> excludeCatchAllInboxes = default;
            Client.Option<DateTime> before = default;
            Client.Option<List<Guid>> include = default;
            var response = await _instance.GetInboxesAsync(size, sort, since, excludeCatchAllInboxes, before, include);
            var model = response.Ok();
            Assert.IsType<List<InboxDto>>(model);
        }

        /// <summary>
        /// Test GetInboxesByTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxesByTagAsyncTest()
        {
            string tag = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            var response = await _instance.GetInboxesByTagAsync(tag, page, size, sort, searchFilter);
            var model = response.Ok();
            Assert.IsType<PageInboxProjection>(model);
        }

        /// <summary>
        /// Test GetLatestEmailInInbox
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLatestEmailInInboxAsyncTest()
        {
            Guid inboxId = default;
            long timeoutMillis = default;
            var response = await _instance.GetLatestEmailInInboxAsync(inboxId, timeoutMillis);
            var model = response.Ok();
            Assert.IsType<Email>(model);
        }

        /// <summary>
        /// Test GetOrganizationInboxes
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetOrganizationInboxesAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetOrganizationInboxesAsync(page, size, sort, searchFilter, since, before);
            var model = response.Ok();
            Assert.IsType<PageOrganizationInboxProjection>(model);
        }

        /// <summary>
        /// Test GetOutboxes
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetOutboxesAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            var response = await _instance.GetOutboxesAsync(page, size, sort);
            var model = response.Ok();
            Assert.IsType<PageInboxProjection>(model);
        }

        /// <summary>
        /// Test GetScheduledJob
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetScheduledJobAsyncTest()
        {
            Guid jobId = default;
            var response = await _instance.GetScheduledJobAsync(jobId);
            var model = response.Ok();
            Assert.IsType<ScheduledJobDto>(model);
        }

        /// <summary>
        /// Test GetScheduledJobsByInboxId
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetScheduledJobsByInboxIdAsyncTest()
        {
            Guid inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetScheduledJobsByInboxIdAsync(inboxId, page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageScheduledJobs>(model);
        }

        /// <summary>
        /// Test GetSmtpAccess
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSmtpAccessAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            var response = await _instance.GetSmtpAccessAsync(inboxId);
            var model = response.Ok();
            Assert.IsType<SmtpAccessDetails>(model);
        }

        /// <summary>
        /// Test IsEmailAddressAvailable
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task IsEmailAddressAvailableAsyncTest()
        {
            string emailAddress = default;
            var response = await _instance.IsEmailAddressAvailableAsync(emailAddress);
            var model = response.Ok();
            Assert.IsType<EmailAvailableResult>(model);
        }

        /// <summary>
        /// Test ListInboxRulesets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListInboxRulesetsAsyncTest()
        {
            Guid inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.ListInboxRulesetsAsync(inboxId, page, size, sort, searchFilter, since, before);
            var model = response.Ok();
            Assert.IsType<PageInboxRulesetDto>(model);
        }

        /// <summary>
        /// Test ListInboxTrackingPixels
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListInboxTrackingPixelsAsyncTest()
        {
            Guid inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.ListInboxTrackingPixelsAsync(inboxId, page, size, sort, searchFilter, since, before);
            var model = response.Ok();
            Assert.IsType<PageTrackingPixelProjection>(model);
        }

        /// <summary>
        /// Test SearchInboxes
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchInboxesAsyncTest()
        {
            SearchInboxesOptions searchInboxesOptions = default;
            var response = await _instance.SearchInboxesAsync(searchInboxesOptions);
            var model = response.Ok();
            Assert.IsType<PageInboxProjection>(model);
        }

        /// <summary>
        /// Test SendEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendEmailAsyncTest()
        {
            Guid inboxId = default;
            SendEmailOptions sendEmailOptions = default;
            await _instance.SendEmailAsync(inboxId, sendEmailOptions);
        }

        /// <summary>
        /// Test SendEmailAndConfirm
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendEmailAndConfirmAsyncTest()
        {
            Guid inboxId = default;
            SendEmailOptions sendEmailOptions = default;
            var response = await _instance.SendEmailAndConfirmAsync(inboxId, sendEmailOptions);
            var model = response.Created();
            Assert.IsType<SentEmailDto>(model);
        }

        /// <summary>
        /// Test SendEmailWithQueue
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendEmailWithQueueAsyncTest()
        {
            Guid inboxId = default;
            bool validateBeforeEnqueue = default;
            SendEmailOptions sendEmailOptions = default;
            await _instance.SendEmailWithQueueAsync(inboxId, validateBeforeEnqueue, sendEmailOptions);
        }

        /// <summary>
        /// Test SendSmtpEnvelope
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendSmtpEnvelopeAsyncTest()
        {
            Guid inboxId = default;
            SendSMTPEnvelopeOptions sendSMTPEnvelopeOptions = default;
            var response = await _instance.SendSmtpEnvelopeAsync(inboxId, sendSMTPEnvelopeOptions);
            var model = response.Created();
            Assert.IsType<SentEmailDto>(model);
        }

        /// <summary>
        /// Test SendTestEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendTestEmailAsyncTest()
        {
            Guid inboxId = default;
            await _instance.SendTestEmailAsync(inboxId);
        }

        /// <summary>
        /// Test SendWithSchedule
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendWithScheduleAsyncTest()
        {
            Guid inboxId = default;
            SendEmailOptions sendEmailOptions = default;
            Client.Option<DateTime> sendAtTimestamp = default;
            Client.Option<long> sendAtNowPlusSeconds = default;
            Client.Option<bool> validateBeforeEnqueue = default;
            var response = await _instance.SendWithScheduleAsync(inboxId, sendEmailOptions, sendAtTimestamp, sendAtNowPlusSeconds, validateBeforeEnqueue);
            var model = response.Created();
            Assert.IsType<ScheduledJobDto>(model);
        }

        /// <summary>
        /// Test SetInboxFavourited
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetInboxFavouritedAsyncTest()
        {
            Guid inboxId = default;
            SetInboxFavouritedOptions setInboxFavouritedOptions = default;
            var response = await _instance.SetInboxFavouritedAsync(inboxId, setInboxFavouritedOptions);
            var model = response.Ok();
            Assert.IsType<InboxDto>(model);
        }

        /// <summary>
        /// Test UpdateImapAccess
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateImapAccessAsyncTest()
        {
            UpdateImapAccessOptions updateImapAccessOptions = default;
            Client.Option<Guid> inboxId = default;
            await _instance.UpdateImapAccessAsync(updateImapAccessOptions, inboxId);
        }

        /// <summary>
        /// Test UpdateInbox
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateInboxAsyncTest()
        {
            Guid inboxId = default;
            UpdateInboxOptions updateInboxOptions = default;
            var response = await _instance.UpdateInboxAsync(inboxId, updateInboxOptions);
            var model = response.Ok();
            Assert.IsType<InboxDto>(model);
        }

        /// <summary>
        /// Test UpdateSmtpAccess
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateSmtpAccessAsyncTest()
        {
            UpdateSmtpAccessOptions updateSmtpAccessOptions = default;
            Client.Option<Guid> inboxId = default;
            await _instance.UpdateSmtpAccessAsync(updateSmtpAccessOptions, inboxId);
        }
    }
}
