/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing DomainControllerApi
    /// </summary>
    public sealed class DomainControllerApiTests : ApiTestsBase
    {
        private readonly IDomainControllerApi _instance;

        public DomainControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IDomainControllerApi>();
        }

        /// <summary>
        /// Test AddDomainWildcardCatchAll
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddDomainWildcardCatchAllAsyncTest()
        {
            Guid id = default;
            var response = await _instance.AddDomainWildcardCatchAllAsync(id);
            var model = response.Ok();
            Assert.IsType<DomainDto>(model);
        }

        /// <summary>
        /// Test CreateDomain
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateDomainAsyncTest()
        {
            CreateDomainOptions createDomainOptions = default;
            var response = await _instance.CreateDomainAsync(createDomainOptions);
            var model = response.Created();
            Assert.IsType<DomainDto>(model);
        }

        /// <summary>
        /// Test DeleteDomain
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteDomainAsyncTest()
        {
            Guid id = default;
            var response = await _instance.DeleteDomainAsync(id);
            var model = response.NoContent();
            Assert.IsType<List<string>>(model);
        }

        /// <summary>
        /// Test GetAvailableDomains
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAvailableDomainsAsyncTest()
        {
            Client.Option<string> inboxType = default;
            var response = await _instance.GetAvailableDomainsAsync(inboxType);
            var model = response.Ok();
            Assert.IsType<DomainGroupsDto>(model);
        }

        /// <summary>
        /// Test GetDomain
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDomainAsyncTest()
        {
            Guid id = default;
            Client.Option<bool> checkForErrors = default;
            var response = await _instance.GetDomainAsync(id, checkForErrors);
            var model = response.Ok();
            Assert.IsType<DomainDto>(model);
        }

        /// <summary>
        /// Test GetDomainIssues
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDomainIssuesAsyncTest()
        {
            var response = await _instance.GetDomainIssuesAsync();
            var model = response.Ok();
            Assert.IsType<DomainIssuesDto>(model);
        }

        /// <summary>
        /// Test GetDomainWildcardCatchAllInbox
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDomainWildcardCatchAllInboxAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetDomainWildcardCatchAllInboxAsync(id);
            var model = response.Ok();
            Assert.IsType<InboxDto>(model);
        }

        /// <summary>
        /// Test GetDomains
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDomainsAsyncTest()
        {
            var response = await _instance.GetDomainsAsync();
            var model = response.Ok();
            Assert.IsType<List<DomainPreview>>(model);
        }

        /// <summary>
        /// Test GetMailSlurpDomains
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetMailSlurpDomainsAsyncTest()
        {
            Client.Option<string> inboxType = default;
            var response = await _instance.GetMailSlurpDomainsAsync(inboxType);
            var model = response.Ok();
            Assert.IsType<DomainGroupsDto>(model);
        }

        /// <summary>
        /// Test UpdateDomain
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateDomainAsyncTest()
        {
            Guid id = default;
            UpdateDomainOptions updateDomainOptions = default;
            var response = await _instance.UpdateDomainAsync(id, updateDomainOptions);
            var model = response.Ok();
            Assert.IsType<DomainDto>(model);
        }
    }
}
