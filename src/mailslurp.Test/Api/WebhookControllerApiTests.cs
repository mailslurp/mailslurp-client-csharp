/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing WebhookControllerApi
    /// </summary>
    public sealed class WebhookControllerApiTests : ApiTestsBase
    {
        private readonly IWebhookControllerApi _instance;

        public WebhookControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IWebhookControllerApi>();
        }

        /// <summary>
        /// Test CreateAccountWebhook
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateAccountWebhookAsyncTest()
        {
            CreateWebhookOptions createWebhookOptions = default;
            var response = await _instance.CreateAccountWebhookAsync(createWebhookOptions);
            var model = response.Created();
            Assert.IsType<WebhookDto>(model);
        }

        /// <summary>
        /// Test CreateWebhook
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateWebhookAsyncTest()
        {
            Guid inboxId = default;
            CreateWebhookOptions createWebhookOptions = default;
            var response = await _instance.CreateWebhookAsync(inboxId, createWebhookOptions);
            var model = response.Created();
            Assert.IsType<WebhookDto>(model);
        }

        /// <summary>
        /// Test CreateWebhookForPhoneNumber
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateWebhookForPhoneNumberAsyncTest()
        {
            Guid phoneNumberId = default;
            CreateWebhookOptions createWebhookOptions = default;
            var response = await _instance.CreateWebhookForPhoneNumberAsync(phoneNumberId, createWebhookOptions);
            var model = response.Created();
            Assert.IsType<WebhookDto>(model);
        }

        /// <summary>
        /// Test DeleteAllWebhooks
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAllWebhooksAsyncTest()
        {
            Client.Option<DateTime> before = default;
            await _instance.DeleteAllWebhooksAsync(before);
        }

        /// <summary>
        /// Test DeleteWebhook
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteWebhookAsyncTest()
        {
            Guid inboxId = default;
            Guid webhookId = default;
            await _instance.DeleteWebhookAsync(inboxId, webhookId);
        }

        /// <summary>
        /// Test DeleteWebhookById
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteWebhookByIdAsyncTest()
        {
            Guid webhookId = default;
            await _instance.DeleteWebhookByIdAsync(webhookId);
        }

        /// <summary>
        /// Test GetAllAccountWebhooks
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllAccountWebhooksAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> eventType = default;
            Client.Option<string> health = default;
            Client.Option<string> searchFilter = default;
            var response = await _instance.GetAllAccountWebhooksAsync(page, size, sort, since, before, eventType, health, searchFilter);
            var model = response.Ok();
            Assert.IsType<PageWebhookProjection>(model);
        }

        /// <summary>
        /// Test GetAllWebhookEndpoints
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllWebhookEndpointsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<Guid> inboxId = default;
            Client.Option<Guid> phoneId = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> health = default;
            Client.Option<string> eventType = default;
            var response = await _instance.GetAllWebhookEndpointsAsync(page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType);
            var model = response.Ok();
            Assert.IsType<PageWebhookEndpointProjection>(model);
        }

        /// <summary>
        /// Test GetAllWebhookResults
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllWebhookResultsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<bool> unseenOnly = default;
            Client.Option<string> resultType = default;
            Client.Option<string> eventName = default;
            Client.Option<int> minStatusCode = default;
            Client.Option<int> maxStatusCode = default;
            Client.Option<Guid> inboxId = default;
            Client.Option<Guid> smsId = default;
            Client.Option<Guid> attachmentId = default;
            Client.Option<Guid> emailId = default;
            Client.Option<Guid> phoneId = default;
            var response = await _instance.GetAllWebhookResultsAsync(page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId);
            var model = response.Ok();
            Assert.IsType<PageWebhookResult>(model);
        }

        /// <summary>
        /// Test GetAllWebhooks
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllWebhooksAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<Guid> inboxId = default;
            Client.Option<Guid> phoneId = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> health = default;
            Client.Option<string> eventType = default;
            Client.Option<string> url = default;
            var response = await _instance.GetAllWebhooksAsync(page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType, url);
            var model = response.Ok();
            Assert.IsType<PageWebhookProjection>(model);
        }

        /// <summary>
        /// Test GetInboxWebhooksPaginated
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxWebhooksPaginatedAsyncTest()
        {
            Guid inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> health = default;
            Client.Option<string> eventType = default;
            var response = await _instance.GetInboxWebhooksPaginatedAsync(inboxId, page, size, sort, searchFilter, since, before, health, eventType);
            var model = response.Ok();
            Assert.IsType<PageWebhookProjection>(model);
        }

        /// <summary>
        /// Test GetJsonSchemaForWebhookEvent
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetJsonSchemaForWebhookEventAsyncTest()
        {
            string varEvent = default;
            var response = await _instance.GetJsonSchemaForWebhookEventAsync(varEvent);
            var model = response.Ok();
            Assert.IsType<JSONSchemaDto>(model);
        }

        /// <summary>
        /// Test GetJsonSchemaForWebhookPayload
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetJsonSchemaForWebhookPayloadAsyncTest()
        {
            Guid webhookId = default;
            var response = await _instance.GetJsonSchemaForWebhookPayloadAsync(webhookId);
            var model = response.Ok();
            Assert.IsType<JSONSchemaDto>(model);
        }

        /// <summary>
        /// Test GetPhoneNumberWebhooksPaginated
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPhoneNumberWebhooksPaginatedAsyncTest()
        {
            Guid phoneId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> eventType = default;
            Client.Option<string> searchFilter = default;
            Client.Option<string> health = default;
            var response = await _instance.GetPhoneNumberWebhooksPaginatedAsync(phoneId, page, size, sort, since, before, eventType, searchFilter, health);
            var model = response.Ok();
            Assert.IsType<PageWebhookProjection>(model);
        }

        /// <summary>
        /// Test GetTestWebhookPayload
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTestWebhookPayloadAsyncTest()
        {
            Client.Option<string> eventName = default;
            var response = await _instance.GetTestWebhookPayloadAsync(eventName);
            var model = response.Ok();
            Assert.IsType<AbstractWebhookPayload>(model);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadBounce
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTestWebhookPayloadBounceAsyncTest()
        {
            var response = await _instance.GetTestWebhookPayloadBounceAsync();
            var model = response.Ok();
            Assert.IsType<WebhookBouncePayload>(model);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadBounceRecipient
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTestWebhookPayloadBounceRecipientAsyncTest()
        {
            var response = await _instance.GetTestWebhookPayloadBounceRecipientAsync();
            var model = response.Ok();
            Assert.IsType<WebhookBounceRecipientPayload>(model);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadDeliveryStatus
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTestWebhookPayloadDeliveryStatusAsyncTest()
        {
            var response = await _instance.GetTestWebhookPayloadDeliveryStatusAsync();
            var model = response.Ok();
            Assert.IsType<WebhookDeliveryStatusPayload>(model);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadEmailOpened
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTestWebhookPayloadEmailOpenedAsyncTest()
        {
            var response = await _instance.GetTestWebhookPayloadEmailOpenedAsync();
            var model = response.Ok();
            Assert.IsType<WebhookEmailOpenedPayload>(model);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadEmailRead
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTestWebhookPayloadEmailReadAsyncTest()
        {
            var response = await _instance.GetTestWebhookPayloadEmailReadAsync();
            var model = response.Ok();
            Assert.IsType<WebhookEmailReadPayload>(model);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadForWebhook
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTestWebhookPayloadForWebhookAsyncTest()
        {
            Guid webhookId = default;
            var response = await _instance.GetTestWebhookPayloadForWebhookAsync(webhookId);
            var model = response.Created();
            Assert.IsType<AbstractWebhookPayload>(model);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadNewAttachment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTestWebhookPayloadNewAttachmentAsyncTest()
        {
            var response = await _instance.GetTestWebhookPayloadNewAttachmentAsync();
            var model = response.Ok();
            Assert.IsType<WebhookNewAttachmentPayload>(model);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadNewContact
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTestWebhookPayloadNewContactAsyncTest()
        {
            var response = await _instance.GetTestWebhookPayloadNewContactAsync();
            var model = response.Ok();
            Assert.IsType<WebhookNewContactPayload>(model);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadNewEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTestWebhookPayloadNewEmailAsyncTest()
        {
            var response = await _instance.GetTestWebhookPayloadNewEmailAsync();
            var model = response.Ok();
            Assert.IsType<WebhookNewEmailPayload>(model);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadNewSms
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTestWebhookPayloadNewSmsAsyncTest()
        {
            var response = await _instance.GetTestWebhookPayloadNewSmsAsync();
            var model = response.Ok();
            Assert.IsType<WebhookNewSmsPayload>(model);
        }

        /// <summary>
        /// Test GetWebhook
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetWebhookAsyncTest()
        {
            Guid webhookId = default;
            var response = await _instance.GetWebhookAsync(webhookId);
            var model = response.Ok();
            Assert.IsType<WebhookDto>(model);
        }

        /// <summary>
        /// Test GetWebhookResult
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetWebhookResultAsyncTest()
        {
            Guid webhookResultId = default;
            var response = await _instance.GetWebhookResultAsync(webhookResultId);
            var model = response.Ok();
            Assert.IsType<WebhookResultDto>(model);
        }

        /// <summary>
        /// Test GetWebhookResults
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetWebhookResultsAsyncTest()
        {
            Guid webhookId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<bool> unseenOnly = default;
            Client.Option<string> resultType = default;
            Client.Option<string> eventName = default;
            Client.Option<int> minStatusCode = default;
            Client.Option<int> maxStatusCode = default;
            Client.Option<Guid> inboxId = default;
            Client.Option<Guid> smsId = default;
            Client.Option<Guid> attachmentId = default;
            Client.Option<Guid> emailId = default;
            Client.Option<Guid> phoneId = default;
            var response = await _instance.GetWebhookResultsAsync(webhookId, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId);
            var model = response.Ok();
            Assert.IsType<PageWebhookResult>(model);
        }

        /// <summary>
        /// Test GetWebhookResultsCount
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetWebhookResultsCountAsyncTest()
        {
            Guid webhookId = default;
            var response = await _instance.GetWebhookResultsCountAsync(webhookId);
            var model = response.Ok();
            Assert.IsType<CountDto>(model);
        }

        /// <summary>
        /// Test GetWebhookResultsUnseenErrorCount
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetWebhookResultsUnseenErrorCountAsyncTest()
        {
            var response = await _instance.GetWebhookResultsUnseenErrorCountAsync();
            var model = response.Ok();
            Assert.IsType<UnseenErrorCountDto>(model);
        }

        /// <summary>
        /// Test GetWebhooks
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetWebhooksAsyncTest()
        {
            Guid inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            var response = await _instance.GetWebhooksAsync(inboxId, page, size, sort);
            var model = response.Ok();
            Assert.IsType<List<WebhookProjection>>(model);
        }

        /// <summary>
        /// Test RedriveAllWebhookResults
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RedriveAllWebhookResultsAsyncTest()
        {
            var response = await _instance.RedriveAllWebhookResultsAsync();
            var model = response.Ok();
            Assert.IsType<WebhookRedriveAllResult>(model);
        }

        /// <summary>
        /// Test RedriveWebhookResult
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RedriveWebhookResultAsyncTest()
        {
            Guid webhookResultId = default;
            var response = await _instance.RedriveWebhookResultAsync(webhookResultId);
            var model = response.Ok();
            Assert.IsType<WebhookRedriveResult>(model);
        }

        /// <summary>
        /// Test SendTestData
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendTestDataAsyncTest()
        {
            Guid webhookId = default;
            var response = await _instance.SendTestDataAsync(webhookId);
            var model = response.Created();
            Assert.IsType<WebhookTestResult>(model);
        }

        /// <summary>
        /// Test UpdateWebhook
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateWebhookAsyncTest()
        {
            Guid webhookId = default;
            CreateWebhookOptions createWebhookOptions = default;
            Client.Option<Guid> inboxId = default;
            Client.Option<Guid> phoneNumberId = default;
            Client.Option<bool> overrideAuth = default;
            var response = await _instance.UpdateWebhookAsync(webhookId, createWebhookOptions, inboxId, phoneNumberId, overrideAuth);
            var model = response.Ok();
            Assert.IsType<WebhookDto>(model);
        }

        /// <summary>
        /// Test UpdateWebhookHeaders
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateWebhookHeadersAsyncTest()
        {
            Guid webhookId = default;
            WebhookHeaders webhookHeaders = default;
            var response = await _instance.UpdateWebhookHeadersAsync(webhookId, webhookHeaders);
            var model = response.Ok();
            Assert.IsType<WebhookDto>(model);
        }

        /// <summary>
        /// Test VerifyWebhookSignature
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VerifyWebhookSignatureAsyncTest()
        {
            VerifyWebhookSignatureOptions verifyWebhookSignatureOptions = default;
            var response = await _instance.VerifyWebhookSignatureAsync(verifyWebhookSignatureOptions);
            var model = response.Ok();
            Assert.IsType<VerifyWebhookSignatureResults>(model);
        }

        /// <summary>
        /// Test WaitForWebhookResults
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WaitForWebhookResultsAsyncTest()
        {
            Guid webhookId = default;
            int expectedCount = default;
            int timeout = default;
            var response = await _instance.WaitForWebhookResultsAsync(webhookId, expectedCount, timeout);
            var model = response.Ok();
            Assert.IsType<List<WebhookResultDto>>(model);
        }
    }
}
