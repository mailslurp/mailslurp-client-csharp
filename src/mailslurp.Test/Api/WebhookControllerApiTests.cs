/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using mailslurp.Client;
using mailslurp.Api;
using mailslurp.Model;

namespace mailslurp.Test
{
    /// <summary>
    ///  Class for testing WebhookControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WebhookControllerApiTests : IDisposable
    {
        private WebhookControllerApi instance;

        public WebhookControllerApiTests()
        {
            instance = new WebhookControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WebhookControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WebhookControllerApi
            //Assert.IsType(typeof(WebhookControllerApi), instance, "instance is a WebhookControllerApi");
        }

        
        /// <summary>
        /// Test CreateWebhook
        /// </summary>
        [Fact]
        public void CreateWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //CreateWebhookOptions webhookOptions = null;
            //var response = instance.CreateWebhook(inboxId, webhookOptions);
            //Assert.IsType<WebhookDto> (response, "response is WebhookDto");
        }
        
        /// <summary>
        /// Test DeleteWebhook
        /// </summary>
        [Fact]
        public void DeleteWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //Guid webhookId = null;
            //instance.DeleteWebhook(inboxId, webhookId);
            
        }
        
        /// <summary>
        /// Test GetAllWebhookResults
        /// </summary>
        [Fact]
        public void GetAllWebhookResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? before = null;
            //int? page = null;
            //string searchFilter = null;
            //DateTime? since = null;
            //int? size = null;
            //string sort = null;
            //var response = instance.GetAllWebhookResults(before, page, searchFilter, since, size, sort);
            //Assert.IsType<PageWebhookResult> (response, "response is PageWebhookResult");
        }
        
        /// <summary>
        /// Test GetAllWebhooks
        /// </summary>
        [Fact]
        public void GetAllWebhooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? before = null;
            //int? page = null;
            //string searchFilter = null;
            //DateTime? since = null;
            //int? size = null;
            //string sort = null;
            //var response = instance.GetAllWebhooks(before, page, searchFilter, since, size, sort);
            //Assert.IsType<PageWebhookProjection> (response, "response is PageWebhookProjection");
        }
        
        /// <summary>
        /// Test GetInboxWebhooksPaginated
        /// </summary>
        [Fact]
        public void GetInboxWebhooksPaginatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //DateTime? before = null;
            //int? page = null;
            //string searchFilter = null;
            //DateTime? since = null;
            //int? size = null;
            //string sort = null;
            //var response = instance.GetInboxWebhooksPaginated(inboxId, before, page, searchFilter, since, size, sort);
            //Assert.IsType<PageWebhookProjection> (response, "response is PageWebhookProjection");
        }
        
        /// <summary>
        /// Test GetJsonSchemaForWebhookPayload
        /// </summary>
        [Fact]
        public void GetJsonSchemaForWebhookPayloadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookId = null;
            //var response = instance.GetJsonSchemaForWebhookPayload(webhookId);
            //Assert.IsType<JSONSchemaDto> (response, "response is JSONSchemaDto");
        }
        
        /// <summary>
        /// Test GetTestWebhookPayload
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventName = null;
            //var response = instance.GetTestWebhookPayload(eventName);
            //Assert.IsType<AbstractWebhookPayload> (response, "response is AbstractWebhookPayload");
        }
        
        /// <summary>
        /// Test GetTestWebhookPayloadEmailOpened
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadEmailOpenedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTestWebhookPayloadEmailOpened();
            //Assert.IsType<WebhookEmailOpenedPayload> (response, "response is WebhookEmailOpenedPayload");
        }
        
        /// <summary>
        /// Test GetTestWebhookPayloadEmailRead
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadEmailReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTestWebhookPayloadEmailRead();
            //Assert.IsType<WebhookEmailReadPayload> (response, "response is WebhookEmailReadPayload");
        }
        
        /// <summary>
        /// Test GetTestWebhookPayloadForWebhook
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadForWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookId = null;
            //var response = instance.GetTestWebhookPayloadForWebhook(webhookId);
            //Assert.IsType<AbstractWebhookPayload> (response, "response is AbstractWebhookPayload");
        }
        
        /// <summary>
        /// Test GetTestWebhookPayloadNewAttachment
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadNewAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTestWebhookPayloadNewAttachment();
            //Assert.IsType<WebhookNewAttachmentPayload> (response, "response is WebhookNewAttachmentPayload");
        }
        
        /// <summary>
        /// Test GetTestWebhookPayloadNewContact
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadNewContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTestWebhookPayloadNewContact();
            //Assert.IsType<WebhookNewContactPayload> (response, "response is WebhookNewContactPayload");
        }
        
        /// <summary>
        /// Test GetTestWebhookPayloadNewEmail
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadNewEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTestWebhookPayloadNewEmail();
            //Assert.IsType<WebhookNewEmailPayload> (response, "response is WebhookNewEmailPayload");
        }
        
        /// <summary>
        /// Test GetWebhook
        /// </summary>
        [Fact]
        public void GetWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookId = null;
            //var response = instance.GetWebhook(webhookId);
            //Assert.IsType<WebhookDto> (response, "response is WebhookDto");
        }
        
        /// <summary>
        /// Test GetWebhookResult
        /// </summary>
        [Fact]
        public void GetWebhookResultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookResultId = null;
            //var response = instance.GetWebhookResult(webhookResultId);
            //Assert.IsType<WebhookResultDto> (response, "response is WebhookResultDto");
        }
        
        /// <summary>
        /// Test GetWebhookResults
        /// </summary>
        [Fact]
        public void GetWebhookResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookId = null;
            //DateTime? before = null;
            //int? page = null;
            //string searchFilter = null;
            //DateTime? since = null;
            //int? size = null;
            //string sort = null;
            //var response = instance.GetWebhookResults(webhookId, before, page, searchFilter, since, size, sort);
            //Assert.IsType<PageWebhookResult> (response, "response is PageWebhookResult");
        }
        
        /// <summary>
        /// Test GetWebhooks
        /// </summary>
        [Fact]
        public void GetWebhooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //var response = instance.GetWebhooks(inboxId);
            //Assert.IsType<List<WebhookDto>> (response, "response is List<WebhookDto>");
        }
        
        /// <summary>
        /// Test RedriveWebhookResult
        /// </summary>
        [Fact]
        public void RedriveWebhookResultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookResultId = null;
            //var response = instance.RedriveWebhookResult(webhookResultId);
            //Assert.IsType<WebhookRedriveResult> (response, "response is WebhookRedriveResult");
        }
        
        /// <summary>
        /// Test SendTestData
        /// </summary>
        [Fact]
        public void SendTestDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookId = null;
            //var response = instance.SendTestData(webhookId);
            //Assert.IsType<WebhookTestResult> (response, "response is WebhookTestResult");
        }
        
    }

}
