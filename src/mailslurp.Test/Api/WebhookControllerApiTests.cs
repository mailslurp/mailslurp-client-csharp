/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using mailslurp.Client;
using mailslurp.Api;
// uncomment below to import models
//using mailslurp.Model;

namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing WebhookControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WebhookControllerApiTests : IDisposable
    {
        private WebhookControllerApi instance;

        public WebhookControllerApiTests()
        {
            instance = new WebhookControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WebhookControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WebhookControllerApi
            //Assert.IsType<WebhookControllerApi>(instance);
        }

        /// <summary>
        /// Test CreateAccountWebhook
        /// </summary>
        [Fact]
        public void CreateAccountWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateWebhookOptions createWebhookOptions = null;
            //var response = instance.CreateAccountWebhook(createWebhookOptions);
            //Assert.IsType<WebhookDto>(response);
        }

        /// <summary>
        /// Test CreateWebhook
        /// </summary>
        [Fact]
        public void CreateWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //CreateWebhookOptions createWebhookOptions = null;
            //var response = instance.CreateWebhook(inboxId, createWebhookOptions);
            //Assert.IsType<WebhookDto>(response);
        }

        /// <summary>
        /// Test CreateWebhookForPhoneNumber
        /// </summary>
        [Fact]
        public void CreateWebhookForPhoneNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid phoneNumberId = null;
            //CreateWebhookOptions createWebhookOptions = null;
            //var response = instance.CreateWebhookForPhoneNumber(phoneNumberId, createWebhookOptions);
            //Assert.IsType<WebhookDto>(response);
        }

        /// <summary>
        /// Test DeleteAllWebhooks
        /// </summary>
        [Fact]
        public void DeleteAllWebhooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? before = null;
            //instance.DeleteAllWebhooks(before);
        }

        /// <summary>
        /// Test DeleteWebhook
        /// </summary>
        [Fact]
        public void DeleteWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //Guid webhookId = null;
            //instance.DeleteWebhook(inboxId, webhookId);
        }

        /// <summary>
        /// Test DeleteWebhookById
        /// </summary>
        [Fact]
        public void DeleteWebhookByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookId = null;
            //instance.DeleteWebhookById(webhookId);
        }

        /// <summary>
        /// Test GetAllAccountWebhooks
        /// </summary>
        [Fact]
        public void GetAllAccountWebhooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string eventType = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //var response = instance.GetAllAccountWebhooks(page, size, sort, eventType, since, before);
            //Assert.IsType<PageWebhookProjection>(response);
        }

        /// <summary>
        /// Test GetAllWebhookResults
        /// </summary>
        [Fact]
        public void GetAllWebhookResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string searchFilter = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //bool? unseenOnly = null;
            //string resultType = null;
            //string eventName = null;
            //int? minStatusCode = null;
            //int? maxStatusCode = null;
            //Guid? inboxId = null;
            //Guid? smsId = null;
            //Guid? attachmentId = null;
            //Guid? emailId = null;
            //Guid? phoneId = null;
            //var response = instance.GetAllWebhookResults(page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId);
            //Assert.IsType<PageWebhookResult>(response);
        }

        /// <summary>
        /// Test GetAllWebhooks
        /// </summary>
        [Fact]
        public void GetAllWebhooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string searchFilter = null;
            //DateTime? since = null;
            //Guid? inboxId = null;
            //Guid? phoneId = null;
            //DateTime? before = null;
            //var response = instance.GetAllWebhooks(page, size, sort, searchFilter, since, inboxId, phoneId, before);
            //Assert.IsType<PageWebhookProjection>(response);
        }

        /// <summary>
        /// Test GetInboxWebhooksPaginated
        /// </summary>
        [Fact]
        public void GetInboxWebhooksPaginatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string searchFilter = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //var response = instance.GetInboxWebhooksPaginated(inboxId, page, size, sort, searchFilter, since, before);
            //Assert.IsType<PageWebhookProjection>(response);
        }

        /// <summary>
        /// Test GetJsonSchemaForWebhookEvent
        /// </summary>
        [Fact]
        public void GetJsonSchemaForWebhookEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _event = null;
            //var response = instance.GetJsonSchemaForWebhookEvent(_event);
            //Assert.IsType<JSONSchemaDto>(response);
        }

        /// <summary>
        /// Test GetJsonSchemaForWebhookPayload
        /// </summary>
        [Fact]
        public void GetJsonSchemaForWebhookPayloadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookId = null;
            //var response = instance.GetJsonSchemaForWebhookPayload(webhookId);
            //Assert.IsType<JSONSchemaDto>(response);
        }

        /// <summary>
        /// Test GetPhoneNumberWebhooksPaginated
        /// </summary>
        [Fact]
        public void GetPhoneNumberWebhooksPaginatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid phoneId = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //var response = instance.GetPhoneNumberWebhooksPaginated(phoneId, page, size, sort, since, before);
            //Assert.IsType<PageWebhookProjection>(response);
        }

        /// <summary>
        /// Test GetTestWebhookPayload
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventName = null;
            //var response = instance.GetTestWebhookPayload(eventName);
            //Assert.IsType<AbstractWebhookPayload>(response);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadBounce
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadBounceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTestWebhookPayloadBounce();
            //Assert.IsType<WebhookBouncePayload>(response);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadBounceRecipient
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadBounceRecipientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTestWebhookPayloadBounceRecipient();
            //Assert.IsType<WebhookBounceRecipientPayload>(response);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadDeliveryStatus
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadDeliveryStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTestWebhookPayloadDeliveryStatus();
            //Assert.IsType<WebhookDeliveryStatusPayload>(response);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadEmailOpened
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadEmailOpenedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTestWebhookPayloadEmailOpened();
            //Assert.IsType<WebhookEmailOpenedPayload>(response);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadEmailRead
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadEmailReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTestWebhookPayloadEmailRead();
            //Assert.IsType<WebhookEmailReadPayload>(response);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadForWebhook
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadForWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookId = null;
            //var response = instance.GetTestWebhookPayloadForWebhook(webhookId);
            //Assert.IsType<AbstractWebhookPayload>(response);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadNewAttachment
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadNewAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTestWebhookPayloadNewAttachment();
            //Assert.IsType<WebhookNewAttachmentPayload>(response);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadNewContact
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadNewContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTestWebhookPayloadNewContact();
            //Assert.IsType<WebhookNewContactPayload>(response);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadNewEmail
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadNewEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTestWebhookPayloadNewEmail();
            //Assert.IsType<WebhookNewEmailPayload>(response);
        }

        /// <summary>
        /// Test GetTestWebhookPayloadNewSms
        /// </summary>
        [Fact]
        public void GetTestWebhookPayloadNewSmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTestWebhookPayloadNewSms();
            //Assert.IsType<WebhookNewSmsPayload>(response);
        }

        /// <summary>
        /// Test GetWebhook
        /// </summary>
        [Fact]
        public void GetWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookId = null;
            //var response = instance.GetWebhook(webhookId);
            //Assert.IsType<WebhookDto>(response);
        }

        /// <summary>
        /// Test GetWebhookResult
        /// </summary>
        [Fact]
        public void GetWebhookResultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookResultId = null;
            //var response = instance.GetWebhookResult(webhookResultId);
            //Assert.IsType<WebhookResultDto>(response);
        }

        /// <summary>
        /// Test GetWebhookResults
        /// </summary>
        [Fact]
        public void GetWebhookResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookId = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string searchFilter = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //bool? unseenOnly = null;
            //string resultType = null;
            //string eventName = null;
            //int? minStatusCode = null;
            //int? maxStatusCode = null;
            //Guid? inboxId = null;
            //Guid? smsId = null;
            //Guid? attachmentId = null;
            //Guid? emailId = null;
            //Guid? phoneId = null;
            //var response = instance.GetWebhookResults(webhookId, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId);
            //Assert.IsType<PageWebhookResult>(response);
        }

        /// <summary>
        /// Test GetWebhookResultsCount
        /// </summary>
        [Fact]
        public void GetWebhookResultsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookId = null;
            //var response = instance.GetWebhookResultsCount(webhookId);
            //Assert.IsType<CountDto>(response);
        }

        /// <summary>
        /// Test GetWebhookResultsUnseenErrorCount
        /// </summary>
        [Fact]
        public void GetWebhookResultsUnseenErrorCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetWebhookResultsUnseenErrorCount();
            //Assert.IsType<UnseenErrorCountDto>(response);
        }

        /// <summary>
        /// Test GetWebhooks
        /// </summary>
        [Fact]
        public void GetWebhooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //var response = instance.GetWebhooks(inboxId);
            //Assert.IsType<List<WebhookDto>>(response);
        }

        /// <summary>
        /// Test RedriveAllWebhookResults
        /// </summary>
        [Fact]
        public void RedriveAllWebhookResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RedriveAllWebhookResults();
            //Assert.IsType<WebhookRedriveAllResult>(response);
        }

        /// <summary>
        /// Test RedriveWebhookResult
        /// </summary>
        [Fact]
        public void RedriveWebhookResultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookResultId = null;
            //var response = instance.RedriveWebhookResult(webhookResultId);
            //Assert.IsType<WebhookRedriveResult>(response);
        }

        /// <summary>
        /// Test SendTestData
        /// </summary>
        [Fact]
        public void SendTestDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookId = null;
            //var response = instance.SendTestData(webhookId);
            //Assert.IsType<WebhookTestResult>(response);
        }

        /// <summary>
        /// Test UpdateWebhookHeaders
        /// </summary>
        [Fact]
        public void UpdateWebhookHeadersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookId = null;
            //WebhookHeaders webhookHeaders = null;
            //var response = instance.UpdateWebhookHeaders(webhookId, webhookHeaders);
            //Assert.IsType<WebhookDto>(response);
        }

        /// <summary>
        /// Test VerifyWebhookSignature
        /// </summary>
        [Fact]
        public void VerifyWebhookSignatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //VerifyWebhookSignatureOptions verifyWebhookSignatureOptions = null;
            //var response = instance.VerifyWebhookSignature(verifyWebhookSignatureOptions);
            //Assert.IsType<VerifyWebhookSignatureResults>(response);
        }

        /// <summary>
        /// Test WaitForWebhookResults
        /// </summary>
        [Fact]
        public void WaitForWebhookResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid webhookId = null;
            //int expectedCount = null;
            //int timeout = null;
            //var response = instance.WaitForWebhookResults(webhookId, expectedCount, timeout);
            //Assert.IsType<List<WebhookResultDto>>(response);
        }
    }
}
