/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using mailslurp.Client;
using mailslurp.Api;
using mailslurp.Model;

namespace mailslurp.Test
{
    /// <summary>
    ///  Class for testing WaitForControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WaitForControllerApiTests : IDisposable
    {
        private WaitForControllerApi instance;

        public WaitForControllerApiTests()
        {
            instance = new WaitForControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WaitForControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WaitForControllerApi
            //Assert.IsType(typeof(WaitForControllerApi), instance, "instance is a WaitForControllerApi");
        }

        
        /// <summary>
        /// Test WaitFor
        /// </summary>
        [Fact]
        public void WaitForTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WaitForConditions waitForConditions = null;
            //var response = instance.WaitFor(waitForConditions);
            //Assert.IsType<List<EmailPreview>> (response, "response is List<EmailPreview>");
        }
        
        /// <summary>
        /// Test WaitForEmailCount
        /// </summary>
        [Fact]
        public void WaitForEmailCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? count = null;
            //Guid? inboxId = null;
            //long? timeout = null;
            //bool? unreadOnly = null;
            //var response = instance.WaitForEmailCount(count, inboxId, timeout, unreadOnly);
            //Assert.IsType<List<EmailPreview>> (response, "response is List<EmailPreview>");
        }
        
        /// <summary>
        /// Test WaitForLatestEmail
        /// </summary>
        [Fact]
        public void WaitForLatestEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? inboxId = null;
            //long? timeout = null;
            //bool? unreadOnly = null;
            //var response = instance.WaitForLatestEmail(inboxId, timeout, unreadOnly);
            //Assert.IsType<Email> (response, "response is Email");
        }
        
        /// <summary>
        /// Test WaitForMatchingEmail
        /// </summary>
        [Fact]
        public void WaitForMatchingEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MatchOptions matchOptions = null;
            //int? count = null;
            //Guid? inboxId = null;
            //long? timeout = null;
            //bool? unreadOnly = null;
            //var response = instance.WaitForMatchingEmail(matchOptions, count, inboxId, timeout, unreadOnly);
            //Assert.IsType<List<EmailPreview>> (response, "response is List<EmailPreview>");
        }
        
        /// <summary>
        /// Test WaitForNthEmail
        /// </summary>
        [Fact]
        public void WaitForNthEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? inboxId = null;
            //int? index = null;
            //long? timeout = null;
            //bool? unreadOnly = null;
            //var response = instance.WaitForNthEmail(inboxId, index, timeout, unreadOnly);
            //Assert.IsType<Email> (response, "response is Email");
        }
        
    }

}
