/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing WaitForControllerApi
    /// </summary>
    public sealed class WaitForControllerApiTests : ApiTestsBase
    {
        private readonly IWaitForControllerApi _instance;

        public WaitForControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IWaitForControllerApi>();
        }

        /// <summary>
        /// Test WaitFor
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WaitForAsyncTest()
        {
            WaitForConditions waitForConditions = default;
            var response = await _instance.WaitForAsync(waitForConditions);
            var model = response.Ok();
            Assert.IsType<List<EmailPreview>>(model);
        }

        /// <summary>
        /// Test WaitForEmailCount
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WaitForEmailCountAsyncTest()
        {
            Guid inboxId = default;
            int count = default;
            Client.Option<long> timeout = default;
            Client.Option<bool> unreadOnly = default;
            Client.Option<DateTime> before = default;
            Client.Option<DateTime> since = default;
            Client.Option<string> sort = default;
            Client.Option<long> delay = default;
            var response = await _instance.WaitForEmailCountAsync(inboxId, count, timeout, unreadOnly, before, since, sort, delay);
            var model = response.Ok();
            Assert.IsType<List<EmailPreview>>(model);
        }

        /// <summary>
        /// Test WaitForLatestEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WaitForLatestEmailAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            Client.Option<long> timeout = default;
            Client.Option<bool> unreadOnly = default;
            Client.Option<DateTime> before = default;
            Client.Option<DateTime> since = default;
            Client.Option<string> sort = default;
            Client.Option<long> delay = default;
            var response = await _instance.WaitForLatestEmailAsync(inboxId, timeout, unreadOnly, before, since, sort, delay);
            var model = response.Ok();
            Assert.IsType<Email>(model);
        }

        /// <summary>
        /// Test WaitForLatestSms
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WaitForLatestSmsAsyncTest()
        {
            WaitForSingleSmsOptions waitForSingleSmsOptions = default;
            var response = await _instance.WaitForLatestSmsAsync(waitForSingleSmsOptions);
            var model = response.Ok();
            Assert.IsType<SmsDto>(model);
        }

        /// <summary>
        /// Test WaitForMatchingEmails
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WaitForMatchingEmailsAsyncTest()
        {
            Guid inboxId = default;
            int count = default;
            MatchOptions matchOptions = default;
            Client.Option<DateTime> before = default;
            Client.Option<DateTime> since = default;
            Client.Option<string> sort = default;
            Client.Option<long> delay = default;
            Client.Option<long> timeout = default;
            Client.Option<bool> unreadOnly = default;
            var response = await _instance.WaitForMatchingEmailsAsync(inboxId, count, matchOptions, before, since, sort, delay, timeout, unreadOnly);
            var model = response.Ok();
            Assert.IsType<List<EmailPreview>>(model);
        }

        /// <summary>
        /// Test WaitForMatchingFirstEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WaitForMatchingFirstEmailAsyncTest()
        {
            Guid inboxId = default;
            MatchOptions matchOptions = default;
            Client.Option<long> timeout = default;
            Client.Option<bool> unreadOnly = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> sort = default;
            Client.Option<long> delay = default;
            var response = await _instance.WaitForMatchingFirstEmailAsync(inboxId, matchOptions, timeout, unreadOnly, since, before, sort, delay);
            var model = response.Ok();
            Assert.IsType<Email>(model);
        }

        /// <summary>
        /// Test WaitForNthEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WaitForNthEmailAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            Client.Option<int> index = default;
            Client.Option<long> timeout = default;
            Client.Option<bool> unreadOnly = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> sort = default;
            Client.Option<long> delay = default;
            var response = await _instance.WaitForNthEmailAsync(inboxId, index, timeout, unreadOnly, since, before, sort, delay);
            var model = response.Ok();
            Assert.IsType<Email>(model);
        }

        /// <summary>
        /// Test WaitForSms
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WaitForSmsAsyncTest()
        {
            WaitForSmsConditions waitForSmsConditions = default;
            var response = await _instance.WaitForSmsAsync(waitForSmsConditions);
            var model = response.Ok();
            Assert.IsType<List<SmsPreview>>(model);
        }
    }
}
