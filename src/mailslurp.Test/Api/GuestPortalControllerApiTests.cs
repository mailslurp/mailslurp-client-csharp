/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing GuestPortalControllerApi
    /// </summary>
    public sealed class GuestPortalControllerApiTests : ApiTestsBase
    {
        private readonly IGuestPortalControllerApi _instance;

        public GuestPortalControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IGuestPortalControllerApi>();
        }

        /// <summary>
        /// Test CreateGuestPortal
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateGuestPortalAsyncTest()
        {
            CreatePortalOptions createPortalOptions = default;
            var response = await _instance.CreateGuestPortalAsync(createPortalOptions);
            var model = response.Ok();
            Assert.IsType<GuestPortalDto>(model);
        }

        /// <summary>
        /// Test CreateGuestPortalUser
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateGuestPortalUserAsyncTest()
        {
            Guid portalId = default;
            CreatePortalUserOptions createPortalUserOptions = default;
            var response = await _instance.CreateGuestPortalUserAsync(portalId, createPortalUserOptions);
            var model = response.Ok();
            Assert.IsType<GuestPortalUserCreateDto>(model);
        }

        /// <summary>
        /// Test GetAllGuestPortalUsers
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllGuestPortalUsersAsyncTest()
        {
            Client.Option<Guid> portalId = default;
            Client.Option<string> search = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetAllGuestPortalUsersAsync(portalId, search, page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageGuestPortalUsers>(model);
        }

        /// <summary>
        /// Test GetGuestPortal
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGuestPortalAsyncTest()
        {
            Guid portalId = default;
            var response = await _instance.GetGuestPortalAsync(portalId);
            var model = response.Ok();
            Assert.IsType<GuestPortalDto>(model);
        }

        /// <summary>
        /// Test GetGuestPortalUser
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGuestPortalUserAsyncTest()
        {
            Guid portalId = default;
            Guid guestId = default;
            var response = await _instance.GetGuestPortalUserAsync(portalId, guestId);
            var model = response.Ok();
            Assert.IsType<GuestPortalUserDto>(model);
        }

        /// <summary>
        /// Test GetGuestPortalUserById
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGuestPortalUserByIdAsyncTest()
        {
            Guid guestId = default;
            var response = await _instance.GetGuestPortalUserByIdAsync(guestId);
            var model = response.Ok();
            Assert.IsType<GuestPortalUserDto>(model);
        }

        /// <summary>
        /// Test GetGuestPortalUsers
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGuestPortalUsersAsyncTest()
        {
            Guid portalId = default;
            Client.Option<string> search = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetGuestPortalUsersAsync(portalId, search, page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageGuestPortalUsers>(model);
        }

        /// <summary>
        /// Test GetGuestPortals
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGuestPortalsAsyncTest()
        {
            var response = await _instance.GetGuestPortalsAsync();
            var model = response.Ok();
            Assert.IsType<List<GuestPortalDto>>(model);
        }
    }
}
