/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using mailslurp.Client;
using mailslurp.Api;
using mailslurp.Extensions;
using Xunit;

namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new ApiKeyToken("<token>", ClientUtils.ApiKeyHeader.X_api_key, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new ApiKeyToken("<token>", ClientUtils.ApiKeyHeader.X_api_key, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new ApiKeyToken("<token>", ClientUtils.ApiKeyHeader.X_api_key, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new ApiKeyToken("<token>", ClientUtils.ApiKeyHeader.X_api_key, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var aIControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAIControllerApi>();
            Assert.True(aIControllerApi.HttpClient.BaseAddress != null);

            var aliasControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAliasControllerApi>();
            Assert.True(aliasControllerApi.HttpClient.BaseAddress != null);

            var attachmentControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAttachmentControllerApi>();
            Assert.True(attachmentControllerApi.HttpClient.BaseAddress != null);

            var bounceControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IBounceControllerApi>();
            Assert.True(bounceControllerApi.HttpClient.BaseAddress != null);

            var bulkActionsControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IBulkActionsControllerApi>();
            Assert.True(bulkActionsControllerApi.HttpClient.BaseAddress != null);

            var commonActionsControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICommonActionsControllerApi>();
            Assert.True(commonActionsControllerApi.HttpClient.BaseAddress != null);

            var connectorControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IConnectorControllerApi>();
            Assert.True(connectorControllerApi.HttpClient.BaseAddress != null);

            var consentControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IConsentControllerApi>();
            Assert.True(consentControllerApi.HttpClient.BaseAddress != null);

            var contactControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IContactControllerApi>();
            Assert.True(contactControllerApi.HttpClient.BaseAddress != null);

            var domainControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDomainControllerApi>();
            Assert.True(domainControllerApi.HttpClient.BaseAddress != null);

            var emailControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEmailControllerApi>();
            Assert.True(emailControllerApi.HttpClient.BaseAddress != null);

            var emailVerificationControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEmailVerificationControllerApi>();
            Assert.True(emailVerificationControllerApi.HttpClient.BaseAddress != null);

            var expiredControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IExpiredControllerApi>();
            Assert.True(expiredControllerApi.HttpClient.BaseAddress != null);

            var exportControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IExportControllerApi>();
            Assert.True(exportControllerApi.HttpClient.BaseAddress != null);

            var formControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IFormControllerApi>();
            Assert.True(formControllerApi.HttpClient.BaseAddress != null);

            var groupControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IGroupControllerApi>();
            Assert.True(groupControllerApi.HttpClient.BaseAddress != null);

            var guestPortalControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IGuestPortalControllerApi>();
            Assert.True(guestPortalControllerApi.HttpClient.BaseAddress != null);

            var imapControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IImapControllerApi>();
            Assert.True(imapControllerApi.HttpClient.BaseAddress != null);

            var inboxControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IInboxControllerApi>();
            Assert.True(inboxControllerApi.HttpClient.BaseAddress != null);

            var inboxForwarderControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IInboxForwarderControllerApi>();
            Assert.True(inboxForwarderControllerApi.HttpClient.BaseAddress != null);

            var inboxReplierControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IInboxReplierControllerApi>();
            Assert.True(inboxReplierControllerApi.HttpClient.BaseAddress != null);

            var inboxRulesetControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IInboxRulesetControllerApi>();
            Assert.True(inboxRulesetControllerApi.HttpClient.BaseAddress != null);

            var mailServerControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMailServerControllerApi>();
            Assert.True(mailServerControllerApi.HttpClient.BaseAddress != null);

            var missedEmailControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMissedEmailControllerApi>();
            Assert.True(missedEmailControllerApi.HttpClient.BaseAddress != null);

            var oAuthConnectionApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IOAuthConnectionApi>();
            Assert.True(oAuthConnectionApi.HttpClient.BaseAddress != null);

            var phoneControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPhoneControllerApi>();
            Assert.True(phoneControllerApi.HttpClient.BaseAddress != null);

            var sentEmailsControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISentEmailsControllerApi>();
            Assert.True(sentEmailsControllerApi.HttpClient.BaseAddress != null);

            var smsControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISmsControllerApi>();
            Assert.True(smsControllerApi.HttpClient.BaseAddress != null);

            var templateControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ITemplateControllerApi>();
            Assert.True(templateControllerApi.HttpClient.BaseAddress != null);

            var toolsControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IToolsControllerApi>();
            Assert.True(toolsControllerApi.HttpClient.BaseAddress != null);

            var trackingControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ITrackingControllerApi>();
            Assert.True(trackingControllerApi.HttpClient.BaseAddress != null);

            var userControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUserControllerApi>();
            Assert.True(userControllerApi.HttpClient.BaseAddress != null);

            var waitForControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IWaitForControllerApi>();
            Assert.True(waitForControllerApi.HttpClient.BaseAddress != null);

            var webhookControllerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IWebhookControllerApi>();
            Assert.True(webhookControllerApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var aIControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAIControllerApi>();
            Assert.True(aIControllerApi.HttpClient.BaseAddress != null);

            var aliasControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAliasControllerApi>();
            Assert.True(aliasControllerApi.HttpClient.BaseAddress != null);

            var attachmentControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAttachmentControllerApi>();
            Assert.True(attachmentControllerApi.HttpClient.BaseAddress != null);

            var bounceControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IBounceControllerApi>();
            Assert.True(bounceControllerApi.HttpClient.BaseAddress != null);

            var bulkActionsControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IBulkActionsControllerApi>();
            Assert.True(bulkActionsControllerApi.HttpClient.BaseAddress != null);

            var commonActionsControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICommonActionsControllerApi>();
            Assert.True(commonActionsControllerApi.HttpClient.BaseAddress != null);

            var connectorControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IConnectorControllerApi>();
            Assert.True(connectorControllerApi.HttpClient.BaseAddress != null);

            var consentControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IConsentControllerApi>();
            Assert.True(consentControllerApi.HttpClient.BaseAddress != null);

            var contactControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IContactControllerApi>();
            Assert.True(contactControllerApi.HttpClient.BaseAddress != null);

            var domainControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDomainControllerApi>();
            Assert.True(domainControllerApi.HttpClient.BaseAddress != null);

            var emailControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEmailControllerApi>();
            Assert.True(emailControllerApi.HttpClient.BaseAddress != null);

            var emailVerificationControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEmailVerificationControllerApi>();
            Assert.True(emailVerificationControllerApi.HttpClient.BaseAddress != null);

            var expiredControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IExpiredControllerApi>();
            Assert.True(expiredControllerApi.HttpClient.BaseAddress != null);

            var exportControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IExportControllerApi>();
            Assert.True(exportControllerApi.HttpClient.BaseAddress != null);

            var formControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IFormControllerApi>();
            Assert.True(formControllerApi.HttpClient.BaseAddress != null);

            var groupControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IGroupControllerApi>();
            Assert.True(groupControllerApi.HttpClient.BaseAddress != null);

            var guestPortalControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IGuestPortalControllerApi>();
            Assert.True(guestPortalControllerApi.HttpClient.BaseAddress != null);

            var imapControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IImapControllerApi>();
            Assert.True(imapControllerApi.HttpClient.BaseAddress != null);

            var inboxControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IInboxControllerApi>();
            Assert.True(inboxControllerApi.HttpClient.BaseAddress != null);

            var inboxForwarderControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IInboxForwarderControllerApi>();
            Assert.True(inboxForwarderControllerApi.HttpClient.BaseAddress != null);

            var inboxReplierControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IInboxReplierControllerApi>();
            Assert.True(inboxReplierControllerApi.HttpClient.BaseAddress != null);

            var inboxRulesetControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IInboxRulesetControllerApi>();
            Assert.True(inboxRulesetControllerApi.HttpClient.BaseAddress != null);

            var mailServerControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMailServerControllerApi>();
            Assert.True(mailServerControllerApi.HttpClient.BaseAddress != null);

            var missedEmailControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMissedEmailControllerApi>();
            Assert.True(missedEmailControllerApi.HttpClient.BaseAddress != null);

            var oAuthConnectionApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IOAuthConnectionApi>();
            Assert.True(oAuthConnectionApi.HttpClient.BaseAddress != null);

            var phoneControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPhoneControllerApi>();
            Assert.True(phoneControllerApi.HttpClient.BaseAddress != null);

            var sentEmailsControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISentEmailsControllerApi>();
            Assert.True(sentEmailsControllerApi.HttpClient.BaseAddress != null);

            var smsControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISmsControllerApi>();
            Assert.True(smsControllerApi.HttpClient.BaseAddress != null);

            var templateControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ITemplateControllerApi>();
            Assert.True(templateControllerApi.HttpClient.BaseAddress != null);

            var toolsControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IToolsControllerApi>();
            Assert.True(toolsControllerApi.HttpClient.BaseAddress != null);

            var trackingControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ITrackingControllerApi>();
            Assert.True(trackingControllerApi.HttpClient.BaseAddress != null);

            var userControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUserControllerApi>();
            Assert.True(userControllerApi.HttpClient.BaseAddress != null);

            var waitForControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IWaitForControllerApi>();
            Assert.True(waitForControllerApi.HttpClient.BaseAddress != null);

            var webhookControllerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IWebhookControllerApi>();
            Assert.True(webhookControllerApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var aIControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAIControllerApi>();
            Assert.True(aIControllerApi.HttpClient.BaseAddress != null);
            
            var aliasControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAliasControllerApi>();
            Assert.True(aliasControllerApi.HttpClient.BaseAddress != null);
            
            var attachmentControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAttachmentControllerApi>();
            Assert.True(attachmentControllerApi.HttpClient.BaseAddress != null);
            
            var bounceControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IBounceControllerApi>();
            Assert.True(bounceControllerApi.HttpClient.BaseAddress != null);
            
            var bulkActionsControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IBulkActionsControllerApi>();
            Assert.True(bulkActionsControllerApi.HttpClient.BaseAddress != null);
            
            var commonActionsControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICommonActionsControllerApi>();
            Assert.True(commonActionsControllerApi.HttpClient.BaseAddress != null);
            
            var connectorControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IConnectorControllerApi>();
            Assert.True(connectorControllerApi.HttpClient.BaseAddress != null);
            
            var consentControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IConsentControllerApi>();
            Assert.True(consentControllerApi.HttpClient.BaseAddress != null);
            
            var contactControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IContactControllerApi>();
            Assert.True(contactControllerApi.HttpClient.BaseAddress != null);
            
            var domainControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDomainControllerApi>();
            Assert.True(domainControllerApi.HttpClient.BaseAddress != null);
            
            var emailControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEmailControllerApi>();
            Assert.True(emailControllerApi.HttpClient.BaseAddress != null);
            
            var emailVerificationControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEmailVerificationControllerApi>();
            Assert.True(emailVerificationControllerApi.HttpClient.BaseAddress != null);
            
            var expiredControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IExpiredControllerApi>();
            Assert.True(expiredControllerApi.HttpClient.BaseAddress != null);
            
            var exportControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IExportControllerApi>();
            Assert.True(exportControllerApi.HttpClient.BaseAddress != null);
            
            var formControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IFormControllerApi>();
            Assert.True(formControllerApi.HttpClient.BaseAddress != null);
            
            var groupControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IGroupControllerApi>();
            Assert.True(groupControllerApi.HttpClient.BaseAddress != null);
            
            var guestPortalControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IGuestPortalControllerApi>();
            Assert.True(guestPortalControllerApi.HttpClient.BaseAddress != null);
            
            var imapControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IImapControllerApi>();
            Assert.True(imapControllerApi.HttpClient.BaseAddress != null);
            
            var inboxControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IInboxControllerApi>();
            Assert.True(inboxControllerApi.HttpClient.BaseAddress != null);
            
            var inboxForwarderControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IInboxForwarderControllerApi>();
            Assert.True(inboxForwarderControllerApi.HttpClient.BaseAddress != null);
            
            var inboxReplierControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IInboxReplierControllerApi>();
            Assert.True(inboxReplierControllerApi.HttpClient.BaseAddress != null);
            
            var inboxRulesetControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IInboxRulesetControllerApi>();
            Assert.True(inboxRulesetControllerApi.HttpClient.BaseAddress != null);
            
            var mailServerControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMailServerControllerApi>();
            Assert.True(mailServerControllerApi.HttpClient.BaseAddress != null);
            
            var missedEmailControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMissedEmailControllerApi>();
            Assert.True(missedEmailControllerApi.HttpClient.BaseAddress != null);
            
            var oAuthConnectionApi = _hostUsingAddWithAClient.Services.GetRequiredService<IOAuthConnectionApi>();
            Assert.True(oAuthConnectionApi.HttpClient.BaseAddress != null);
            
            var phoneControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPhoneControllerApi>();
            Assert.True(phoneControllerApi.HttpClient.BaseAddress != null);
            
            var sentEmailsControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISentEmailsControllerApi>();
            Assert.True(sentEmailsControllerApi.HttpClient.BaseAddress != null);
            
            var smsControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISmsControllerApi>();
            Assert.True(smsControllerApi.HttpClient.BaseAddress != null);
            
            var templateControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<ITemplateControllerApi>();
            Assert.True(templateControllerApi.HttpClient.BaseAddress != null);
            
            var toolsControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IToolsControllerApi>();
            Assert.True(toolsControllerApi.HttpClient.BaseAddress != null);
            
            var trackingControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<ITrackingControllerApi>();
            Assert.True(trackingControllerApi.HttpClient.BaseAddress != null);
            
            var userControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUserControllerApi>();
            Assert.True(userControllerApi.HttpClient.BaseAddress != null);
            
            var waitForControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IWaitForControllerApi>();
            Assert.True(waitForControllerApi.HttpClient.BaseAddress != null);
            
            var webhookControllerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IWebhookControllerApi>();
            Assert.True(webhookControllerApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var aIControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAIControllerApi>();
            Assert.True(aIControllerApi.HttpClient.BaseAddress != null);

            var aliasControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAliasControllerApi>();
            Assert.True(aliasControllerApi.HttpClient.BaseAddress != null);

            var attachmentControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAttachmentControllerApi>();
            Assert.True(attachmentControllerApi.HttpClient.BaseAddress != null);

            var bounceControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IBounceControllerApi>();
            Assert.True(bounceControllerApi.HttpClient.BaseAddress != null);

            var bulkActionsControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IBulkActionsControllerApi>();
            Assert.True(bulkActionsControllerApi.HttpClient.BaseAddress != null);

            var commonActionsControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICommonActionsControllerApi>();
            Assert.True(commonActionsControllerApi.HttpClient.BaseAddress != null);

            var connectorControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IConnectorControllerApi>();
            Assert.True(connectorControllerApi.HttpClient.BaseAddress != null);

            var consentControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IConsentControllerApi>();
            Assert.True(consentControllerApi.HttpClient.BaseAddress != null);

            var contactControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IContactControllerApi>();
            Assert.True(contactControllerApi.HttpClient.BaseAddress != null);

            var domainControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDomainControllerApi>();
            Assert.True(domainControllerApi.HttpClient.BaseAddress != null);

            var emailControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEmailControllerApi>();
            Assert.True(emailControllerApi.HttpClient.BaseAddress != null);

            var emailVerificationControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEmailVerificationControllerApi>();
            Assert.True(emailVerificationControllerApi.HttpClient.BaseAddress != null);

            var expiredControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IExpiredControllerApi>();
            Assert.True(expiredControllerApi.HttpClient.BaseAddress != null);

            var exportControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IExportControllerApi>();
            Assert.True(exportControllerApi.HttpClient.BaseAddress != null);

            var formControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IFormControllerApi>();
            Assert.True(formControllerApi.HttpClient.BaseAddress != null);

            var groupControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IGroupControllerApi>();
            Assert.True(groupControllerApi.HttpClient.BaseAddress != null);

            var guestPortalControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IGuestPortalControllerApi>();
            Assert.True(guestPortalControllerApi.HttpClient.BaseAddress != null);

            var imapControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IImapControllerApi>();
            Assert.True(imapControllerApi.HttpClient.BaseAddress != null);

            var inboxControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IInboxControllerApi>();
            Assert.True(inboxControllerApi.HttpClient.BaseAddress != null);

            var inboxForwarderControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IInboxForwarderControllerApi>();
            Assert.True(inboxForwarderControllerApi.HttpClient.BaseAddress != null);

            var inboxReplierControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IInboxReplierControllerApi>();
            Assert.True(inboxReplierControllerApi.HttpClient.BaseAddress != null);

            var inboxRulesetControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IInboxRulesetControllerApi>();
            Assert.True(inboxRulesetControllerApi.HttpClient.BaseAddress != null);

            var mailServerControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMailServerControllerApi>();
            Assert.True(mailServerControllerApi.HttpClient.BaseAddress != null);

            var missedEmailControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMissedEmailControllerApi>();
            Assert.True(missedEmailControllerApi.HttpClient.BaseAddress != null);

            var oAuthConnectionApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IOAuthConnectionApi>();
            Assert.True(oAuthConnectionApi.HttpClient.BaseAddress != null);

            var phoneControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPhoneControllerApi>();
            Assert.True(phoneControllerApi.HttpClient.BaseAddress != null);

            var sentEmailsControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISentEmailsControllerApi>();
            Assert.True(sentEmailsControllerApi.HttpClient.BaseAddress != null);

            var smsControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISmsControllerApi>();
            Assert.True(smsControllerApi.HttpClient.BaseAddress != null);

            var templateControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ITemplateControllerApi>();
            Assert.True(templateControllerApi.HttpClient.BaseAddress != null);

            var toolsControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IToolsControllerApi>();
            Assert.True(toolsControllerApi.HttpClient.BaseAddress != null);

            var trackingControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ITrackingControllerApi>();
            Assert.True(trackingControllerApi.HttpClient.BaseAddress != null);

            var userControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUserControllerApi>();
            Assert.True(userControllerApi.HttpClient.BaseAddress != null);

            var waitForControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IWaitForControllerApi>();
            Assert.True(waitForControllerApi.HttpClient.BaseAddress != null);

            var webhookControllerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IWebhookControllerApi>();
            Assert.True(webhookControllerApi.HttpClient.BaseAddress != null);
        }
    }
}
