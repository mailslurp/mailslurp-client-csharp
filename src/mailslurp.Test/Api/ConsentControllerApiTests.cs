/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using mailslurp.Client;
using mailslurp.Api;
// uncomment below to import models
//using mailslurp.Model;

namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing ConsentControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ConsentControllerApiTests : IDisposable
    {
        private ConsentControllerApi instance;

        public ConsentControllerApiTests()
        {
            instance = new ConsentControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ConsentControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ConsentControllerApi
            //Assert.IsType<ConsentControllerApi>(instance);
        }

        /// <summary>
        /// Test CheckSendingConsentForEmailAddress
        /// </summary>
        [Fact]
        public void CheckSendingConsentForEmailAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emailAddress = null;
            //var response = instance.CheckSendingConsentForEmailAddress(emailAddress);
            //Assert.IsType<OptInSendingConsentDto>(response);
        }

        /// <summary>
        /// Test GetOptInIdentities
        /// </summary>
        [Fact]
        public void GetOptInIdentitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //var response = instance.GetOptInIdentities(page, size, sort);
            //Assert.IsType<PageOptInIdentityProjection>(response);
        }

        /// <summary>
        /// Test RevokeOptInConsentForEmailAddress
        /// </summary>
        [Fact]
        public void RevokeOptInConsentForEmailAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emailAddress = null;
            //var response = instance.RevokeOptInConsentForEmailAddress(emailAddress);
            //Assert.IsType<OptInSendingConsentDto>(response);
        }

        /// <summary>
        /// Test SendOptInConsentForEmailAddress
        /// </summary>
        [Fact]
        public void SendOptInConsentForEmailAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OptInConsentOptions optInConsentOptions = null;
            //var response = instance.SendOptInConsentForEmailAddress(optInConsentOptions);
            //Assert.IsType<OptInConsentSendResult>(response);
        }
    }
}
