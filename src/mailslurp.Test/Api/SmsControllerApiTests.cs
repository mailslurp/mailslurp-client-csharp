/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using mailslurp.Client;
using mailslurp.Api;
// uncomment below to import models
//using mailslurp.Model;

namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing SmsControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SmsControllerApiTests : IDisposable
    {
        private SmsControllerApi instance;

        public SmsControllerApiTests()
        {
            instance = new SmsControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SmsControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SmsControllerApi
            //Assert.IsType<SmsControllerApi>(instance);
        }

        /// <summary>
        /// Test DeleteSentSmsMessage
        /// </summary>
        [Fact]
        public void DeleteSentSmsMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid sentSmsId = null;
            //instance.DeleteSentSmsMessage(sentSmsId);
        }

        /// <summary>
        /// Test DeleteSentSmsMessages
        /// </summary>
        [Fact]
        public void DeleteSentSmsMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? phoneNumberId = null;
            //instance.DeleteSentSmsMessages(phoneNumberId);
        }

        /// <summary>
        /// Test DeleteSmsMessage
        /// </summary>
        [Fact]
        public void DeleteSmsMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid smsId = null;
            //instance.DeleteSmsMessage(smsId);
        }

        /// <summary>
        /// Test DeleteSmsMessages
        /// </summary>
        [Fact]
        public void DeleteSmsMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? phoneNumberId = null;
            //instance.DeleteSmsMessages(phoneNumberId);
        }

        /// <summary>
        /// Test GetAllSmsMessages
        /// </summary>
        [Fact]
        public void GetAllSmsMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? phoneNumber = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //string search = null;
            //bool? favourite = null;
            //var response = instance.GetAllSmsMessages(phoneNumber, page, size, sort, since, before, search, favourite);
            //Assert.IsType<PageSmsProjection>(response);
        }

        /// <summary>
        /// Test GetReplyForSmsMessage
        /// </summary>
        [Fact]
        public void GetReplyForSmsMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid smsId = null;
            //var response = instance.GetReplyForSmsMessage(smsId);
            //Assert.IsType<ReplyForSms>(response);
        }

        /// <summary>
        /// Test GetSentSmsCount
        /// </summary>
        [Fact]
        public void GetSentSmsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSentSmsCount();
            //Assert.IsType<CountDto>(response);
        }

        /// <summary>
        /// Test GetSentSmsMessage
        /// </summary>
        [Fact]
        public void GetSentSmsMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid sentSmsId = null;
            //var response = instance.GetSentSmsMessage(sentSmsId);
            //Assert.IsType<SentSmsDto>(response);
        }

        /// <summary>
        /// Test GetSentSmsMessagesPaginated
        /// </summary>
        [Fact]
        public void GetSentSmsMessagesPaginatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? phoneNumber = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //string search = null;
            //var response = instance.GetSentSmsMessagesPaginated(phoneNumber, page, size, sort, since, before, search);
            //Assert.IsType<PageSentSmsProjection>(response);
        }

        /// <summary>
        /// Test GetSmsCount
        /// </summary>
        [Fact]
        public void GetSmsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSmsCount();
            //Assert.IsType<CountDto>(response);
        }

        /// <summary>
        /// Test GetSmsMessage
        /// </summary>
        [Fact]
        public void GetSmsMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid smsId = null;
            //var response = instance.GetSmsMessage(smsId);
            //Assert.IsType<SmsDto>(response);
        }

        /// <summary>
        /// Test GetUnreadSmsCount
        /// </summary>
        [Fact]
        public void GetUnreadSmsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUnreadSmsCount();
            //Assert.IsType<UnreadCount>(response);
        }

        /// <summary>
        /// Test ReplyToSmsMessage
        /// </summary>
        [Fact]
        public void ReplyToSmsMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid smsId = null;
            //SmsReplyOptions smsReplyOptions = null;
            //var response = instance.ReplyToSmsMessage(smsId, smsReplyOptions);
            //Assert.IsType<SentSmsDto>(response);
        }

        /// <summary>
        /// Test SendSms
        /// </summary>
        [Fact]
        public void SendSmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SmsSendOptions smsSendOptions = null;
            //string fromPhoneNumber = null;
            //Guid? fromPhoneId = null;
            //var response = instance.SendSms(smsSendOptions, fromPhoneNumber, fromPhoneId);
            //Assert.IsType<SentSmsDto>(response);
        }

        /// <summary>
        /// Test SetSmsFavourited
        /// </summary>
        [Fact]
        public void SetSmsFavouritedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid smsId = null;
            //bool favourited = null;
            //var response = instance.SetSmsFavourited(smsId, favourited);
            //Assert.IsType<SmsDto>(response);
        }
    }
}
