/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using mailslurp.Client;
using mailslurp.Api;
// uncomment below to import models
//using mailslurp.Model;

namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing SmsControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SmsControllerApiTests : IDisposable
    {
        private SmsControllerApi instance;

        public SmsControllerApiTests()
        {
            instance = new SmsControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SmsControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SmsControllerApi
            //Assert.IsType<SmsControllerApi>(instance);
        }

        /// <summary>
        /// Test DeleteSmsMessage
        /// </summary>
        [Fact]
        public void DeleteSmsMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid smsId = null;
            //instance.DeleteSmsMessage(smsId);
        }

        /// <summary>
        /// Test DeleteSmsMessages
        /// </summary>
        [Fact]
        public void DeleteSmsMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? phoneNumberId = null;
            //instance.DeleteSmsMessages(phoneNumberId);
        }

        /// <summary>
        /// Test GetReplyForSmsMessage
        /// </summary>
        [Fact]
        public void GetReplyForSmsMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid smsId = null;
            //var response = instance.GetReplyForSmsMessage(smsId);
            //Assert.IsType<ReplyForSms>(response);
        }

        /// <summary>
        /// Test GetSmsCount
        /// </summary>
        [Fact]
        public void GetSmsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSmsCount();
            //Assert.IsType<CountDto>(response);
        }

        /// <summary>
        /// Test GetSmsMessage
        /// </summary>
        [Fact]
        public void GetSmsMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid smsId = null;
            //var response = instance.GetSmsMessage(smsId);
            //Assert.IsType<SmsDto>(response);
        }

        /// <summary>
        /// Test GetSmsMessagesPaginated
        /// </summary>
        [Fact]
        public void GetSmsMessagesPaginatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? phoneNumber = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //bool? unreadOnly = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //var response = instance.GetSmsMessagesPaginated(phoneNumber, page, size, sort, unreadOnly, since, before);
            //Assert.IsType<PageSmsProjection>(response);
        }

        /// <summary>
        /// Test GetUnreadSmsCount
        /// </summary>
        [Fact]
        public void GetUnreadSmsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUnreadSmsCount();
            //Assert.IsType<UnreadCount>(response);
        }

        /// <summary>
        /// Test ReplyToSmsMessage
        /// </summary>
        [Fact]
        public void ReplyToSmsMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid smsId = null;
            //SmsReplyOptions smsReplyOptions = null;
            //var response = instance.ReplyToSmsMessage(smsId, smsReplyOptions);
            //Assert.IsType<SentSmsDto>(response);
        }
    }
}
