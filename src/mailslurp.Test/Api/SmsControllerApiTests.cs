/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing SmsControllerApi
    /// </summary>
    public sealed class SmsControllerApiTests : ApiTestsBase
    {
        private readonly ISmsControllerApi _instance;

        public SmsControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ISmsControllerApi>();
        }

        /// <summary>
        /// Test DeleteSentSmsMessage
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteSentSmsMessageAsyncTest()
        {
            Guid sentSmsId = default;
            await _instance.DeleteSentSmsMessageAsync(sentSmsId);
        }

        /// <summary>
        /// Test DeleteSentSmsMessages
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteSentSmsMessagesAsyncTest()
        {
            Client.Option<Guid> phoneNumberId = default;
            await _instance.DeleteSentSmsMessagesAsync(phoneNumberId);
        }

        /// <summary>
        /// Test DeleteSmsMessage
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteSmsMessageAsyncTest()
        {
            Guid smsId = default;
            await _instance.DeleteSmsMessageAsync(smsId);
        }

        /// <summary>
        /// Test DeleteSmsMessages
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteSmsMessagesAsyncTest()
        {
            Client.Option<Guid> phoneNumberId = default;
            await _instance.DeleteSmsMessagesAsync(phoneNumberId);
        }

        /// <summary>
        /// Test GetAllSmsMessages
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllSmsMessagesAsyncTest()
        {
            Client.Option<Guid> phoneNumber = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> search = default;
            Client.Option<bool> favourite = default;
            var response = await _instance.GetAllSmsMessagesAsync(phoneNumber, page, size, sort, since, before, search, favourite);
            var model = response.Ok();
            Assert.IsType<PageSmsProjection>(model);
        }

        /// <summary>
        /// Test GetReplyForSmsMessage
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReplyForSmsMessageAsyncTest()
        {
            Guid smsId = default;
            var response = await _instance.GetReplyForSmsMessageAsync(smsId);
            var model = response.Ok();
            Assert.IsType<ReplyForSms>(model);
        }

        /// <summary>
        /// Test GetSentSmsCount
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSentSmsCountAsyncTest()
        {
            var response = await _instance.GetSentSmsCountAsync();
            var model = response.Ok();
            Assert.IsType<CountDto>(model);
        }

        /// <summary>
        /// Test GetSentSmsMessage
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSentSmsMessageAsyncTest()
        {
            Guid sentSmsId = default;
            var response = await _instance.GetSentSmsMessageAsync(sentSmsId);
            var model = response.Ok();
            Assert.IsType<SentSmsDto>(model);
        }

        /// <summary>
        /// Test GetSentSmsMessagesPaginated
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSentSmsMessagesPaginatedAsyncTest()
        {
            Client.Option<Guid> phoneNumber = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> search = default;
            var response = await _instance.GetSentSmsMessagesPaginatedAsync(phoneNumber, page, size, sort, since, before, search);
            var model = response.Ok();
            Assert.IsType<PageSentSmsProjection>(model);
        }

        /// <summary>
        /// Test GetSmsCount
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSmsCountAsyncTest()
        {
            var response = await _instance.GetSmsCountAsync();
            var model = response.Ok();
            Assert.IsType<CountDto>(model);
        }

        /// <summary>
        /// Test GetSmsMessage
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSmsMessageAsyncTest()
        {
            Guid smsId = default;
            var response = await _instance.GetSmsMessageAsync(smsId);
            var model = response.Ok();
            Assert.IsType<SmsDto>(model);
        }

        /// <summary>
        /// Test GetUnreadSmsCount
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUnreadSmsCountAsyncTest()
        {
            var response = await _instance.GetUnreadSmsCountAsync();
            var model = response.Ok();
            Assert.IsType<UnreadCount>(model);
        }

        /// <summary>
        /// Test ReplyToSmsMessage
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ReplyToSmsMessageAsyncTest()
        {
            Guid smsId = default;
            SmsReplyOptions smsReplyOptions = default;
            var response = await _instance.ReplyToSmsMessageAsync(smsId, smsReplyOptions);
            var model = response.Ok();
            Assert.IsType<SentSmsDto>(model);
        }

        /// <summary>
        /// Test SendSms
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendSmsAsyncTest()
        {
            SmsSendOptions smsSendOptions = default;
            Client.Option<string> fromPhoneNumber = default;
            Client.Option<Guid> fromPhoneId = default;
            var response = await _instance.SendSmsAsync(smsSendOptions, fromPhoneNumber, fromPhoneId);
            var model = response.Ok();
            Assert.IsType<SentSmsDto>(model);
        }

        /// <summary>
        /// Test SetSmsFavourited
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetSmsFavouritedAsyncTest()
        {
            Guid smsId = default;
            bool favourited = default;
            var response = await _instance.SetSmsFavouritedAsync(smsId, favourited);
            var model = response.NoContent();
            Assert.IsType<SmsDto>(model);
        }
    }
}
