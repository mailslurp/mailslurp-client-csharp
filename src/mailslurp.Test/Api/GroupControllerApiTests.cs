/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing GroupControllerApi
    /// </summary>
    public sealed class GroupControllerApiTests : ApiTestsBase
    {
        private readonly IGroupControllerApi _instance;

        public GroupControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IGroupControllerApi>();
        }

        /// <summary>
        /// Test AddContactsToGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddContactsToGroupAsyncTest()
        {
            Guid groupId = default;
            UpdateGroupContacts updateGroupContacts = default;
            var response = await _instance.AddContactsToGroupAsync(groupId, updateGroupContacts);
            var model = response.Ok();
            Assert.IsType<GroupContactsDto>(model);
        }

        /// <summary>
        /// Test CreateGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateGroupAsyncTest()
        {
            CreateGroupOptions createGroupOptions = default;
            var response = await _instance.CreateGroupAsync(createGroupOptions);
            var model = response.Created();
            Assert.IsType<GroupDto>(model);
        }

        /// <summary>
        /// Test DeleteGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteGroupAsyncTest()
        {
            Guid groupId = default;
            await _instance.DeleteGroupAsync(groupId);
        }

        /// <summary>
        /// Test GetAllGroups
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllGroupsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetAllGroupsAsync(page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageGroupProjection>(model);
        }

        /// <summary>
        /// Test GetGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGroupAsyncTest()
        {
            Guid groupId = default;
            var response = await _instance.GetGroupAsync(groupId);
            var model = response.Ok();
            Assert.IsType<GroupDto>(model);
        }

        /// <summary>
        /// Test GetGroupWithContacts
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGroupWithContactsAsyncTest()
        {
            Guid groupId = default;
            var response = await _instance.GetGroupWithContactsAsync(groupId);
            var model = response.Ok();
            Assert.IsType<GroupContactsDto>(model);
        }

        /// <summary>
        /// Test GetGroupWithContactsPaginated
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGroupWithContactsPaginatedAsyncTest()
        {
            Guid groupId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetGroupWithContactsPaginatedAsync(groupId, page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageContactProjection>(model);
        }

        /// <summary>
        /// Test GetGroups
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGroupsAsyncTest()
        {
            var response = await _instance.GetGroupsAsync();
            var model = response.Ok();
            Assert.IsType<List<GroupProjection>>(model);
        }

        /// <summary>
        /// Test RemoveContactsFromGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RemoveContactsFromGroupAsyncTest()
        {
            Guid groupId = default;
            UpdateGroupContacts updateGroupContacts = default;
            var response = await _instance.RemoveContactsFromGroupAsync(groupId, updateGroupContacts);
            var model = response.Ok();
            Assert.IsType<GroupContactsDto>(model);
        }
    }
}
