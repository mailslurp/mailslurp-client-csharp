/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 334ac21dc2320d9d7146003fe93651c8ab30850d
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using mailslurp.Client;
using mailslurp.Api;

namespace mailslurp.Test
{
    /// <summary>
    ///  Class for testing FormControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FormControllerApiTests : IDisposable
    {
        private FormControllerApi instance;

        public FormControllerApiTests()
        {
            instance = new FormControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of FormControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FormControllerApi
            //Assert.IsType(typeof(FormControllerApi), instance, "instance is a FormControllerApi");
        }

        
        /// <summary>
        /// Test SubmitForm
        /// </summary>
        [Fact]
        public void SubmitFormTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emailAddress = null;
            //string redirectTo = null;
            //string spamCheck = null;
            //string subject = null;
            //string successMessage = null;
            //string to = null;
            //string toAlias = null;
            //string otherParameters = null;
            //var response = instance.SubmitForm(emailAddress, redirectTo, spamCheck, subject, successMessage, to, toAlias, otherParameters);
            //Assert.IsType<string> (response, "response is string");
        }
        
    }

}
