/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using mailslurp.Client;
using mailslurp.Api;
// uncomment below to import models
//using mailslurp.Model;

namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing AIControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AIControllerApiTests : IDisposable
    {
        private AIControllerApi instance;

        public AIControllerApiTests()
        {
            instance = new AIControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AIControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AIControllerApi
            //Assert.IsType<AIControllerApi>(instance);
        }

        /// <summary>
        /// Test CreateTransformer
        /// </summary>
        [Fact]
        public void CreateTransformerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AITranformCreateOptions options = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //var response = instance.CreateTransformer(options, page, size, sort);
            //Assert.IsType<PageAITransformProjection>(response);
        }

        /// <summary>
        /// Test CreateTransformer1
        /// </summary>
        [Fact]
        public void CreateTransformer1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AITranformCreateOptions aITranformCreateOptions = null;
            //var response = instance.CreateTransformer1(aITranformCreateOptions);
            //Assert.IsType<AITransformDto>(response);
        }

        /// <summary>
        /// Test CreateTransformerMappings
        /// </summary>
        [Fact]
        public void CreateTransformerMappingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateAITransformerMappingOptions createAITransformerMappingOptions = null;
            //var response = instance.CreateTransformerMappings(createAITransformerMappingOptions);
            //Assert.IsType<AITransformMappingDto>(response);
        }

        /// <summary>
        /// Test DeleteTransformer
        /// </summary>
        [Fact]
        public void DeleteTransformerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DeleteTransformer(id);
        }

        /// <summary>
        /// Test DeleteTransformerMapping
        /// </summary>
        [Fact]
        public void DeleteTransformerMappingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DeleteTransformerMapping(id);
        }

        /// <summary>
        /// Test DeleteTransformers
        /// </summary>
        [Fact]
        public void DeleteTransformersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteTransformers();
        }

        /// <summary>
        /// Test GenerateStructuredContentFromAttachment
        /// </summary>
        [Fact]
        public void GenerateStructuredContentFromAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions = null;
            //var response = instance.GenerateStructuredContentFromAttachment(generateStructuredContentAttachmentOptions);
            //Assert.IsType<StructuredContentResultDto>(response);
        }

        /// <summary>
        /// Test GenerateStructuredContentFromEmail
        /// </summary>
        [Fact]
        public void GenerateStructuredContentFromEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions = null;
            //var response = instance.GenerateStructuredContentFromEmail(generateStructuredContentEmailOptions);
            //Assert.IsType<StructuredContentResultDto>(response);
        }

        /// <summary>
        /// Test GenerateStructuredContentFromSms
        /// </summary>
        [Fact]
        public void GenerateStructuredContentFromSmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions = null;
            //var response = instance.GenerateStructuredContentFromSms(generateStructuredContentSmsOptions);
            //Assert.IsType<StructuredContentResultDto>(response);
        }

        /// <summary>
        /// Test GetTransformer
        /// </summary>
        [Fact]
        public void GetTransformerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetTransformer(id);
            //Assert.IsType<AITransformDto>(response);
        }

        /// <summary>
        /// Test GetTransformerMapping
        /// </summary>
        [Fact]
        public void GetTransformerMappingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetTransformerMapping(id);
            //Assert.IsType<AITransformMappingDto>(response);
        }

        /// <summary>
        /// Test GetTransformerMappings
        /// </summary>
        [Fact]
        public void GetTransformerMappingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? aiTransformId = null;
            //Guid? entityId = null;
            //string entityType = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //var response = instance.GetTransformerMappings(aiTransformId, entityId, entityType, page, size, sort);
            //Assert.IsType<PageAITransformMappingProjection>(response);
        }

        /// <summary>
        /// Test GetTransformerResult
        /// </summary>
        [Fact]
        public void GetTransformerResultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetTransformerResult(id);
            //Assert.IsType<AITransformResultDto>(response);
        }

        /// <summary>
        /// Test GetTransformerResults
        /// </summary>
        [Fact]
        public void GetTransformerResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? aiTransformId = null;
            //Guid? aiTransformMappingId = null;
            //Guid? entityId = null;
            //string entityType = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //var response = instance.GetTransformerResults(aiTransformId, aiTransformMappingId, entityId, entityType, page, size, sort);
            //Assert.IsType<PageAITransformResultProjection>(response);
        }

        /// <summary>
        /// Test ValidateStructuredOutputSchema
        /// </summary>
        [Fact]
        public void ValidateStructuredOutputSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //StructuredOutputSchema structuredOutputSchema = null;
            //var response = instance.ValidateStructuredOutputSchema(structuredOutputSchema);
            //Assert.IsType<StructuredOutputSchemaValidation>(response);
        }
    }
}
