/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing TemplateControllerApi
    /// </summary>
    public sealed class TemplateControllerApiTests : ApiTestsBase
    {
        private readonly ITemplateControllerApi _instance;

        public TemplateControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ITemplateControllerApi>();
        }

        /// <summary>
        /// Test CreateTemplate
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateTemplateAsyncTest()
        {
            CreateTemplateOptions createTemplateOptions = default;
            var response = await _instance.CreateTemplateAsync(createTemplateOptions);
            var model = response.Created();
            Assert.IsType<TemplateDto>(model);
        }

        /// <summary>
        /// Test DeleteTemplate
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteTemplateAsyncTest()
        {
            Guid templateId = default;
            await _instance.DeleteTemplateAsync(templateId);
        }

        /// <summary>
        /// Test GetAllTemplates
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllTemplatesAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetAllTemplatesAsync(page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageTemplateProjection>(model);
        }

        /// <summary>
        /// Test GetTemplate
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTemplateAsyncTest()
        {
            Guid templateId = default;
            var response = await _instance.GetTemplateAsync(templateId);
            var model = response.Ok();
            Assert.IsType<TemplateDto>(model);
        }

        /// <summary>
        /// Test GetTemplatePreviewHtml
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTemplatePreviewHtmlAsyncTest()
        {
            Guid templateId = default;
            var response = await _instance.GetTemplatePreviewHtmlAsync(templateId);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test GetTemplatePreviewJson
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTemplatePreviewJsonAsyncTest()
        {
            Guid templateId = default;
            var response = await _instance.GetTemplatePreviewJsonAsync(templateId);
            var model = response.Ok();
            Assert.IsType<TemplatePreview>(model);
        }

        /// <summary>
        /// Test GetTemplates
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTemplatesAsyncTest()
        {
            var response = await _instance.GetTemplatesAsync();
            var model = response.Ok();
            Assert.IsType<List<TemplateProjection>>(model);
        }

        /// <summary>
        /// Test UpdateTemplate
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateTemplateAsyncTest()
        {
            Guid templateId = default;
            CreateTemplateOptions createTemplateOptions = default;
            var response = await _instance.UpdateTemplateAsync(templateId, createTemplateOptions);
            var model = response.Created();
            Assert.IsType<TemplateDto>(model);
        }
    }
}
