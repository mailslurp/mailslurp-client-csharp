/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using mailslurp.Client;
using mailslurp.Api;
// uncomment below to import models
//using mailslurp.Model;

namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing MFAControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MFAControllerApiTests : IDisposable
    {
        private MFAControllerApi instance;

        public MFAControllerApiTests()
        {
            instance = new MFAControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MFAControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MFAControllerApi
            //Assert.IsType<MFAControllerApi>(instance);
        }

        /// <summary>
        /// Test CreateTotpDeviceForCustom
        /// </summary>
        [Fact]
        public void CreateTotpDeviceForCustomTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions = null;
            //var response = instance.CreateTotpDeviceForCustom(createTotpDeviceOtpAuthUrlOptions);
            //Assert.IsType<TotpDeviceDto>(response);
        }

        /// <summary>
        /// Test CreateTotpDeviceForOtpAuthUrl
        /// </summary>
        [Fact]
        public void CreateTotpDeviceForOtpAuthUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions = null;
            //var response = instance.CreateTotpDeviceForOtpAuthUrl(createTotpDeviceOtpAuthUrlOptions);
            //Assert.IsType<TotpDeviceDto>(response);
        }

        /// <summary>
        /// Test GetTotpDevice
        /// </summary>
        [Fact]
        public void GetTotpDeviceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetTotpDevice(id);
            //Assert.IsType<TotpDeviceDto>(response);
        }

        /// <summary>
        /// Test GetTotpDeviceBy
        /// </summary>
        [Fact]
        public void GetTotpDeviceByTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string issuer = null;
            //string username = null;
            //var response = instance.GetTotpDeviceBy(name, issuer, username);
            //Assert.IsType<TotpDeviceOptionalDto>(response);
        }

        /// <summary>
        /// Test GetTotpDeviceCode
        /// </summary>
        [Fact]
        public void GetTotpDeviceCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //DateTime? at = null;
            //var response = instance.GetTotpDeviceCode(id, at);
            //Assert.IsType<TotpDeviceCodeDto>(response);
        }
    }
}
