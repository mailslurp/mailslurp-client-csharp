/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using mailslurp.Api;
using mailslurp.Model;
using mailslurp.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace mailslurp.Test.Model
{
    /// <summary>
    ///  Class for testing WebhookBouncePayload
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class WebhookBouncePayloadTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for WebhookBouncePayload
        //private WebhookBouncePayload instance;

        public WebhookBouncePayloadTests()
        {
            // TODO uncomment below to create an instance of WebhookBouncePayload
            //instance = new WebhookBouncePayload();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WebhookBouncePayload
        /// </summary>
        [Fact]
        public void WebhookBouncePayloadInstanceTest()
        {
            // TODO uncomment below to test "IsType" WebhookBouncePayload
            //Assert.IsType<WebhookBouncePayload>(instance);
        }


        /// <summary>
        /// Test the property 'MessageId'
        /// </summary>
        [Fact]
        public void MessageIdTest()
        {
            // TODO unit test for the property 'MessageId'
        }
        /// <summary>
        /// Test the property 'WebhookId'
        /// </summary>
        [Fact]
        public void WebhookIdTest()
        {
            // TODO unit test for the property 'WebhookId'
        }
        /// <summary>
        /// Test the property 'EventName'
        /// </summary>
        [Fact]
        public void EventNameTest()
        {
            // TODO unit test for the property 'EventName'
        }
        /// <summary>
        /// Test the property 'WebhookName'
        /// </summary>
        [Fact]
        public void WebhookNameTest()
        {
            // TODO unit test for the property 'WebhookName'
        }
        /// <summary>
        /// Test the property 'BounceId'
        /// </summary>
        [Fact]
        public void BounceIdTest()
        {
            // TODO unit test for the property 'BounceId'
        }
        /// <summary>
        /// Test the property 'SentToRecipients'
        /// </summary>
        [Fact]
        public void SentToRecipientsTest()
        {
            // TODO unit test for the property 'SentToRecipients'
        }
        /// <summary>
        /// Test the property 'Sender'
        /// </summary>
        [Fact]
        public void SenderTest()
        {
            // TODO unit test for the property 'Sender'
        }
        /// <summary>
        /// Test the property 'BounceRecipients'
        /// </summary>
        [Fact]
        public void BounceRecipientsTest()
        {
            // TODO unit test for the property 'BounceRecipients'
        }

    }

}
