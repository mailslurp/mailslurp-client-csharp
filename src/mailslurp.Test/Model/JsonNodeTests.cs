/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: b386ac8a37a5e2f7ec170c77416dbd971223d596
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using mailslurp.Api;
using mailslurp.Model;
using mailslurp.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace mailslurp.Test
{
    /// <summary>
    ///  Class for testing JsonNode
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class JsonNodeTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for JsonNode
        //private JsonNode instance;

        public JsonNodeTests()
        {
            // TODO uncomment below to create an instance of JsonNode
            //instance = new JsonNode();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of JsonNode
        /// </summary>
        [Fact]
        public void JsonNodeInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" JsonNode
            //Assert.IsInstanceOfType<JsonNode> (instance, "variable 'instance' is a JsonNode");
        }


        /// <summary>
        /// Test the property 'Array'
        /// </summary>
        [Fact]
        public void ArrayTest()
        {
            // TODO unit test for the property 'Array'
        }
        /// <summary>
        /// Test the property 'BigDecimal'
        /// </summary>
        [Fact]
        public void BigDecimalTest()
        {
            // TODO unit test for the property 'BigDecimal'
        }
        /// <summary>
        /// Test the property 'BigInteger'
        /// </summary>
        [Fact]
        public void BigIntegerTest()
        {
            // TODO unit test for the property 'BigInteger'
        }
        /// <summary>
        /// Test the property 'Binary'
        /// </summary>
        [Fact]
        public void BinaryTest()
        {
            // TODO unit test for the property 'Binary'
        }
        /// <summary>
        /// Test the property 'Boolean'
        /// </summary>
        [Fact]
        public void BooleanTest()
        {
            // TODO unit test for the property 'Boolean'
        }
        /// <summary>
        /// Test the property 'ContainerNode'
        /// </summary>
        [Fact]
        public void ContainerNodeTest()
        {
            // TODO unit test for the property 'ContainerNode'
        }
        /// <summary>
        /// Test the property 'Double'
        /// </summary>
        [Fact]
        public void DoubleTest()
        {
            // TODO unit test for the property 'Double'
        }
        /// <summary>
        /// Test the property 'Empty'
        /// </summary>
        [Fact]
        public void EmptyTest()
        {
            // TODO unit test for the property 'Empty'
        }
        /// <summary>
        /// Test the property 'Float'
        /// </summary>
        [Fact]
        public void FloatTest()
        {
            // TODO unit test for the property 'Float'
        }
        /// <summary>
        /// Test the property 'FloatingPointNumber'
        /// </summary>
        [Fact]
        public void FloatingPointNumberTest()
        {
            // TODO unit test for the property 'FloatingPointNumber'
        }
        /// <summary>
        /// Test the property 'Int'
        /// </summary>
        [Fact]
        public void IntTest()
        {
            // TODO unit test for the property 'Int'
        }
        /// <summary>
        /// Test the property 'IntegralNumber'
        /// </summary>
        [Fact]
        public void IntegralNumberTest()
        {
            // TODO unit test for the property 'IntegralNumber'
        }
        /// <summary>
        /// Test the property 'Long'
        /// </summary>
        [Fact]
        public void LongTest()
        {
            // TODO unit test for the property 'Long'
        }
        /// <summary>
        /// Test the property 'MissingNode'
        /// </summary>
        [Fact]
        public void MissingNodeTest()
        {
            // TODO unit test for the property 'MissingNode'
        }
        /// <summary>
        /// Test the property 'NodeType'
        /// </summary>
        [Fact]
        public void NodeTypeTest()
        {
            // TODO unit test for the property 'NodeType'
        }
        /// <summary>
        /// Test the property 'Null'
        /// </summary>
        [Fact]
        public void NullTest()
        {
            // TODO unit test for the property 'Null'
        }
        /// <summary>
        /// Test the property 'Number'
        /// </summary>
        [Fact]
        public void NumberTest()
        {
            // TODO unit test for the property 'Number'
        }
        /// <summary>
        /// Test the property 'Object'
        /// </summary>
        [Fact]
        public void ObjectTest()
        {
            // TODO unit test for the property 'Object'
        }
        /// <summary>
        /// Test the property 'Pojo'
        /// </summary>
        [Fact]
        public void PojoTest()
        {
            // TODO unit test for the property 'Pojo'
        }
        /// <summary>
        /// Test the property 'Short'
        /// </summary>
        [Fact]
        public void ShortTest()
        {
            // TODO unit test for the property 'Short'
        }
        /// <summary>
        /// Test the property 'Textual'
        /// </summary>
        [Fact]
        public void TextualTest()
        {
            // TODO unit test for the property 'Textual'
        }
        /// <summary>
        /// Test the property 'ValueNode'
        /// </summary>
        [Fact]
        public void ValueNodeTest()
        {
            // TODO unit test for the property 'ValueNode'
        }

    }

}
