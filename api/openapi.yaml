openapi: 3.0.1
info:
  contact:
    email: contact@mailslurp.dev
    url: https://www.mailslurp.com/contact/
  description: |-
    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.

    ## Resources

    - [Homepage](https://www.mailslurp.com)
    - Get an [API KEY](https://app.mailslurp.com/sign-up/)
    - Generated [SDK Clients](https://docs.mailslurp.com/)
    - [Examples](https://github.com/mailslurp/examples) repository
  license:
    name: Apache 2.0
    url: https://www.mailslurp.com
  title: MailSlurp API
  version: 6.5.2
externalDocs:
  description: MailSlurp API documentation
  url: https://www.mailslurp.com
servers:
- description: MailSlurp API Server
  url: https://csharp.api.mailslurp.com
security:
- API_KEY: []
tags:
- description: "\"Endpoints for creating, listing, and deleting email aliases. Aliases\
    \ must be validated. Email aliases can be used to hide real email addresses behind\
    \ an alias. If you wish to receive emails with an alias attach an inbox to the\
    \ alias.\n       Whenever the inbox receives an email the email will be forwarded\
    \ to the alias email address. See related `threads`. Threads can be used with\
    \ aliases to enable replying to a proxied email. This means that when threads\
    \ are enabled an email alias will \n       create a new email thread for the message\
    \ and set the replyTo and from headers on the subsequently proxied email to point\
    \ to the threads unique email address. \n       By replying to this address the\
    \ thread will forward it to the original emails sender or replyTo and use the\
    \ same subject and bcc and cc contacts as the email you are replying to. For more\
    \ advanced email operations using aliases use the inboxId for the given alias.\n"
  name: AliasController
- description: "Endpoints for managing email entities. Send and read email using the\
    \ email API. You can fetch emails and attachments, reply to emails, and send new\
    \ emails with this controller. Emails belong to inboxes. \nEach inbox can contain\
    \ unlimited emails that are either permanent or temporary depending on your setup.\
    \ Because emails can be quite large when attachments and content are fetched most\
    \ responses only include a preview of the email and its most important features,\
    \ like subject, recipients etc and an ID. Many list results are in a paginated\
    \ form using an index (zero based) and a page size. To receive email decide on\
    \ either `waitFor` methods (such as `waitForLatestEmail` on the `WaitForController`)\
    \ to wait for emails to arrive. Use `getEmails` on `EmailController` or `getInboxEmails`\
    \ on the `InboxController` to list existing emails. To access the body or attachments\
    \ of an email you need to use the `getEmail` and `getAttachment` endpoints with\
    \ specific inbox and email IDs. The body is returned on full email entities and\
    \ contains the parsed body of the email. The email headers (such as recipients,\
    \ subject etc.) are stored on the email object. You can access the RAW SMTP message\
    \ via various `raw` methods. Attachments are treated as separate entities that\
    \ have an ID and belong to the email. To fetch email attachments first fetch the\
    \ full email then use a `downloadAttachment` method for each `attachmentID`. Attachments\
    \ are transferred in a number of ways as either `application/octect-stream` byte\
    \ arrays or as base64 encoded strings with meta data. You may prefer either depending\
    \ on the environment you are in but the base64 implementations are typically safer.\
    \ See the `AttachmentController`, `InboxController`, and `WaitForController` for\
    \ similar methods. \n    "
  name: EmailController
- description: Form controller for submitting email-able forms
  name: FormController
- description: Endpoints for managing double opt-in consent for sending promotional
    material to external email accounts.
  name: ConsentController
- description: Endpoints for viewing sent email receipts. These can be used to verify
    that an email has been sent or for historical records. Email content and attachments
    are stored. For legacy reasons the default send endpoint does not return a sent
    email. Use the `sendEmailAndConfirm` methods to receive a sent email receipt after
    sending.
  name: SentEmailsController
- description: |
    "Endpoints for managing guest portals and customer access to shareable email accounts. Use portals to grant your customers access to unique email accounts with a separate login and viewing endpoint.
  name: GuestPortalController
- description: Endpoints for creating and managing inbox repliers. Repliers can automatically
    reply to emails received by inboxes using rules.
  name: InboxReplierController
- description: "Endpoints for creating and managing inboxes. Also includes endpoints\
    \ for listing emails within inboxes. \nInboxes are a core feature of MailSlurp.\
    \ Each inbox has a unique ID and emailAddress. Inboxes can be either `HTTP` or\
    \ `SMTP` inboxes. Both are email inboxes but `HTTP` mailboxes are processed using\
    \ AWS SES while `SMTP` inboxes use a custom mail server listening at `mxslurp.click`.\
    \ Use `HTTP` inboxes for testing and `SMTP` inboxes for public facing inboxes.\
    \ If your plan allows custom domains you can create inboxes with custom addresses\
    \ that end in your domain. \nBy default inboxes are assigned a random email address\
    \ ending in `@mailslurp.com`. Use the domainPool options to use a randomly selected\
    \ domain from a pool of available domains. Whenever you create an inbox MailSlurp\
    \ will register the address and store any emails sent to the address within your\
    \ inbox. \nYou can use the `InboxController` endpoints to list the emails in an\
    \ inbox. To get the contents or attachments of an email use the ID returned from\
    \ `InboxController` methods to call the `EmailController` endpoints.\"\n"
  name: InboxController
- description: View and manage expired inbox records. If an inbox has an expiration
    date when it is created it will expire at that time and an ExpiredInboxRecord
    will be created for it listing the email address and inbox ID. You can still view
    emails belonging to the inbox by using the inbox ID but the inbox can no longer
    send or receive emails once expired.
  name: ExpiredController
- description: Other endpoints including advanced receive options
  name: BulkActionsController
- description: Endpoints for managing inbox connectors that can sync external emails
    in MailSlurp inboxes
  name: ConnectorController
- description: Endpoints for managing contacts. Contacts can be used for sending emails
    to individuals and groups.
  name: ContactController
- description: Endpoints for managing groups. Groups can be used for sending emails
    to individuals and groups.
  name: GroupController
- description: |
    Endpoints for creating and managing inbox rulesets. Inbox rulesets are sets of rules that can be automatically applied to inbound and outbound emails for an inbox. Rulesets can have a scope, action, and target. The scope is receiving or sending emails. The action is to block, allow, or forward an email. The target is pattern or email address depending on the action. The handler can be used to handle rules silently or trigger an exception when they occur. See inbox controller for similar methods.
  name: InboxRulesetController
- description: Endpoints for miscellaneous tools.
  name: ToolsController
- description: Endpoints for managing phone numbers and addresses
  externalDocs:
    description: Phone number documentation
    url: https://docs.mailslurp.com/txt-sms/
  name: PhoneController
- description: Endpoints for managing custom domains. Once you create a custom domain
    you must add the returned verification records to your hosting provider. See support
    or guides for more information.
  name: DomainController
- description: Endpoints for managing tracking entities such as email open and read
    tracking pixels.
  name: TrackingController
- description: "Endpoints for receiving emails using waitFor methods. The endpoints\
    \ are perfect for synchronous blocking calls, long-polling, or tests (see webhooks\
    \ if you need to respond to email events as they happen using HTTP notification).\
    \ These wait endpoints are all built around a common idea - that you ask for an\
    \ expected number of emails from an inbox and MailSlurp will either: A) Return\
    \ the matching emails if they are present; B) Hold a connection open until the\
    \ matching emails are are received or until a timeout occurs. For test suites\
    \ we recommend that you create a new inbox for each test run  and use the waitForLatestEmail\
    \ to hold the connection until the email you expect arrives. Note if your inbox\
    \ is not already empty waitFor methods may return immediately depending on their\
    \ implementation. See each endpoint for more details."
  name: WaitForController
- description: Endpoints for creating and managing inbox forwarders. Automatically
    forward emails received by inboxes using rules.
  name: InboxForwarderController
- description: Endpoints for managing MissedEmails. Missed emails are saved whenever
    your account cannot persist a received email because your plan had exceeded a
    given usage at the time. Missed emails can be restored with the assistance of
    the support team.
  name: MissedEmailController
- description: A collection of common actions. Groups together several controllers
    behind a facade with convenience methods. Not recommended. It is better in most
    cases to call the individual controllers directly as they are where many new features
    are added. The controllers are better documented too. This controller is maintained
    for backwards compatibility.
  name: CommonActionsController
- description: Endpoints for performing IMAP like commands on inboxes
  name: ImapController
- description: "Endpoints for exporting user data to CSV, XML and other formats."
  name: ExportController
- description: Endpoints for managing SMS
  name: SmsController
- description: Endpoints for managing Templates. Templates can be used when sending
    emails and support moustache syntax template variables. Variables can be passed
    with send email options or implicitly available if Contact Groups are used.
  name: TemplateController
- description: "Endpoints for uploading attachments. Attachments can be uploaded in\
    \ a number of ways: as base64 encoded strings, as byte array octet streams, and\
    \ as multipart form requests. Each upload method returns an array whose first\
    \ element is the ID of the attachment. Use this Id to send the attachment with\
    \ emails. See the EmailController `download` endpoints for downloading attachments.\
    \ Attachment downloads are based on the email ID they belong to and can be downloaded\
    \ using the email controller."
  name: AttachmentController
- description: Endpoints for access to bounced emails and bounced recipients
  name: BounceController
- description: "Endpoint for interacting with webhooks. Webhooks have a URL that points\
    \ to your server. Useful for email forwarding, email API processing and more.\
    \ They can be added to inboxes and when an inbox receives an email the email ID\
    \ and inbox ID will be posted to the URL endpoint at your server. The schema of\
    \ the webhook payload is available at https://csharp.api.mailslurp.com/schemas/webhook-payload\
    \ or by calling https://csharp.api.mailslurp.com/webhooks/test. Use webhooks to\
    \ react in real-time to inbound emails. Use the webhook payload posted to your\
    \ server to fetch the full emails or attachments if you need them. Use the event\
    \ ID as an idempotent record. The ID identifies the webhook payload uniquely.\
    \ MailSlurp tracks webhook processing. It will try not to send the same event\
    \ twice but it can happen. If you receive the same event more than once you can\
    \ ignore it and assume it is the same. It is recommended that you use a store\
    \ or database to track webhooks you have processed to avoid processing events\
    \ more than once."
  name: WebhookController
- description: Endpoints for managing OAuth inbox connections
  name: OAuthConnection
- description: "AI endpoints for generating structured content, automations, and analyzing\
    \ emails and SMS."
  name: AIController
paths:
  /webhooks/{webhookId}/headers:
    put:
      operationId: updateWebhookHeaders
      parameters:
      - explode: false
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookHeaders'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookDto'
          description: OK
      summary: Update a webhook request headers
      tags:
      - WebhookController
  /templates/{templateId}:
    delete:
      description: Delete template
      operationId: deleteTemplate
      parameters:
      - description: Template ID
        explode: false
        in: path
        name: templateId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete email template
      tags:
      - TemplateController
    get:
      description: Get email template
      operationId: getTemplate
      parameters:
      - description: Template ID
        explode: false
        in: path
        name: templateId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TemplateDto'
          description: OK
      summary: Get template
      tags:
      - TemplateController
    put:
      description: Update email template
      operationId: updateTemplate
      parameters:
      - description: Template ID
        explode: false
        in: path
        name: templateId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemplateOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TemplateDto'
          description: Created
      summary: Update template
      tags:
      - TemplateController
  /sms/{smsId}/favourite:
    put:
      operationId: setSmsFavourited
      parameters:
      - description: ID of SMS to set favourite state
        explode: false
        in: path
        name: smsId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: favourited
        required: true
        schema:
          type: boolean
        style: form
      responses:
        "204":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SmsDto'
          description: No Content
      tags:
      - SmsController
  /rulesets:
    delete:
      description: Delete inbox rulesets. Accepts optional inboxId filter.
      operationId: deleteInboxRulesets
      parameters:
      - description: Optional inbox id to attach ruleset to
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "204":
          description: No Content
      summary: Delete inbox rulesets
      tags:
      - InboxRulesetController
    get:
      description: List all rulesets attached to an inbox
      operationId: getInboxRulesets
      parameters:
      - description: Optional inbox id to get rulesets from
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional page index in inbox ruleset list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox ruleset list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInboxRulesetDto'
          description: OK
      summary: List inbox rulesets
      tags:
      - InboxRulesetController
    patch:
      description: Test new inbox ruleset
      operationId: testNewInboxRuleset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestNewInboxRulesetOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxRulesetTestResult'
          description: OK
      summary: Test new inbox ruleset
      tags:
      - InboxRulesetController
    post:
      description: "Create a new inbox rule for forwarding, blocking, and allowing\
        \ emails when sending and receiving"
      operationId: createNewInboxRuleset
      parameters:
      - description: Inbox id to attach ruleset to
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInboxRulesetOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxRulesetDto'
          description: OK
      summary: Create an inbox ruleset
      tags:
      - InboxRulesetController
    put:
      description: Test inbox rulesets for inbox
      operationId: testInboxRulesetsForInbox
      parameters:
      - description: ID of inbox
        explode: true
        in: query
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InboxRulesetTestOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxRulesetTestResult'
          description: OK
      summary: Test inbox rulesets for inbox
      tags:
      - InboxRulesetController
  /repliers/{id}:
    delete:
      description: Delete inbox replier
      operationId: deleteInboxReplier
      parameters:
      - description: ID of inbox replier
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete an inbox replier
      tags:
      - InboxReplierController
    get:
      description: Get inbox ruleset
      operationId: getInboxReplier
      parameters:
      - description: ID of inbox replier
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxReplierDto'
          description: OK
      summary: Get an inbox replier
      tags:
      - InboxReplierController
    put:
      description: Update inbox ruleset
      operationId: updateInboxReplier
      parameters:
      - description: ID of inbox replier
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInboxReplierOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxReplierDto'
          description: OK
      summary: Update an inbox replier
      tags:
      - InboxReplierController
  /phone/numbers/{phoneNumberId}:
    delete:
      description: Remove phone number from account
      operationId: deletePhoneNumber
      parameters:
      - explode: false
        in: path
        name: phoneNumberId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete a phone number
      tags:
      - PhoneController
    get:
      description: Get a phone number by ID
      operationId: getPhoneNumber
      parameters:
      - explode: false
        in: path
        name: phoneNumberId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PhoneNumberDto'
          description: OK
      summary: Get a phone number by ID
      tags:
      - PhoneController
    put:
      description: Set field for phone number
      operationId: updatePhoneNumber
      parameters:
      - description: ID of phone to set favourite state
        explode: false
        in: path
        name: phoneNumberId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePhoneNumberOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PhoneNumberDto'
          description: OK
      summary: Update a phone number
      tags:
      - PhoneController
  /phone/numbers/{phoneNumberId}/favourite:
    put:
      description: Set and return new favorite state for a phone
      operationId: setPhoneFavourited
      parameters:
      - description: ID of phone to set favourite state
        explode: false
        in: path
        name: phoneNumberId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPhoneFavouritedOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PhoneNumberDto'
          description: OK
      summary: Set phone favourited state
      tags:
      - PhoneController
  /inboxes/{inboxId}/favourite:
    put:
      description: Set and return new favorite state for an inbox
      operationId: setInboxFavourited
      parameters:
      - description: ID of inbox to set favourite state
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetInboxFavouritedOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxDto'
          description: OK
      summary: Set inbox favourited state
      tags:
      - InboxController
  /groups/{groupId}/contacts:
    delete:
      operationId: removeContactsFromGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupContacts'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GroupContactsDto'
          description: OK
      summary: Remove contacts from a group
      tags:
      - GroupController
    get:
      operationId: getGroupWithContacts
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GroupContactsDto'
          description: OK
      summary: Get group and contacts belonging to it
      tags:
      - GroupController
    put:
      operationId: addContactsToGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupContacts'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GroupContactsDto'
          description: OK
      summary: Add contacts to a group
      tags:
      - GroupController
  /forwarders:
    delete:
      description: Delete inbox forwarders. Accepts optional inboxId filter.
      operationId: deleteInboxForwarders
      parameters:
      - description: Optional inbox id to attach forwarder to
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "204":
          description: No Content
      summary: Delete inbox forwarders
      tags:
      - InboxForwarderController
    get:
      description: List all forwarders attached to an inbox
      operationId: getInboxForwarders
      parameters:
      - description: Optional inbox id to get forwarders from
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional page index in inbox forwarder list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox forwarder list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInboxForwarderDto'
          description: OK
      summary: List inbox forwarders
      tags:
      - InboxForwarderController
    patch:
      description: Test new inbox forwarder
      operationId: testNewInboxForwarder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestNewInboxForwarderOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxForwarderTestResult'
          description: OK
      summary: Test new inbox forwarder
      tags:
      - InboxForwarderController
    post:
      description: "Create a new inbox rule for forwarding, blocking, and allowing\
        \ emails when sending and receiving"
      operationId: createNewInboxForwarder
      parameters:
      - description: Inbox id to attach forwarder to
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInboxForwarderOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxForwarderDto'
          description: OK
      summary: Create an inbox forwarder
      tags:
      - InboxForwarderController
    put:
      description: Test inbox forwarders for inbox
      operationId: testInboxForwardersForInbox
      parameters:
      - description: ID of inbox
        explode: true
        in: query
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InboxForwarderTestOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxForwarderTestResult'
          description: OK
      summary: Test inbox forwarders for inbox
      tags:
      - InboxForwarderController
  /forwarders/{id}:
    delete:
      description: Delete inbox forwarder
      operationId: deleteInboxForwarder
      parameters:
      - description: ID of inbox forwarder
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete an inbox forwarder
      tags:
      - InboxForwarderController
    get:
      description: Get inbox forwarder
      operationId: getInboxForwarder
      parameters:
      - description: ID of inbox forwarder
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxForwarderDto'
          description: OK
      summary: Get an inbox forwarder
      tags:
      - InboxForwarderController
    put:
      description: Update inbox forwarder
      operationId: updateInboxForwarder
      parameters:
      - description: ID of inbox forwarder
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInboxForwarderOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxForwarderDto'
          description: OK
      summary: Update an inbox forwarder
      tags:
      - InboxForwarderController
  /emails/{emailId}:
    delete:
      description: Deletes an email and removes it from the inbox. Deleted emails
        cannot be recovered.
      operationId: deleteEmail
      parameters:
      - description: ID of email to delete
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete an email
      tags:
      - EmailController
    get:
      description: Returns a email summary object with headers and content. To retrieve
        the raw unparsed email use the getRawEmail endpoints
      operationId: getEmail
      parameters:
      - explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Email'
            application/xml;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Email'
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Email'
            application/xml; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Email'
          description: OK
      summary: Get email content including headers and body. Expects email to exist
        by ID. For emails that may not have arrived yet use the WaitForController.
      tags:
      - EmailController
    put:
      description: "Send the reply to the email sender or reply-to and include same\
        \ subject cc bcc etc. Reply to an email and the contents will be sent with\
        \ the existing subject to the emails `to`, `cc`, and `bcc`."
      operationId: replyToEmail
      parameters:
      - description: ID of the email that should be replied to
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplyToEmailOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SentEmailDto'
          description: OK
      summary: Reply to an email
      tags:
      - EmailController
  /emails/{emailId}/favourite:
    put:
      description: Set and return new favorite state for an email
      operationId: setEmailFavourited
      parameters:
      - description: ID of email to set favourite state
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: favourited
        required: true
        schema:
          type: boolean
        style: form
      responses:
        "204":
          description: No Content
      summary: Set email favourited state
      tags:
      - EmailController
  /domains/{id}:
    delete:
      description: Delete a domain. This will disable any existing inboxes that use
        this domain.
      operationId: deleteDomain
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: No Content
      summary: Delete a domain
      tags:
      - DomainController
    get:
      description: Returns domain verification status and tokens for a given domain
      operationId: getDomain
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: checkForErrors
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DomainDto'
          description: OK
      summary: Get a domain
      tags:
      - DomainController
    put:
      description: Update values on a domain. Note you cannot change the domain name
        as it is immutable. Recreate the domain if you need to alter this.
      operationId: updateDomain
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDomainOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DomainDto'
          description: OK
      summary: Update a domain
      tags:
      - DomainController
  /connectors/{id}:
    delete:
      operationId: deleteConnector
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete an inbox connector
      tags:
      - ConnectorController
    get:
      operationId: getConnector
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorDto'
          description: OK
      summary: Get an inbox connector
      tags:
      - ConnectorController
    put:
      operationId: updateConnector
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorDto'
          description: OK
      summary: Update an inbox connector
      tags:
      - ConnectorController
  /aliases/{aliasId}:
    delete:
      operationId: deleteAlias
      parameters:
      - explode: false
        in: path
        name: aliasId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete an email alias
      tags:
      - AliasController
    get:
      description: Get an email alias by ID
      operationId: getAlias
      parameters:
      - explode: false
        in: path
        name: aliasId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AliasDto'
          description: OK
      summary: Get an email alias
      tags:
      - AliasController
    put:
      operationId: updateAlias
      parameters:
      - explode: false
        in: path
        name: aliasId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAliasOptions'
        required: true
      responses:
        "202":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AliasDto'
          description: Accepted
      summary: Update an email alias
      tags:
      - AliasController
  /aliases/{aliasId}/emails/{emailId}:
    put:
      description: "Send the reply to the email sender or reply-to and include same\
        \ subject cc bcc etc. Reply to an email and the contents will be sent with\
        \ the existing subject to the emails `to`, `cc`, and `bcc`."
      operationId: replyToAliasEmail
      parameters:
      - description: ID of the alias that email belongs to
        explode: false
        in: path
        name: aliasId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: ID of the email that should be replied to
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplyToAliasEmailOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SentEmailDto'
          description: OK
      summary: Reply to an email
      tags:
      - AliasController
  /webhooks:
    delete:
      operationId: deleteAllWebhooks
      parameters:
      - description: before
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "204":
          description: No Content
      summary: Delete all webhooks
      tags:
      - WebhookController
    post:
      description: Get notified of account level events such as bounce and bounce
        recipient.
      operationId: createAccountWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookDto'
          description: Created
      summary: Attach a WebHook URL to an inbox
      tags:
      - WebhookController
  /webhooks/{webhookId}/test:
    post:
      operationId: sendTestData
      parameters:
      - explode: false
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookTestResult'
          description: Created
      summary: Send webhook test data
      tags:
      - WebhookController
  /webhooks/{webhookId}/schema:
    post:
      description: Get JSON Schema definition for webhook payload
      operationId: getJsonSchemaForWebhookPayload
      parameters:
      - explode: false
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JSONSchemaDto'
          description: OK
      tags:
      - WebhookController
  /webhooks/{webhookId}/example:
    post:
      description: Get example payload for webhook
      operationId: getTestWebhookPayloadForWebhook
      parameters:
      - explode: false
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AbstractWebhookPayload'
          description: Created
      tags:
      - WebhookController
  /webhooks/verify:
    post:
      description: Verify a webhook payload using the messageId and signature. This
        allows you to be sure that MailSlurp sent the payload and not another server.
      operationId: verifyWebhookSignature
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyWebhookSignatureOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VerifyWebhookSignatureResults'
          description: OK
      summary: Verify a webhook payload signature
      tags:
      - WebhookController
  /webhooks/schema:
    post:
      description: Get JSON Schema definition for webhook payload by event
      operationId: getJsonSchemaForWebhookEvent
      parameters:
      - explode: true
        in: query
        name: event
        required: true
        schema:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JSONSchemaDto'
          description: OK
      tags:
      - WebhookController
  /webhooks/results/{webhookResultId}/redrive:
    post:
      description: Allows you to resend a webhook payload that was already sent. Webhooks
        that fail are retried automatically for 24 hours and then put in a dead letter
        queue. You can retry results manually using this method.
      operationId: redriveWebhookResult
      parameters:
      - description: Webhook Result ID
        explode: false
        in: path
        name: webhookResultId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookRedriveResult'
          description: OK
      summary: Get a webhook result and try to resend the original webhook payload
      tags:
      - WebhookController
  /webhooks/results/redrive:
    post:
      description: Allows you to resend webhook payloads for any recorded webhook
        result that failed to deliver the payload.
      operationId: redriveAllWebhookResults
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookRedriveAllResult'
          description: OK
      summary: Redrive all webhook results that have failed status
      tags:
      - WebhookController
  /waitFor:
    post:
      description: Generic waitFor method that will wait until an inbox meets given
        conditions or return immediately if already met
      operationId: waitFor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WaitForConditions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/EmailPreview'
                type: array
          description: OK
      summary: Wait for an email to match the provided filter conditions such as subject
        contains keyword.
      tags:
      - WaitForController
  /waitForSms:
    post:
      description: Generic waitFor method that will wait until a phone number meets
        given conditions or return immediately if already met
      operationId: waitForSms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WaitForSmsConditions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/SmsPreview'
                type: array
          description: OK
      summary: Wait for an SMS message to match the provided filter conditions such
        as body contains keyword.
      tags:
      - WaitForController
  /waitForMatchingFirstEmail:
    post:
      description: "Perform a search of emails in an inbox with the given patterns.\
        \ If a result if found then return or else retry the search until a result\
        \ is found or timeout is reached. Match options allow simple CONTAINS or EQUALS\
        \ filtering on SUBJECT, TO, BCC, CC, and FROM. See the `MatchOptions` object\
        \ for options. An example payload is `{ matches: [{field: 'SUBJECT',should:'CONTAIN',value:'needle'}]\
        \ }`. You can use an array of matches and they will be applied sequentially\
        \ to filter out emails. If you want to perform matches and extractions of\
        \ content using Regex patterns see the EmailController `getEmailContentMatch`\
        \ method."
      operationId: waitForMatchingFirstEmail
      parameters:
      - description: Id of the inbox we are matching an email for
        explode: true
        in: query
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: Max milliseconds to wait
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Optional filter for unread only
        explode: true
        in: query
        name: unreadOnly
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Filter for emails that were received after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter for emails that were received before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Sort direction
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Max milliseconds delay between calls
        explode: true
        in: query
        name: delay
        required: false
        schema:
          format: int64
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Email'
          description: OK
      summary: Wait for or return the first email that matches provided MatchOptions
        array
      tags:
      - WaitForController
  /waitForMatchingEmails:
    post:
      description: "Perform a search of emails in an inbox with the given patterns.\
        \ If results match expected count then return or else retry the search until\
        \ results are found or timeout is reached. Match options allow simple CONTAINS\
        \ or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the `MatchOptions`\
        \ object for options. An example payload is `{ matches: [{field: 'SUBJECT',should:'CONTAIN',value:'needle'}]\
        \ }`. You can use an array of matches and they will be applied sequentially\
        \ to filter out emails. If you want to perform matches and extractions of\
        \ content using Regex patterns see the EmailController `getEmailContentMatch`\
        \ method."
      operationId: waitForMatchingEmails
      parameters:
      - description: Id of the inbox we are fetching emails from
        explode: true
        in: query
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: Number of emails to wait for. Must be greater or equal to 1
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: Filter for emails that were received before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter for emails that were received after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Sort direction
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Max milliseconds delay between calls
        explode: true
        in: query
        name: delay
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Max milliseconds to wait
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Optional filter for unread only
        explode: true
        in: query
        name: unreadOnly
        required: false
        schema:
          default: false
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/EmailPreview'
                type: array
          description: OK
      summary: Wait or return list of emails that match simple matching patterns
      tags:
      - WaitForController
  /waitForLatestSms:
    post:
      description: Wait until a phone number meets given conditions or return immediately
        if already met
      operationId: waitForLatestSms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WaitForSingleSmsOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SmsDto'
          description: OK
      summary: Wait for the latest SMS message to match the provided filter conditions
        such as body contains keyword.
      tags:
      - WaitForController
  /user/json/pluck:
    post:
      description: Utility function to extract properties from JSON objects in language
        where this is cumbersome.
      operationId: getJsonPropertyAsString
      parameters:
      - description: JSON property name or dot separated path selector such as `a.b.c`
        explode: true
        in: query
        name: property
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonNode'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: string
          description: OK
      tags:
      - UserController
  /tracking/pixels:
    get:
      description: List tracking pixels in paginated form
      operationId: getAllTrackingPixels
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTrackingPixelProjection'
          description: OK
      summary: Get tracking pixels
      tags:
      - TrackingController
    post:
      description: Create a tracking pixel. A tracking pixel is an image that can
        be embedded in an email. When the email is viewed and the image is seen MailSlurp
        will mark the pixel as seen. Use tracking pixels to monitor email open events.
        You can receive open notifications via webhook or by fetching the pixel.
      operationId: createTrackingPixel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackingPixelOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TrackingPixelDto'
          description: Created
      summary: Create tracking pixel
      tags:
      - TrackingController
  /tools/lookup-tls-reporting-domain:
    post:
      operationId: lookupTlsReportingDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupTlsReportingDomainOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LookupTlsReportingDomainResults'
          description: OK
      summary: Lookup a TLS reporting domain policy
      tags:
      - ToolsController
  /tools/lookup-mta-sts-domain:
    post:
      operationId: lookupMtaStsDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupMtaStsDomainOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LookupMtaStsDomainResults'
          description: OK
      summary: Lookup a MTA-STS domain policy
      tags:
      - ToolsController
  /tools/lookup-dmarc-domain:
    post:
      operationId: lookupDmarcDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupDmarcDomainOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LookupDmarcDomainResults'
          description: OK
      summary: Lookup a DMARC record policy
      tags:
      - ToolsController
  /tools/lookup-bimi-domain:
    post:
      operationId: lookupBimiDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupBimiDomainOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LookupBimiDomainResults'
          description: OK
      summary: Lookup a BIMI record policy
      tags:
      - ToolsController
  /tools/generate-tls-reporting-record:
    post:
      operationId: generateTlsReportingRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateTlsReportingRecordOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GenerateTlsReportingRecordResults'
          description: OK
      summary: Create a TLS reporting record policy
      tags:
      - ToolsController
  /tools/generate-mta-sts-record:
    post:
      operationId: generateMtaStsRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateMtaStsRecordOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GenerateMtaStsRecordResults'
          description: OK
      summary: Create a TLS reporting record policy
      tags:
      - ToolsController
  /tools/generate-dmarc-record:
    post:
      operationId: generateDmarcRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateDmarcRecordOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GenerateDmarcRecordResults'
          description: OK
      summary: Create a DMARC record policy
      tags:
      - ToolsController
  /tools/generate-bimi-record:
    post:
      operationId: generateBimiRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateBimiRecordOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GenerateBimiRecordResults'
          description: OK
      summary: Create a BIMI record policy
      tags:
      - ToolsController
  /tools/fake-email:
    delete:
      description: Delete a fake email address using the fake email domains
      operationId: deleteNewFakeEmailAddress
      parameters:
      - explode: true
        in: query
        name: emailAddress
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
      summary: Delete a fake email address using the fake email domains
      tags:
      - ToolsController
    get:
      description: Get a fake email by its ID
      operationId: getFakeEmailById
      parameters:
      - explode: true
        in: query
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FakeEmailResult'
          description: OK
      summary: Get a fake email by its ID
      tags:
      - ToolsController
    post:
      operationId: createNewFakeEmailAddress
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NewFakeEmailAddressResult'
          description: OK
      summary: Create a new email address using the fake email domains
      tags:
      - ToolsController
  /tools/check-email-features-client-support:
    post:
      operationId: checkEmailFeaturesClientSupport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckEmailFeaturesClientSupportOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CheckEmailFeaturesClientSupportResults'
          description: OK
      summary: Check email client support for email HTML and CSS features
      tags:
      - ToolsController
  /templates:
    get:
      description: Get all templates
      operationId: getTemplates
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TemplateProjection'
                type: array
          description: OK
      summary: List templates
      tags:
      - TemplateController
    post:
      description: Create an email template with variables for use with templated
        transactional emails.
      operationId: createTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemplateOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TemplateDto'
          description: Created
      summary: Create a Template
      tags:
      - TemplateController
  /sms/{smsId}/reply:
    get:
      description: Get reply for an SMS message.
      operationId: getReplyForSmsMessage
      parameters:
      - explode: false
        in: path
        name: smsId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReplyForSms'
          description: OK
      summary: Get reply for an SMS message
      tags:
      - SmsController
    post:
      description: Reply to an SMS message.
      operationId: replyToSmsMessage
      parameters:
      - explode: false
        in: path
        name: smsId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmsReplyOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SentSmsDto'
          description: OK
      summary: Send a reply to a received SMS message. Replies are sent from the receiving
        number.
      tags:
      - SmsController
  /sms/send:
    post:
      operationId: sendSms
      parameters:
      - description: Phone number to send from in E.164 format
        explode: true
        in: query
        name: fromPhoneNumber
        required: false
        schema:
          type: string
        style: form
      - description: Phone number ID to send from in UUID form
        explode: true
        in: query
        name: fromPhoneId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmsSendOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SentSmsDto'
          description: OK
      tags:
      - SmsController
  /sendEmail:
    post:
      description: If no senderId or inboxId provided a random email address will
        be used to send from.
      operationId: sendEmailSimple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleSendEmailOptions'
        required: true
      responses:
        "201":
          description: Created
      summary: Send an email
      tags:
      - CommonActionsController
  /sendEmailQuery:
    post:
      description: If no senderId or inboxId provided a random email address will
        be used to send from. Ensure your parameters are URL encoded.
      operationId: sendEmailQuery
      parameters:
      - description: ID of inbox to send from. If null an inbox will be created for
          sending
        explode: true
        in: query
        name: senderId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Email address to send to
        explode: true
        in: query
        name: to
        required: true
        schema:
          type: string
        style: form
      - description: Body of the email message. Supports HTML
        explode: true
        in: query
        name: body
        required: false
        schema:
          type: string
        style: form
      - description: Subject line of the email
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      responses:
        "201":
          description: Created
      summary: Send an email using query parameters
      tags:
      - CommonActionsController
  /rulesets/{id}/test:
    post:
      description: Test an inbox ruleset
      operationId: testInboxRuleset
      parameters:
      - description: ID of inbox ruleset
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InboxRulesetTestOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxRulesetTestResult'
          description: OK
      summary: Test an inbox ruleset
      tags:
      - InboxRulesetController
  /rulesets/test-sending:
    post:
      description: Test whether outbound emails to an email address would be blocked
        or allowed by inbox rulesets
      operationId: testInboxRulesetSending
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestInboxRulesetSendingOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestInboxRulesetSendingResult'
          description: OK
      summary: Test sending with inbox rulesets
      tags:
      - InboxRulesetController
  /rulesets/test-receiving:
    post:
      description: Test whether inbound emails from an email address would be blocked
        or allowed by inbox rulesets
      operationId: testInboxRulesetReceiving
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestInboxRulesetReceivingOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestInboxRulesetReceivingResult'
          description: OK
      summary: Test receiving with inbox rulesets
      tags:
      - InboxRulesetController
  /repliers:
    delete:
      description: Delete inbox repliers. Accepts optional inboxId filter.
      operationId: deleteInboxRepliers
      parameters:
      - description: Optional inbox id to attach replier to
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "204":
          description: No Content
      summary: Delete inbox repliers
      tags:
      - InboxReplierController
    get:
      description: List all repliers attached to an inbox
      operationId: getInboxRepliers
      parameters:
      - description: Optional inbox id to get repliers from
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional page index in inbox replier list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox replier list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInboxReplierDto'
          description: OK
      summary: List inbox repliers
      tags:
      - InboxReplierController
    post:
      description: "Create a new inbox rule for reply toing, blocking, and allowing\
        \ emails when sending and receiving"
      operationId: createNewInboxReplier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInboxReplierOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxReplierDto'
          description: OK
      summary: Create an inbox replier
      tags:
      - InboxReplierController
  /phone:
    post:
      description: Create new phone number
      operationId: createPhoneNumber
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePhoneNumberOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PhoneNumberDto'
          description: OK
      summary: Add phone number to your account. Only works if you have already added
        a plan and an initial phone number in your account and acknowledged the pricing
        and terms of service by enabling API phone creation.
      tags:
      - PhoneController
  /phone/validate:
    post:
      description: Validate a phone number
      operationId: validatePhoneNumber
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidatePhoneNumberOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PhoneNumberValidationDto'
          description: OK
      summary: Verify validity of a phone number
      tags:
      - PhoneController
  /phone/numbers/{phoneNumberId}/webhooks:
    post:
      description: Get notified whenever a phone number receives an SMS via a WebHook
        URL.
      operationId: createWebhookForPhoneNumber
      parameters:
      - explode: false
        in: path
        name: phoneNumberId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookDto'
          description: Created
      summary: Attach a WebHook URL to a phone number
      tags:
      - WebhookController
  /phone/numbers/{phoneNumberId}/test:
    post:
      description: Test a phone number by sending an SMS to it
      operationId: testPhoneNumberSendSms
      parameters:
      - explode: false
        in: header
        name: x-test-id
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: phoneNumberId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestPhoneNumberOptions'
        required: true
      responses:
        "200":
          description: OK
      summary: Test sending an SMS to a number
      tags:
      - PhoneController
  /phone/numbers/{phoneNumberId}/sms:
    get:
      description: Get SMS messages for a phone number
      operationId: getSmsByPhoneNumber
      parameters:
      - explode: false
        in: path
        name: phoneNumberId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in SMS list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in SMS list pagination. Maximum size is 100.
          Use page index and sort to page through larger results
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional filter for unread SMS only. All SMS are considered unread
          until they are viewed in the dashboard or requested directly
        explode: true
        in: query
        name: unreadOnly
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Optional filter SMSs received after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter SMSs received before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Optionally filter results for favourites only
        explode: true
        in: query
        name: favourite
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageSmsProjection'
          description: OK
      summary: List SMS messages for a phone number
      tags:
      - PhoneController
    post:
      description: Send SMS from a phone number
      operationId: sendSmsFromPhoneNumber
      parameters:
      - explode: false
        in: path
        name: phoneNumberId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmsSendOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SentSmsDto'
          description: OK
      summary: Send TXT message from a phone number
      tags:
      - PhoneController
  /phone/emergency-addresses:
    get:
      description: List emergency addresses
      operationId: getEmergencyAddresses
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/EmergencyAddressDto'
                type: array
          description: OK
      summary: Get emergency addresses
      tags:
      - PhoneController
    post:
      description: Add an emergency address to a phone number
      operationId: createEmergencyAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmergencyAddressOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmergencyAddress'
          description: OK
      summary: Create an emergency address
      tags:
      - PhoneController
  /phone/consent:
    get:
      description: Get the status of phone usage consent
      operationId: getConsentStatus
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConsentStatusDto'
          description: OK
      summary: Get consent status
      tags:
      - PhoneController
    post:
      description: Give or revoke consent for phone usage
      operationId: setConsentStatus
      parameters:
      - explode: true
        in: query
        name: agree
        required: true
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConsentStatusDto'
          description: OK
      summary: Set consent status
      tags:
      - PhoneController
  /oauth-connection:
    post:
      description: Configure an inbox for OAuth sync with MailSlurp
      operationId: createOAuthConnection
      parameters:
      - explode: true
        in: query
        name: redirectBase
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: oAuthConnectionType
        required: true
        schema:
          enum:
          - GOOGLE
          - MICROSOFT
          type: string
        style: form
      - explode: true
        in: query
        name: emailAddress
        required: false
        schema:
          type: string
        style: form
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateOAuthConnectionResult'
          description: Created
      summary: Create an OAuth connection
      tags:
      - OAuthConnection
  /oauth-connection/oauth-exchange/google:
    post:
      description: Exchange an OAuth code for an access token and create an inbox
        connection in MailSlurp
      operationId: exchangeAuthorizationTokenAndCreateOrUpdateInbox
      parameters:
      - explode: true
        in: query
        name: authorizationCode
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: redirectUri
        required: true
        schema:
          type: string
        style: form
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateOAuthExchangeResult'
          description: Created
      summary: Exchange authorization code for access token and create inbox
      tags:
      - OAuthConnection
  /newEmailAddress:
    post:
      description: Returns an Inbox with an `id` and an `emailAddress`
      operationId: createNewEmailAddress
      parameters:
      - explode: true
        in: query
        name: allowTeamAccess
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: useDomainPool
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: expiresAt
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - explode: true
        in: query
        name: expiresIn
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: emailAddress
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: inboxType
        required: false
        schema:
          description: Type of inbox. HTTP inboxes are faster and better for most
            cases. SMTP inboxes are more suited for public facing inbound messages
            (but cannot send).
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          type: string
        style: form
      - explode: true
        in: query
        name: description
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: favourite
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: virtualInbox
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: useShortAddress
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: domainName
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: domainId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: prefix
        required: false
        schema:
          type: string
        style: form
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxDto'
          description: Created
      summary: Create new random inbox
      tags:
      - CommonActionsController
  /missed-emails/restore:
    post:
      description: If emails were missed due to a plan limit they are saved as missed
        emails. If support team enables the canRestore flag these emails can be reload
        into your account using this method.
      operationId: restoreMissedEmails
      responses:
        "200":
          description: OK
      summary: Restore missed emails
      tags:
      - MissedEmailController
  /mail-server/verify/email-address:
    post:
      deprecated: true
      operationId: verifyEmailAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailAddressOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailVerificationResult'
          description: OK
      summary: Deprecated. Use the EmailVerificationController methods for more accurate
        and reliable functionality. Verify the existence of an email address at a
        given mail server.
      tags:
      - MailServerController
  /mail-server/describe/ip-address:
    post:
      operationId: getIpAddress
      parameters:
      - explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IPAddressResult'
          description: OK
      summary: Get IP address for a domain
      tags:
      - MailServerController
  /mail-server/describe/domain:
    post:
      operationId: describeMailServerDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeDomainOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DescribeMailServerDomainResult'
          description: OK
      summary: Get DNS Mail Server records for a domain
      tags:
      - MailServerController
  /mail-server/describe/dns-lookups:
    post:
      operationId: getDnsLookups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DNSLookupsOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DNSLookupResults'
          description: OK
      summary: Lookup DNS records for multiple domains
      tags:
      - MailServerController
  /mail-server/describe/dns-lookup:
    post:
      operationId: getDnsLookup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DNSLookupOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DNSLookupResults'
          description: OK
      summary: Lookup DNS records for a domain
      tags:
      - MailServerController
  /inboxes:
    delete:
      description: "Permanently delete all inboxes and associated email addresses.\
        \ This will also delete all emails within the inboxes. Be careful as inboxes\
        \ cannot be recovered once deleted. Note: deleting inboxes will not impact\
        \ your usage limits. Monthly inbox creation limits are based on how many inboxes\
        \ were created in the last 30 days, not how many inboxes you currently have."
      operationId: deleteAllInboxes
      responses:
        "204":
          description: No Content
      summary: Delete all inboxes
      tags:
      - InboxController
    get:
      deprecated: true
      description: List the inboxes you have created. Note use of the more advanced
        `getAllInboxes` is recommended and allows paginated access using a limit and
        sort parameter.
      operationId: getInboxes
      parameters:
      - description: Optional result size limit. Note an automatic limit of 100 results
          is applied. See the paginated `getAllEmails` for larger queries.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional filter by created after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional exclude catch all inboxes
        explode: true
        in: query
        name: excludeCatchAllInboxes
        required: false
        schema:
          type: boolean
        style: form
      - description: Optional filter by created before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional inboxIds to include in result
        explode: true
        in: query
        name: include
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/InboxDto'
                type: array
          description: OK
      summary: List Inboxes and email addresses
      tags:
      - InboxController
    post:
      description: 'Create a new inbox and with a randomized email address to send
        and receive from. Pass emailAddress parameter if you wish to use a specific
        email address. Creating an inbox is required before sending or receiving emails.
        If writing tests it is recommended that you create a new inbox during each
        test method so that it is unique and empty. '
      operationId: createInbox
      parameters:
      - description: A custom email address to use with the inbox. Defaults to null.
          When null MailSlurp will assign a random email address to the inbox such
          as `123@mailslurp.com`. If you use the `useDomainPool` option when the email
          address is null it will generate an email address with a more varied domain
          ending such as `123@mailslurp.info` or `123@mailslurp.biz`. When a custom
          email address is provided the address is split into a domain and the domain
          is queried against your user. If you have created the domain in the MailSlurp
          dashboard and verified it you can use any email address that ends with the
          domain. Note domain types must match the inbox type - so `SMTP` inboxes
          will only work with `SMTP` type domains. Avoid `SMTP` inboxes if you need
          to send emails as they can only receive. Send an email to this address and
          the inbox will receive and store it for you. To retrieve the email use the
          Inbox and Email Controller endpoints with the inbox ID.
        explode: true
        in: query
        name: emailAddress
        required: false
        schema:
          type: string
        style: form
      - description: Tags that inbox has been tagged with. Tags can be added to inboxes
          to group different inboxes within an account. You can also search for inboxes
          by tag in the dashboard UI.
        explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Optional name of the inbox. Displayed in the dashboard for easier
          search and used as the sender name when sending emails.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Optional description of the inbox for labelling purposes. Is
          shown in the dashboard and can be used with
        explode: true
        in: query
        name: description
        required: false
        schema:
          type: string
        style: form
      - description: "Use the MailSlurp domain name pool with this inbox when creating\
          \ the email address. Defaults to null. If enabled the inbox will be an email\
          \ address with a domain randomly chosen from a list of the MailSlurp domains.\
          \ This is useful when the default `@mailslurp.com` email addresses used\
          \ with inboxes are blocked or considered spam by a provider or receiving\
          \ service. When domain pool is enabled an email address will be generated\
          \ ending in `@mailslurp.{world,info,xyz,...}` . This means a TLD is randomly\
          \ selecting from a list of `.biz`, `.info`, `.xyz` etc to add variance to\
          \ the generated email addresses. When null or false MailSlurp uses the default\
          \ behavior of `@mailslurp.com` or custom email address provided by the emailAddress\
          \ field. Note this feature is only available for `HTTP` inbox types."
        explode: true
        in: query
        name: useDomainPool
        required: false
        schema:
          type: boolean
        style: form
      - description: Is the inbox a favorite. Marking an inbox as a favorite is typically
          done in the dashboard for quick access or filtering
        explode: true
        in: query
        name: favourite
        required: false
        schema:
          type: boolean
        style: form
      - description: Optional inbox expiration date. If null then this inbox is permanent
          and the emails in it won't be deleted. If an expiration date is provided
          or is required by your plan the inbox will be closed when the expiration
          time is reached. Expired inboxes still contain their emails but can no longer
          send or receive emails. An ExpiredInboxRecord is created when an inbox and
          the email address and inbox ID are recorded. The expiresAt property is a
          timestamp string in ISO DateTime Format yyyy-MM-dd'T'HH:mm:ss.SSSXXX.
        explode: true
        in: query
        name: expiresAt
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Number of milliseconds that inbox should exist for
        explode: true
        in: query
        name: expiresIn
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: DEPRECATED (team access is always true). Grant team access to
          this inbox and the emails that belong to it for team members of your organization.
        explode: true
        in: query
        name: allowTeamAccess
        required: false
        schema:
          type: boolean
        style: form
      - description: HTTP (default) or SMTP inbox type. HTTP inboxes are default and
          best solution for most cases. SMTP inboxes are more reliable for public
          inbound email consumption (but do not support sending emails). When using
          custom domains the domain type must match the inbox type. HTTP inboxes are
          processed by AWS SES while SMTP inboxes use a custom mail server running
          at `mxslurp.click`.
        explode: true
        in: query
        name: inboxType
        required: false
        schema:
          description: Type of inbox. HTTP inboxes are faster and better for most
            cases. SMTP inboxes are more suited for public facing inbound messages
            (but cannot send).
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          type: string
        style: form
      - description: Virtual inbox prevents any outbound emails from being sent. It
          creates sent email records but will never send real emails to recipients.
          Great for testing and faking email sending.
        explode: true
        in: query
        name: virtualInbox
        required: false
        schema:
          type: boolean
        style: form
      - description: Use a shorter email address under 31 characters
        explode: true
        in: query
        name: useShortAddress
        required: false
        schema:
          type: boolean
        style: form
      - description: ID of custom domain to use for email address.
        explode: true
        in: query
        name: domainId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: FQDN domain name for the domain you have verified. Will be appended
          with a randomly assigned recipient name. Use the `emailAddress` option instead
          to specify the full custom inbox.
        explode: true
        in: query
        name: domainName
        required: false
        schema:
          type: string
        style: form
      - description: Prefix to add before the email address for easier labelling or
          identification.
        explode: true
        in: query
        name: prefix
        required: false
        schema:
          type: string
        style: form
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxDto'
          description: Created
      summary: Create an inbox email address. An inbox has a real email address and
        can send and receive emails. Inboxes can be either `SMTP` or `HTTP` inboxes.
      tags:
      - InboxController
  /inboxes/{inboxId}:
    delete:
      description: "Permanently delete an inbox and associated email address as well\
        \ as all emails within the given inbox. This action cannot be undone. Note:\
        \ deleting an inbox will not affect your account usage. Monthly inbox usage\
        \ is based on how many inboxes you create within 30 days, not how many exist\
        \ at time of request."
      operationId: deleteInbox
      parameters:
      - explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete inbox
      tags:
      - InboxController
    get:
      description: "Returns an inbox's properties, including its email address and\
        \ ID."
      operationId: getInbox
      parameters:
      - explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxDto'
          description: OK
      summary: Get Inbox. Returns properties of an inbox.
      tags:
      - InboxController
    patch:
      description: Update editable fields on an inbox
      operationId: updateInbox
      parameters:
      - explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInboxOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxDto'
          description: OK
      summary: Update Inbox. Change name and description. Email address is not editable.
      tags:
      - InboxController
    post:
      description: "Send an email from an inbox's email address. \nThe request body\
        \ should contain the `SendEmailOptions` that include recipients, attachments,\
        \ body etc. See `SendEmailOptions` for all available properties. Note the\
        \ `inboxId` refers to the inbox's id not the inbox's email address. See https://www.mailslurp.com/guides/\
        \ for more information on how to send emails. This method does not return\
        \ a sent email entity due to legacy reasons. To send and get a sent email\
        \ as returned response use the sister method `sendEmailAndConfirm`."
      operationId: sendEmail
      parameters:
      - description: ID of the inbox you want to send the email from
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailOptions'
        required: true
      responses:
        "201":
          description: Created
      summary: Send Email
      tags:
      - InboxController
  /inboxes/{inboxId}/with-schedule:
    post:
      description: Send an email using a delay. Will place the email onto a scheduler
        that will then be processed and sent. Use delays to schedule email sending.
      operationId: sendWithSchedule
      parameters:
      - description: ID of the inbox you want to send the email from
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Sending timestamp
        explode: true
        in: query
        name: sendAtTimestamp
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Send after n seconds
        explode: true
        in: query
        name: sendAtNowPlusSeconds
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Validate before adding to queue
        explode: true
        in: query
        name: validateBeforeEnqueue
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ScheduledJobDto'
          description: Created
      summary: Send email with with delay or schedule
      tags:
      - InboxController
  /inboxes/{inboxId}/with-queue:
    post:
      description: Send an email using a queue. Will place the email onto a queue
        that will then be processed and sent. Use this queue method to enable any
        failed email sending to be recovered. This will prevent lost emails when sending
        if your account encounters a block or payment issue.
      operationId: sendEmailWithQueue
      parameters:
      - description: ID of the inbox you want to send the email from
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Validate before adding to queue
        explode: true
        in: query
        name: validateBeforeEnqueue
        required: true
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailOptions'
        required: true
      responses:
        "201":
          description: Created
      summary: Send email with queue
      tags:
      - InboxController
  /inboxes/{inboxId}/webhooks:
    get:
      deprecated: true
      operationId: getWebhooks
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/WebhookProjection'
                type: array
          description: OK
      summary: Get all webhooks for an Inbox
      tags:
      - WebhookController
    post:
      description: Get notified whenever an inbox receives an email via a WebHook
        URL. An emailID will be posted to this URL every time an email is received
        for this inbox. The URL must be publicly reachable by the MailSlurp server.
        You can provide basicAuth values if you wish to secure this endpoint.
      operationId: createWebhook
      parameters:
      - explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookDto'
          description: Created
      summary: Attach a WebHook URL to an inbox
      tags:
      - WebhookController
  /inboxes/{inboxId}/smtp-envelope:
    post:
      description: "Send email using an SMTP envelope containing RCPT TO, MAIL FROM,\
        \ and a SMTP BODY."
      operationId: sendSmtpEnvelope
      parameters:
      - description: ID of the inbox you want to send the email from
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendSMTPEnvelopeOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SentEmailDto'
          description: Created
      summary: Send email using an SMTP mail envelope and message body and return
        sent confirmation
      tags:
      - InboxController
  /inboxes/{inboxId}/send-test-email:
    post:
      description: Send an inbox a test email to test email receiving is working
      operationId: sendTestEmail
      parameters:
      - explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Send a test email to inbox
      tags:
      - InboxController
  /inboxes/{inboxId}/rulesets:
    get:
      description: List all rulesets attached to an inbox
      operationId: listInboxRulesets
      parameters:
      - explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in inbox ruleset list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox ruleset list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Optional filter by created after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter by created before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInboxRulesetDto'
          description: OK
      summary: List inbox rulesets
      tags:
      - InboxController
    post:
      description: "Create a new inbox rule for forwarding, blocking, and allowing\
        \ emails when sending and receiving"
      operationId: createInboxRuleset
      parameters:
      - description: inboxId
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInboxRulesetOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxRulesetDto'
          description: OK
      summary: Create an inbox ruleset
      tags:
      - InboxController
  /inboxes/{inboxId}/confirm:
    post:
      description: Sister method for standard `sendEmail` method with the benefit
        of returning a `SentEmail` entity confirming the successful sending of the
        email with a link to the sent object created for it.
      operationId: sendEmailAndConfirm
      parameters:
      - description: ID of the inbox you want to send the email from
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SentEmailDto'
          description: Created
      summary: Send email and return sent confirmation
      tags:
      - InboxController
  /inboxes/withOptions:
    post:
      description: Additional endpoint that allows inbox creation with request body
        options. Can be more flexible that other methods for some clients.
      operationId: createInboxWithOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInboxDto'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxDto'
          description: Created
      summary: Create an inbox with options. Extended options for inbox creation.
      tags:
      - InboxController
  /inboxes/withDefaults:
    post:
      operationId: createInboxWithDefaults
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxDto'
          description: Created
      summary: Create an inbox with default options. Uses MailSlurp domain pool address
        and is private.
      tags:
      - InboxController
  /inboxes/search:
    post:
      description: "Search inboxes and return in paginated form. The results are available\
        \ on the `content` property of the returned object. This method allows for\
        \ page index (zero based), page size (how many results to return), and a sort\
        \ direction (based on createdAt time). You Can also filter by whether an inbox\
        \ is favorited or use email address pattern. This method is the recommended\
        \ way to query inboxes. The alternative `getInboxes` method returns a full\
        \ list of inboxes but is limited to 100 results."
      operationId: searchInboxes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchInboxesOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInboxProjection'
          description: OK
      summary: Search all inboxes and return matching inboxes
      tags:
      - InboxController
  /inboxes/available:
    post:
      description: Returns whether an email address is available
      operationId: isEmailAddressAvailable
      parameters:
      - explode: true
        in: query
        name: emailAddress
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailAvailableResult'
          description: OK
      summary: Is email address available
      tags:
      - InboxController
  /imap/server/update-flags:
    post:
      description: Update message flags
      operationId: imapServerUpdateFlags
      parameters:
      - explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImapUpdateFlagsOptions'
        required: true
      responses:
        "204":
          description: No Content
      tags:
      - ImapController
  /imap/server/status:
    post:
      operationId: imapServerStatus
      parameters:
      - description: Inbox ID to list
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImapServerStatusOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImapServerStatusResult'
          description: OK
      summary: Get status for mailbox
      tags:
      - ImapController
  /imap/server/search:
    post:
      operationId: imapServerSearch
      parameters:
      - description: Inbox ID to search
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImapServerSearchOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImapServerSearchResult'
          description: OK
      summary: Search messages in an inbox
      tags:
      - ImapController
  /imap/server/mailbox:
    post:
      operationId: imapServerMailbox
      parameters:
      - description: Inbox email address to create
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImapServerMailboxResult'
          description: OK
      summary: Create a new mailbox if possible
      tags:
      - ImapController
  /imap/server/list:
    post:
      operationId: imapServerList
      parameters:
      - description: Inbox ID to list
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImapServerListOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImapServerListResult'
          description: OK
      summary: List messages in an inbox
      tags:
      - ImapController
  /imap/server/get:
    post:
      operationId: imapServerGet
      parameters:
      - description: Email ID to get
        explode: true
        in: query
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: Inbox ID to search
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImapServerGetResult'
          description: OK
      summary: Get a message by email ID
      tags:
      - ImapController
  /imap/server/fetch:
    post:
      operationId: imapServerFetch
      parameters:
      - description: Inbox ID to search
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: seqNum
        required: true
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImapServerFetchResult'
          description: OK
      summary: Fetch message in an inbox
      tags:
      - ImapController
  /guest-portal:
    get:
      description: Get portals
      operationId: getGuestPortals
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/GuestPortalDto'
                type: array
          description: OK
      summary: Get guest portals
      tags:
      - GuestPortalController
    post:
      description: Create a guest login page for customers or clients to access assigned
        email addresses
      operationId: createGuestPortal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePortalOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GuestPortalDto'
          description: OK
      summary: Create a portal page for your customers or clients to log into email
        accounts and view emails.
      tags:
      - GuestPortalController
  /guest-portal/{portalId}/user:
    get:
      description: Get customers for a portal
      operationId: getGuestPortalUsers
      parameters:
      - explode: false
        in: path
        name: portalId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional search term
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageGuestPortalUsers'
          description: OK
      summary: Get all guest users for portal
      tags:
      - GuestPortalController
    post:
      description: Add customer to portal
      operationId: createGuestPortalUser
      parameters:
      - explode: false
        in: path
        name: portalId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePortalUserOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GuestPortalUserCreateDto'
          description: OK
      summary: Create a portal guest user
      tags:
      - GuestPortalController
  /groups:
    get:
      operationId: getGroups
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/GroupProjection'
                type: array
          description: OK
      summary: Get all groups
      tags:
      - GroupController
    post:
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GroupDto'
          description: Created
      summary: Create a group
      tags:
      - GroupController
  /forwarders/{id}/test:
    post:
      description: Test an inbox forwarder
      operationId: testInboxForwarder
      parameters:
      - description: ID of inbox forwarder
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InboxForwarderTestOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxForwarderTestResult'
          description: OK
      summary: Test an inbox forwarder
      tags:
      - InboxForwarderController
  /forms:
    post:
      description: "This endpoint allows you to submit HTML forms and receive the\
        \ field values and files via email. \n\n#### Parameters\nThe endpoint looks\
        \ for special meta parameters in the form fields OR in the URL request parameters.\
        \ The meta parameters can be used to specify the behaviour of the email. \n\
        \nYou must provide at-least a `_to` email address to tell the endpoint where\
        \ the form should be emailed. These can be submitted as hidden HTML input\
        \ fields with the corresponding `name` attributes or as URL query parameters\
        \ such as `?_to=test@example.com`\n\nThe endpoint takes all other form fields\
        \ that are named and includes them in the message body of the email. Files\
        \ are sent as attachments.\n\n#### Submitting\nThis endpoint accepts form\
        \ submission via POST method. It accepts `application/x-www-form-urlencoded`,\
        \ and `multipart/form-data` content-types.\n\n#### HTML Example\n```html\n\
        <form \n  action=\"https://csharp.api.mailslurp.com/forms\"\n  method=\"post\"\
        \n>\n  <input name=\"_to\" type=\"hidden\" value=\"test@example.com\"/>\n\
        \  <textarea name=\"feedback\"></textarea>\n  <button type=\"submit\">Submit</button>\n\
        </form>\n```\n\n#### URL Example\n```html\n<form \n  action=\"https://csharp.api.mailslurp.com/forms?_to=test@example.com\"\
        \n  method=\"post\"\n>\n  <textarea name=\"feedback\"></textarea>\n  <button\
        \ type=\"submit\">Submit</button>\n</form>\n```\n\n\n\nThe email address is\
        \ specified by a `_to` field OR is extracted from an email alias specified\
        \ by a `_toAlias` field (see the alias controller for more information). \n\
        Endpoint accepts . \nYou can specify a content type in HTML forms using the\
        \ `enctype` attribute, for instance: `<form enctype=\"multipart/form-data\"\
        >`.\n\n"
      operationId: submitForm
      parameters:
      - description: The email address that submitted form should be sent to.
        example: test@example.com
        explode: true
        in: query
        name: _to
        required: false
        schema:
          type: string
        style: form
      - description: Optional subject of the email that will be sent.
        example: My form submission
        explode: true
        in: query
        name: _subject
        required: false
        schema:
          type: string
        style: form
      - description: Optional URL to redirect form submitter to after submission.
          If not present user will see a success message.
        example: https://mysite.com/form-success
        explode: true
        in: query
        name: _redirectTo
        required: false
        schema:
          type: string
        style: form
      - description: Email address of the submitting user. Include this if you wish
          to record the submitters email address and reply to it later.
        example: test@example.com
        explode: true
        in: query
        name: _emailAddress
        required: false
        schema:
          type: string
        style: form
      - description: Optional success message to display if no _redirectTo present.
        example: Thanks for submitting
        explode: true
        in: query
        name: _successMessage
        required: false
        schema:
          type: string
        style: form
      - description: Optional but recommended field that catches spammers out. Include
          as a hidden form field but LEAVE EMPTY. Spam-bots will usually fill every
          field. If the _spamCheck field is filled the form submission will be ignored.
        explode: true
        in: query
        name: _spamCheck
        required: false
        schema:
          type: string
        style: form
      - description: All other parameters or fields will be accepted and attached
          to the sent email. This includes files and any HTML form field with a name.
          These fields will become the body of the email that is sent.
        explode: true
        in: query
        name: otherParameters
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: string
          description: OK
      summary: Submit a form to be parsed and sent as an email to an address determined
        by the form fields
      tags:
      - FormController
  /export:
    get:
      operationId: exportEntities
      parameters:
      - explode: true
        in: query
        name: exportType
        required: true
        schema:
          enum:
          - INBOXES
          - CONTACTS
          - ATTACHMENTS
          - EMAILS
          type: string
        style: form
      - explode: true
        in: query
        name: apiKey
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: outputFormat
        required: true
        schema:
          enum:
          - CSV_DEFAULT
          - CSV_EXCEL
          type: string
        style: form
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: listSeparatorToken
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: excludePreviouslyExported
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: createdEarliestTime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - explode: true
        in: query
        name: createdOldestTime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: byte
                type: string
          description: OK
      summary: Export inboxes link callable via browser
      tags:
      - ExportController
    post:
      operationId: getExportLink
      parameters:
      - explode: true
        in: query
        name: exportType
        required: true
        schema:
          enum:
          - INBOXES
          - CONTACTS
          - ATTACHMENTS
          - EMAILS
          type: string
        style: form
      - explode: true
        in: query
        name: apiKey
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExportLink'
          description: OK
      summary: Get export link
      tags:
      - ExportController
  /emails:
    delete:
      description: Deletes all emails in your account. Be careful as emails cannot
        be recovered
      operationId: deleteAllEmails
      responses:
        "204":
          description: No Content
      summary: Delete all emails in all inboxes.
      tags:
      - EmailController
    get:
      description: By default returns all emails across all inboxes sorted by ascending
        created at date. Responses are paginated. You can restrict results to a list
        of inbox IDs. You can also filter out read messages
      operationId: getEmailsPaginated
      parameters:
      - description: Optional inbox ids to filter by. Can be repeated. By default
          will use all inboxes belonging to your account.
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: Optional page index in email list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in email list pagination. Maximum size is
          100. Use page index and sort to page through larger results
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional filter for unread emails only. All emails are considered
          unread until they are viewed in the dashboard or requested directly
        explode: true
        in: query
        name: unreadOnly
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "Optional search filter. Searches email recipients, sender, subject,\
          \ email address and ID. Does not search email body"
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Optional filter emails received after given date time. If unset
          will use time 24hours prior to now.
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter emails received before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Sync connectors
        explode: true
        in: query
        name: syncConnectors
        required: false
        schema:
          type: boolean
        style: form
      - description: Optional plus address ID filter
        explode: true
        in: query
        name: plusAddressId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional filter emails that are favourited
        explode: true
        in: query
        name: favourited
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEmailProjection'
          description: OK
      summary: Get all emails in all inboxes in paginated form. Email API list all.
      tags:
      - EmailController
    post:
      description: Alias for `InboxController.sendEmail` method - see original method
        for full details. Sends an email from a given inbox that you have created.
        If no inbox is supplied a random inbox will be created for you and used to
        send the email.
      operationId: sendEmailSourceOptional
      parameters:
      - description: ID of the inbox you want to send the email from
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Use domain pool. Optionally create inbox to send from using the
          mailslurp domain pool.
        explode: true
        in: query
        name: useDomainPool
        required: false
        schema:
          type: boolean
        style: form
      - description: Optionally create inbox to send from that is a virtual inbox
          and won't send to external addresses
        explode: true
        in: query
        name: virtualSend
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailOptions'
        required: true
      responses:
        "201":
          description: Created
      summary: Send email
      tags:
      - EmailController
  /emails/{emailId}/validate:
    post:
      description: Validate the HTML content of email if HTML is found. Considered
        valid if no HTML is present.
      operationId: validateEmail
      parameters:
      - description: ID of email
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ValidationDto'
          description: Created
      summary: Validate email HTML contents
      tags:
      - EmailController
  /emails/{emailId}/screenshot/binary:
    post:
      description: Returns binary octet-stream of screenshot of the given email
      operationId: getEmailScreenshotAsBinary
      parameters:
      - explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetEmailScreenshotOptions'
        required: true
      responses:
        "200":
          description: OK
      summary: Take a screenshot of an email in a browser
      tags:
      - EmailController
  /emails/{emailId}/screenshot/base64:
    post:
      description: Capture image of email screenshot and return as base64 encoded
        string. Useful for embedding in HTML. Be careful as this may contain sensitive
        information.
      operationId: getEmailScreenshotAsBase64
      parameters:
      - explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetEmailScreenshotOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailScreenshotResult'
          description: OK
      summary: Take a screenshot of an email in a browser and return base64 encoded
        string
      tags:
      - EmailController
  /emails/{emailId}/imap-flag-operation:
    post:
      description: Apply RFC3501 section-2.3.2 IMAP flag operations on an email
      operationId: applyImapFlagOperation
      parameters:
      - explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImapFlagOperationOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailPreview'
          description: OK
      summary: Set IMAP flags associated with a message. Only supports '\Seen' flag.
      tags:
      - EmailController
  /emails/{emailId}/forward:
    post:
      description: Forward an existing email to new recipients. The sender of the
        email will be the inbox that received the email you are forwarding. You can
        override the sender with the `from` option. Note you must have access to the
        from address in MailSlurp to use the override. For more control consider fetching
        the email and sending it a new using the send email endpoints.
      operationId: forwardEmail
      parameters:
      - description: ID of email
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForwardEmailOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SentEmailDto'
          description: Created
      summary: Forward email to recipients
      tags:
      - EmailController
  /emails/{emailId}/contentMatch:
    post:
      description: "Return the matches for a given Java style regex pattern. Do not\
        \ include the typical `/` at start or end of regex in some languages. Given\
        \ an example `your code is: 12345` the pattern to extract match looks like\
        \ `code is: (\\d{6})`. This will return an array of matches with the first\
        \ matching the entire pattern and the subsequent matching the groups: `['code\
        \ is: 123456', '123456']` See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html\
        \ for more information of available patterns. "
      operationId: getEmailContentMatch
      parameters:
      - description: ID of email to match against
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentMatchOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailContentMatchResult'
          description: OK
      summary: Get email content regex pattern match results. Runs regex against email
        body and returns match groups.
      tags:
      - EmailController
  /emails/{emailId}/check-email-body:
    post:
      description: "Find dead links, broken images, and spelling mistakes in email\
        \ body. Will call included links via HTTP so do not invoke if your links are\
        \ sensitive or stateful. Any resource that returns a 4xx or 5xx response or\
        \ is not reachable via HEAD or GET HTTP operations will be considered unhealthy."
      operationId: checkEmailBody
      parameters:
      - explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CheckEmailBodyResults'
          description: OK
      summary: "Detect broken links, spelling, and images in email content"
      tags:
      - EmailController
  /emails/{emailId}/check-email-body-feature-support:
    post:
      description: Detect HTML and CSS features inside an email body and return a
        report of email client support across different platforms and versions.
      operationId: checkEmailBodyFeatureSupport
      parameters:
      - explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CheckEmailBodyFeatureSupportResults'
          description: OK
      summary: Show which mail clients support the HTML and CSS features used in an
        email body.
      tags:
      - EmailController
  /emails/search:
    post:
      description: "Search emails by given criteria return matches in paginated format.\
        \ Searches against email recipients, sender, subject, email address and ID.\
        \ Does not search email body"
      operationId: searchEmails
      parameters:
      - description: Sync connectors
        explode: true
        in: query
        name: syncConnectors
        required: false
        schema:
          type: boolean
        style: form
      - description: Search only favourited emails
        explode: true
        in: query
        name: favourited
        required: false
        schema:
          type: boolean
        style: form
      - description: Optional plus address ID filter
        explode: true
        in: query
        name: plusAddressId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchEmailsOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEmailProjection'
          description: OK
      summary: Get all emails by search criteria. Return in paginated form.
      tags:
      - EmailController
  /emails/check-email-client-support:
    post:
      description: Evaluate the features used in an email body and return a report
        of email client support across different platforms and versions.
      operationId: checkEmailClientSupport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckEmailClientSupportOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CheckEmailClientSupportResults'
          description: OK
      summary: Show which email programs and devices support the features used in
        an email body.
      tags:
      - EmailController
  /emails/can-send:
    post:
      description: Can user send email to given recipient or is the recipient blocked
      operationId: canSend
      parameters:
      - description: ID of the inbox you want to send the email from
        explode: true
        in: query
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CanSendEmailResults'
          description: OK
      summary: Check if email can be sent and options are valid.
      tags:
      - EmailController
  /email-verification/email-address-list:
    post:
      description: Verify a list of email addresses is valid and can be contacted.
      operationId: validateEmailAddressList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateEmailAddressListOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ValidateEmailAddressListResult'
          description: OK
      summary: Validate a list of email addresses. Per unit billing. See your plan
        for pricing.
      tags:
      - EmailVerificationController
  /domains:
    get:
      description: List all custom domains you have created
      operationId: getDomains
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/DomainPreview'
                type: array
          description: OK
      summary: Get domains
      tags:
      - DomainController
    post:
      description: Link a domain that you own with MailSlurp so you can create email
        addresses using it. Endpoint returns DNS records used for validation. You
        must add these verification records to your host provider's DNS setup to verify
        the domain.
      operationId: createDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDomainOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DomainDto'
          description: Created
      summary: Create Domain
      tags:
      - DomainController
  /domains/{id}/wildcard:
    get:
      description: Get the catch all inbox for a domain for missed emails
      operationId: getDomainWildcardCatchAllInbox
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxDto'
          description: OK
      summary: Get catch all wild card inbox for domain
      tags:
      - DomainController
    post:
      description: Add a catch all inbox to a domain so that any emails sent to it
        that cannot be matched will be sent to the catch all inbox generated
      operationId: addDomainWildcardCatchAll
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DomainDto'
          description: OK
      summary: Add catch all wild card inbox to domain
      tags:
      - DomainController
  /createInbox:
    post:
      description: Returns an Inbox with an `id` and an `emailAddress`
      operationId: createRandomInbox
      parameters:
      - explode: true
        in: query
        name: allowTeamAccess
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: useDomainPool
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: expiresAt
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - explode: true
        in: query
        name: expiresIn
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: emailAddress
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: inboxType
        required: false
        schema:
          description: Type of inbox. HTTP inboxes are faster and better for most
            cases. SMTP inboxes are more suited for public facing inbound messages
            (but cannot send).
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          type: string
        style: form
      - explode: true
        in: query
        name: description
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: favourite
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: virtualInbox
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: useShortAddress
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: domainName
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: domainId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: prefix
        required: false
        schema:
          type: string
        style: form
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxDto'
          description: Created
      summary: Create new random inbox
      tags:
      - CommonActionsController
  /contacts:
    get:
      operationId: getContacts
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ContactProjection'
                type: array
          description: OK
      summary: Get all contacts
      tags:
      - ContactController
    post:
      operationId: createContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContactOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ContactDto'
          description: Created
      summary: Create a contact
      tags:
      - ContactController
  /consent/opt-in/send:
    post:
      description: Send double-opt in consent for an email address
      operationId: sendOptInConsentForEmailAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OptInConsentOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OptInConsentSendResult'
          description: OK
      summary: Send a verification code to a user once they have explicitly submitted
        their email address
      tags:
      - ConsentController
  /connectors:
    delete:
      operationId: deleteAllConnector
      responses:
        "204":
          description: No Content
      summary: Delete all inbox connectors
      tags:
      - ConnectorController
    get:
      description: List inbox connectors that sync external emails to MailSlurp inboxes
      operationId: getConnectors
      parameters:
      - description: Optional page index in connector list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in connector list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageConnector'
          description: OK
      summary: Get inbox connectors
      tags:
      - ConnectorController
    post:
      description: Sync emails between external mailboxes and MailSlurp inboxes
      operationId: createConnector
      parameters:
      - description: Optional inbox ID to associate with the connector
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorDto'
          description: Created
      summary: Create an inbox connector
      tags:
      - ConnectorController
  /connectors/{id}/sync:
    post:
      operationId: syncConnector
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Date to request emails since
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Which folder to sync emails with
        explode: true
        in: query
        name: folder
        required: false
        schema:
          type: string
        style: form
      - description: Enable or disable logging for the sync operation
        explode: true
        in: query
        name: logging
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorSyncRequestResult'
          description: OK
      summary: Sync an inbox connector
      tags:
      - ConnectorController
  /connectors/{id}/sync-settings:
    delete:
      description: Configure automatic pull or emails from external inboxes using
        an interval or schedule
      operationId: deleteConnectorSyncSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Create an inbox connector sync settings
      tags:
      - ConnectorController
    get:
      description: Get sync settings for connection with external inbox
      operationId: getConnectorSyncSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OptionalConnectorSyncSettingsDto'
          description: OK
      summary: Get an inbox connector sync settings
      tags:
      - ConnectorController
    post:
      description: Configure automatic pull or emails from external inboxes using
        an interval or schedule
      operationId: createConnectorSyncSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorSyncSettingsOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorSyncSettingsDto'
          description: Created
      summary: Create an inbox connector sync settings
      tags:
      - ConnectorController
  /connectors/{id}/smtp:
    delete:
      description: Delete SMTP connection for external inbox
      operationId: deleteConnectorSmtpConnection
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete an inbox connector SMTP connection
      tags:
      - ConnectorController
    get:
      description: Get SMTP connection for external inbox
      operationId: getConnectorSmtpConnection
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OptionalConnectorSmtpConnectionDto'
          description: OK
      summary: Get an inbox connector SMTP connection
      tags:
      - ConnectorController
    patch:
      description: Update SMTP connection for external inbox
      operationId: updateConnectorSmtpConnection
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorSmtpConnectionOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorSmtpConnectionDto'
          description: OK
      summary: Update an inbox connector SMTP connection
      tags:
      - ConnectorController
    post:
      description: Allows sending via connector and email is routed to connected inbox
        and sent via SMTP
      operationId: createConnectorSmtpConnection
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorSmtpConnectionOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorSmtpConnectionDto'
          description: Created
      summary: Create an inbox connector SMTP connection
      tags:
      - ConnectorController
  /connectors/{id}/smtp/test:
    post:
      description: Test the SMTP connection for a connector
      operationId: testConnectorSmtpConnection
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorSmtpConnectionOptions'
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorSmtpConnectionTestResult'
          description: OK
      summary: Test an inbox connector SMTP connection
      tags:
      - ConnectorController
  /connectors/{id}/send:
    post:
      operationId: sendEmailFromConnector
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: useFallback
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SentEmailDto'
          description: OK
      summary: Send from an inbox connector
      tags:
      - ConnectorController
  /connectors/{id}/imap:
    delete:
      description: Delete IMAP connection for external inbox
      operationId: deleteConnectorImapConnection
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete an inbox connector IMAP connection
      tags:
      - ConnectorController
    get:
      description: Get IMAP connection for external inbox
      operationId: getConnectorImapConnection
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OptionalConnectorImapConnectionDto'
          description: OK
      summary: Get an inbox connector IMAP connection
      tags:
      - ConnectorController
    patch:
      description: Update IMAP connection for external inbox
      operationId: updateConnectorImapConnection
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorImapConnectionOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorImapConnectionDto'
          description: OK
      summary: Update an inbox connector IMAP connection
      tags:
      - ConnectorController
    post:
      description: Allows the reading of emails in an external mailbox and syncing
        to a MailSlurp inbox
      operationId: createConnectorImapConnection
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorImapConnectionOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorImapConnectionDto'
          description: Created
      summary: Create an inbox connector IMAP connection
      tags:
      - ConnectorController
  /connectors/{id}/imap/test:
    post:
      description: Test the IMAP connection for a connector
      operationId: testConnectorImapConnection
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorImapConnectionOptions'
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorImapConnectionTestResult'
          description: OK
      summary: Test an inbox connector IMAP connection
      tags:
      - ConnectorController
  /connectors/withOptions:
    post:
      description: Sync emails between external mailboxes and MailSlurp inboxes
      operationId: createConnectorWithOptions
      parameters:
      - description: Optional inbox ID to associate with the connector
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorWithOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorDto'
          description: Created
      summary: Create an inbox connector with options
      tags:
      - ConnectorController
  /connectors/connections/smtp/test:
    post:
      description: Test the SMTP connection options for a connector
      operationId: testConnectorSmtpConnectionOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorSmtpConnectionOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorSmtpConnectionTestResult'
          description: OK
      summary: Test an inbox connector SMTP connection options
      tags:
      - ConnectorController
  /connectors/connections/imap/test:
    post:
      description: Test the IMAP connection options for a connector
      operationId: testConnectorImapConnectionOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorImapConnectionOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorImapConnectionTestResult'
          description: OK
      summary: Test an inbox connector IMAP connection options
      tags:
      - ConnectorController
  /bulk/send:
    post:
      operationId: bulkSendEmails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkSendEmailOptions'
        required: true
      responses:
        "201":
          description: Created
      summary: Bulk Send Emails
      tags:
      - BulkActionsController
  /bulk/inboxes:
    delete:
      operationId: bulkDeleteInboxes
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: uuid
                type: string
              type: array
        required: true
      responses:
        "204":
          description: No Content
      summary: Bulk Delete Inboxes
      tags:
      - BulkActionsController
    post:
      operationId: bulkCreateInboxes
      parameters:
      - description: Number of inboxes to be created in bulk
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "201":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/InboxDto'
                type: array
          description: Created
      summary: Bulk create Inboxes (email addresses)
      tags:
      - BulkActionsController
  /bounce/filter-recipients:
    post:
      description: Prevent email sending errors by remove recipients who have resulted
        in past email bounces or complaints
      operationId: filterBouncedRecipient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterBouncedRecipientsOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FilterBouncedRecipientsResult'
          description: OK
      summary: Filter a list of email recipients and remove those who have bounced
      tags:
      - BounceController
  /attachments:
    delete:
      description: Delete all attachments
      operationId: deleteAllAttachments
      responses:
        "204":
          description: No Content
      summary: Delete all attachments
      tags:
      - AttachmentController
    get:
      description: Get all attachments in paginated response. Each entity contains
        meta data for the attachment such as `name` and `content-type`. Use the `attachmentId`
        and the download endpoints to get the file contents.
      operationId: getAttachments
      parameters:
      - description: Optional page index for list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size for list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional file name and content type search filter
        explode: true
        in: query
        name: fileNameFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional inboxId to filter attachments by
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional emailId to filter attachments by
        explode: true
        in: query
        name: emailId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional sentEmailId to filter attachments by
        explode: true
        in: query
        name: sentEmailId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAttachmentEntity'
          description: OK
      summary: Get email attachments
      tags:
      - AttachmentController
    post:
      operationId: uploadAttachment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadAttachmentOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Created
      summary: Upload an attachment for sending using base64 file encoding. Returns
        an array whose first element is the ID of the uploaded attachment.
      tags:
      - AttachmentController
  /attachments/multipart:
    post:
      operationId: uploadMultipartForm
      parameters:
      - description: Optional content ID of attachment
        explode: true
        in: query
        name: contentId
        required: false
        schema:
          type: string
        style: form
      - description: Optional content type of attachment
        explode: true
        in: query
        name: contentType
        required: false
        schema:
          type: string
        style: form
      - description: Optional name of file
        explode: true
        in: query
        name: filename
        required: false
        schema:
          type: string
        style: form
      - description: Optional content type header of attachment
        explode: true
        in: query
        name: contentTypeHeader
        required: false
        schema:
          type: string
        style: form
      - description: Optional filename header of attachment
        explode: true
        in: query
        name: x-filename
        required: false
        schema:
          type: string
        style: form
      - description: Optional raw filename header of attachment that will be converted
          to punycode
        explode: true
        in: query
        name: x-filename-raw
        required: false
        schema:
          type: string
        style: form
      - description: Optional content size of attachment
        explode: true
        in: query
        name: x-filesize
        required: false
        schema:
          format: int64
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uploadMultipartForm_request'
      responses:
        "201":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Created
      summary: Upload an attachment for sending using a Multipart Form request. Returns
        an array whose first element is the ID of the uploaded attachment.
      tags:
      - AttachmentController
  /attachments/bytes:
    post:
      operationId: uploadAttachmentBytes
      parameters:
      - explode: false
        in: header
        name: contentType
        required: false
        schema:
          type: string
        style: simple
      - description: Optional contentType for file. For instance `application/pdf`
        explode: true
        in: query
        name: contentType
        required: false
        schema:
          type: string
        style: form
      - description: Optional content ID (CID) to save upload with
        explode: true
        in: query
        name: contentId
        required: false
        schema:
          type: string
        style: form
      - description: Optional filename to save upload with
        explode: true
        in: query
        name: filename
        required: false
        schema:
          type: string
        style: form
      - description: Optional byte length to save upload with
        explode: true
        in: query
        name: fileSize
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - explode: false
        in: header
        name: filename
        required: false
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Created
      summary: Upload an attachment for sending using file byte stream input octet
        stream. Returns an array whose first element is the ID of the uploaded attachment.
      tags:
      - AttachmentController
  /aliases:
    get:
      description: Get all email aliases in paginated form
      operationId: getAliases
      parameters:
      - description: Optional search term
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Optional page index in alias list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in alias list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAlias'
          description: OK
      summary: Get all email aliases you have created
      tags:
      - AliasController
    post:
      description: Email aliases use a MailSlurp randomly generated email address
        (or a custom domain inbox that you provide) to mask or proxy a real email
        address. Emails sent to the alias address will be forwarded to the hidden
        email address it was created for. If you want to send a reply use the threadId
        attached
      operationId: createAlias
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAliasOptions'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AliasDto'
          description: Created
      summary: Create an email alias. Must be verified by clicking link inside verification
        email that will be sent to the address. Once verified the alias will be active.
      tags:
      - AliasController
  /aliases/{aliasId}/emails:
    get:
      description: Get paginated emails for an alias by ID
      operationId: getAliasEmails
      parameters:
      - explode: false
        in: path
        name: aliasId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index alias email list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size alias email list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional filter by sent after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter by sent before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEmailProjection'
          description: OK
      summary: Get emails for an alias
      tags:
      - AliasController
    post:
      description: Send an email from an alias. Replies to the email will be forwarded
        to the alias masked email address
      operationId: sendAliasEmail
      parameters:
      - explode: false
        in: path
        name: aliasId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SentEmailDto'
          description: OK
      summary: Send an email from an alias inbox
      tags:
      - AliasController
  /ai/transformer:
    delete:
      description: Delete all AI transformers and schemas
      operationId: deleteTransformers
      responses:
        "204":
          description: No Content
      summary: Delete all transformers
      tags:
      - AIController
    get:
      description: List all AI transforms
      operationId: createTransformer
      parameters:
      - explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in SMS list pagination. Maximum size is 100.
          Use page index and sort to page through larger results
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - explode: true
        in: query
        name: options
        required: true
        schema:
          $ref: '#/components/schemas/AITranformCreateOptions'
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAITransformProjection'
          description: OK
      summary: List transformers
      tags:
      - AIController
    post:
      description: Save an AI transform instructions and schema for use with webhooks
        and automations
      operationId: createTransformer_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AITranformCreateOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AITransformDto'
          description: OK
      summary: Create a transformer for reuse in automations
      tags:
      - AIController
  /ai/transformer/mappings:
    get:
      description: Get AI transformer mappings to other entities
      operationId: getTransformerMappings
      parameters:
      - explode: true
        in: query
        name: aiTransformId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: entityId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: entityType
        required: false
        schema:
          enum:
          - INBOX
          - PHONE
          type: string
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size. Maximum size is 100. Use page index and sort
          to page through larger results
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAITransformMappingProjection'
          description: OK
      summary: Get transformer mappings
      tags:
      - AIController
    post:
      description: Create AI transformer mappings to other entities
      operationId: createTransformerMappings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAITransformerMappingOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AITransformMappingDto'
          description: OK
      summary: Create transformer mapping
      tags:
      - AIController
  /ai/structured-content/validate:
    post:
      description: Check if a schema is valid and can be used to extract data using
        AI
      operationId: validateStructuredOutputSchema
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructuredOutputSchema'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StructuredOutputSchemaValidation'
          description: OK
      summary: Validate structured content schema
      tags:
      - AIController
  /ai/structured-content/sms:
    post:
      description: Use output schemas to extract data from an SMS using AI
      operationId: generateStructuredContentFromSms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateStructuredContentSmsOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StructuredContentResultDto'
          description: OK
      summary: Generate structured content for a TXT message
      tags:
      - AIController
  /ai/structured-content/email:
    post:
      description: Use output schemas to extract data from an email using AI
      operationId: generateStructuredContentFromEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateStructuredContentEmailOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StructuredContentResultDto'
          description: OK
      summary: Generate structured content for an email
      tags:
      - AIController
  /ai/structured-content/attachment:
    post:
      description: Use output schemas to extract data from an attachment using AI
      operationId: generateStructuredContentFromAttachment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateStructuredContentAttachmentOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StructuredContentResultDto'
          description: OK
      summary: Generate structured content for an attachment
      tags:
      - AIController
  /webhooks/{webhookId}:
    delete:
      operationId: deleteWebhookById
      parameters:
      - explode: false
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Delete a webhook
      tags:
      - WebhookController
    get:
      operationId: getWebhook
      parameters:
      - explode: false
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookDto'
          description: OK
      summary: Get a webhook
      tags:
      - WebhookController
    patch:
      operationId: updateWebhook
      parameters:
      - explode: false
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: phoneNumberId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: overrideAuth
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookOptions'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookDto'
          description: OK
      summary: Update a webhook
      tags:
      - WebhookController
  /inboxes/smtp-access:
    get:
      description: Get SMTP access usernames and passwords
      operationId: getSmtpAccess
      parameters:
      - description: Inbox ID
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SmtpAccessDetails'
          description: OK
      tags:
      - InboxController
    patch:
      description: Update SMTP access usernames and passwords
      operationId: updateSmtpAccess
      parameters:
      - description: Inbox ID
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSmtpAccessOptions'
        required: true
      responses:
        "204":
          description: No Content
      tags:
      - InboxController
  /inboxes/imap-access:
    get:
      description: Get IMAP access usernames and passwords
      operationId: getImapAccess
      parameters:
      - description: Inbox ID
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImapAccessDetails'
          description: OK
      tags:
      - InboxController
    patch:
      description: Update IMAP access usernames and passwords
      operationId: updateImapAccess
      parameters:
      - description: Inbox ID
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateImapAccessOptions'
        required: true
      responses:
        "204":
          description: No Content
      tags:
      - InboxController
  /emails/{emailId}/read:
    patch:
      description: Marks an email as read or unread. Pass boolean read flag to set
        value. This is useful if you want to read an email but keep it as unread
      operationId: markAsRead
      parameters:
      - explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: What value to assign to email read property. Default true.
        explode: true
        in: query
        name: read
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailPreview'
          description: OK
      summary: Mark an email as read or unread
      tags:
      - EmailController
  /emails/read:
    patch:
      description: Marks all emails as read or unread. Pass boolean read flag to set
        value. This is useful if you want to read an email but keep it as unread
      operationId: markAllAsRead
      parameters:
      - description: What value to assign to email read property. Default true.
        explode: true
        in: query
        name: read
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: Optional inbox ID filter
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "204":
          description: No Content
      summary: Mark all emails as read or unread
      tags:
      - EmailController
  /webhooks/{webhookId}/wait:
    get:
      operationId: waitForWebhookResults
      parameters:
      - description: ID of webhook to get results for
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Expected result count
        explode: true
        in: query
        name: expectedCount
        required: true
        schema:
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Max time to wait in milliseconds
        explode: true
        in: query
        name: timeout
        required: true
        schema:
          format: int32
          maximum: 300000
          minimum: 1000
          type: integer
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/WebhookResultDto'
                type: array
          description: OK
      summary: Wait for webhook results for a webhook
      tags:
      - WebhookController
  /webhooks/{webhookId}/results:
    get:
      operationId: getWebhookResults
      parameters:
      - description: ID of webhook to get results for
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter for unseen exceptions only
        explode: true
        in: query
        name: unseenOnly
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by result type
        explode: true
        in: query
        name: resultType
        required: false
        schema:
          enum:
          - BAD_RESPONSE
          - EXCEPTION
          - SUCCESS
          - REDRIVEN
          type: string
        style: form
      - description: Filter by event name
        explode: true
        in: query
        name: eventName
        required: false
        schema:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        style: form
      - description: Minimum response status
        explode: true
        in: query
        name: minStatusCode
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Maximum response status
        explode: true
        in: query
        name: maxStatusCode
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Inbox ID
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Sms ID
        explode: true
        in: query
        name: smsId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Attachment ID
        explode: true
        in: query
        name: attachmentId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Email ID
        explode: true
        in: query
        name: emailId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Phone ID
        explode: true
        in: query
        name: phoneId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageWebhookResult'
          description: OK
      summary: Get a webhook results for a webhook
      tags:
      - WebhookController
  /webhooks/{webhookId}/results/count:
    get:
      operationId: getWebhookResultsCount
      parameters:
      - description: ID of webhook to get results for
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CountDto'
          description: OK
      summary: Get a webhook results count for a webhook
      tags:
      - WebhookController
  /webhooks/test:
    get:
      description: Get test webhook payload example. Response content depends on eventName
        passed. Uses `EMAIL_RECEIVED` as default.
      operationId: getTestWebhookPayload
      parameters:
      - explode: true
        in: query
        name: eventName
        required: false
        schema:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AbstractWebhookPayload'
          description: OK
      tags:
      - WebhookController
  /webhooks/test/new-sms-payload:
    get:
      operationId: getTestWebhookPayloadNewSms
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookNewSmsPayload'
          description: OK
      summary: Get webhook test payload for new sms event
      tags:
      - WebhookController
  /webhooks/test/new-email-payload:
    get:
      operationId: getTestWebhookPayloadNewEmail
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookNewEmailPayload'
          description: OK
      summary: Get webhook test payload for new email event
      tags:
      - WebhookController
  /webhooks/test/new-contact-payload:
    get:
      operationId: getTestWebhookPayloadNewContact
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookNewContactPayload'
          description: OK
      summary: Get webhook test payload for new contact event
      tags:
      - WebhookController
  /webhooks/test/new-attachment-payload:
    get:
      operationId: getTestWebhookPayloadNewAttachment
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookNewAttachmentPayload'
          description: OK
      summary: Get webhook test payload for new attachment event
      tags:
      - WebhookController
  /webhooks/test/email-read-payload:
    get:
      description: Get webhook test payload for email opened event
      operationId: getTestWebhookPayloadEmailRead
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookEmailReadPayload'
          description: OK
      tags:
      - WebhookController
  /webhooks/test/email-opened-payload:
    get:
      description: Get webhook test payload for email opened event
      operationId: getTestWebhookPayloadEmailOpened
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookEmailOpenedPayload'
          description: OK
      tags:
      - WebhookController
  /webhooks/test/email-bounce-recipient-payload:
    get:
      description: Get webhook test payload for bounce recipient
      operationId: getTestWebhookPayloadBounceRecipient
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookBounceRecipientPayload'
          description: OK
      tags:
      - WebhookController
  /webhooks/test/email-bounce-payload:
    get:
      description: Get webhook test payload for bounce
      operationId: getTestWebhookPayloadBounce
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookBouncePayload'
          description: OK
      tags:
      - WebhookController
  /webhooks/test/delivery-status-payload:
    get:
      operationId: getTestWebhookPayloadDeliveryStatus
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookDeliveryStatusPayload'
          description: OK
      summary: Get webhook test payload for delivery status event
      tags:
      - WebhookController
  /webhooks/results:
    get:
      operationId: getAllWebhookResults
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter for unseen exceptions only
        explode: true
        in: query
        name: unseenOnly
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by result type
        explode: true
        in: query
        name: resultType
        required: false
        schema:
          enum:
          - BAD_RESPONSE
          - EXCEPTION
          - SUCCESS
          - REDRIVEN
          type: string
        style: form
      - description: Filter by event name
        explode: true
        in: query
        name: eventName
        required: false
        schema:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        style: form
      - description: Minimum response status
        explode: true
        in: query
        name: minStatusCode
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Maximum response status
        explode: true
        in: query
        name: maxStatusCode
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Inbox ID
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Sms ID
        explode: true
        in: query
        name: smsId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Attachment ID
        explode: true
        in: query
        name: attachmentId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Email ID
        explode: true
        in: query
        name: emailId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Phone ID
        explode: true
        in: query
        name: phoneId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageWebhookResult'
          description: OK
      summary: Get results for all webhooks
      tags:
      - WebhookController
  /webhooks/results/{webhookResultId}:
    get:
      operationId: getWebhookResult
      parameters:
      - description: Webhook Result ID
        explode: false
        in: path
        name: webhookResultId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebhookResultDto'
          description: OK
      summary: Get a webhook result for a webhook
      tags:
      - WebhookController
  /webhooks/results/unseen-count:
    get:
      operationId: getWebhookResultsUnseenErrorCount
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnseenErrorCountDto'
          description: OK
      summary: Get count of unseen webhook results with error status
      tags:
      - WebhookController
  /webhooks/paginated:
    get:
      description: "List webhooks in paginated form. Allows for page index, page size,\
        \ and sort direction."
      operationId: getAllWebhooks
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          maximum: 9223372036854775807
          minimum: 0
          type: integer
        style: form
      - description: Optional page size for paginated result list.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: DESC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by inboxId
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Filter by phoneId
        explode: true
        in: query
        name: phoneId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by webhook health
        explode: true
        in: query
        name: health
        required: false
        schema:
          enum:
          - HEALTHY
          - UNHEALTHY
          type: string
        style: form
      - description: Optional event type
        explode: true
        in: query
        name: eventType
        required: false
        schema:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        style: form
      - description: Optional url endpoint filter
        explode: true
        in: query
        name: url
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageWebhookProjection'
          description: OK
      summary: List Webhooks Paginated
      tags:
      - WebhookController
  /webhooks/endpoints:
    get:
      description: "List webhooks URL in paginated form. Allows for page index, page\
        \ size, and sort direction."
      operationId: getAllWebhookEndpoints
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          maximum: 9223372036854775807
          minimum: 0
          type: integer
        style: form
      - description: Optional page size for paginated result list.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: DESC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by inboxId
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Filter by phoneId
        explode: true
        in: query
        name: phoneId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by webhook health
        explode: true
        in: query
        name: health
        required: false
        schema:
          enum:
          - HEALTHY
          - UNHEALTHY
          type: string
        style: form
      - description: Optional event type
        explode: true
        in: query
        name: eventType
        required: false
        schema:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageWebhookEndpointProjection'
          description: OK
      summary: List Webhooks endpoints Paginated
      tags:
      - WebhookController
  /webhooks/account/paginated:
    get:
      description: "List account webhooks in paginated form. Allows for page index,\
        \ page size, and sort direction."
      operationId: getAllAccountWebhooks
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          maximum: 9223372036854775807
          minimum: 0
          type: integer
        style: form
      - description: Optional page size for paginated result list.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: DESC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional event type
        explode: true
        in: query
        name: eventType
        required: false
        schema:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        style: form
      - description: Filter by webhook health
        explode: true
        in: query
        name: health
        required: false
        schema:
          enum:
          - HEALTHY
          - UNHEALTHY
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageWebhookProjection'
          description: OK
      summary: List account webhooks Paginated
      tags:
      - WebhookController
  /waitForNthEmail:
    get:
      description: If nth email is already present in inbox then return it. If not
        hold the connection open until timeout expires or the nth email is received
        and returned.
      operationId: waitForNthEmail
      parameters:
      - description: Id of the inbox you are fetching emails from
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Zero based index of the email to wait for. If an inbox has 1
          email already and you want to wait for the 2nd email pass index=1
        explode: true
        in: query
        name: index
        required: false
        schema:
          default: 0
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
        style: form
      - description: Max milliseconds to wait for the nth email if not already present
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Optional filter for unread only
        explode: true
        in: query
        name: unreadOnly
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Filter for emails that were received after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter for emails that were received before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Sort direction
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Max milliseconds delay between calls
        explode: true
        in: query
        name: delay
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Email'
          description: OK
      summary: Wait for or fetch the email with a given index in the inbox specified.
        If index doesn't exist waits for it to exist or timeout to occur.
      tags:
      - WaitForController
  /waitForLatestEmail:
    get:
      description: Will return either the last received email or wait for an email
        to arrive and return that. If you need to wait for an email for a non-empty
        inbox set `unreadOnly=true` or see the other receive methods such as `waitForNthEmail`
        or `waitForEmailCount`.
      operationId: waitForLatestEmail
      parameters:
      - description: Id of the inbox we are fetching emails from
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Max milliseconds to wait
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Optional filter for unread only.
        explode: true
        in: query
        name: unreadOnly
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Filter for emails that were before after the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter for emails that were received after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Sort direction
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Max milliseconds delay between calls
        explode: true
        in: query
        name: delay
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Email'
          description: OK
      summary: Fetch inbox's latest email or if empty wait for an email to arrive
      tags:
      - WaitForController
  /waitForEmailCount:
    get:
      description: If inbox contains count or more emails at time of request then
        return count worth of emails. If not wait until the count is reached and return
        those or return an error if timeout is exceeded.
      operationId: waitForEmailCount
      parameters:
      - description: Id of the inbox we are fetching emails from
        explode: true
        in: query
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: Number of emails to wait for. Must be greater that 1
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: Max milliseconds to wait
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Optional filter for unread only
        explode: true
        in: query
        name: unreadOnly
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Filter for emails that were received before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter for emails that were received after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Sort direction
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Max milliseconds delay between calls
        explode: true
        in: query
        name: delay
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/EmailPreview'
                type: array
          description: OK
      summary: Wait for and return count number of emails. Hold connection until inbox
        count matches expected or timeout occurs
      tags:
      - WaitForController
  /user/info:
    get:
      description: Get account information for your user
      operationId: getUserInfo
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserInfoDto'
          description: OK
      tags:
      - UserController
  /user/favorites:
    get:
      operationId: getEntityFavorites
      parameters:
      - description: Optional page index
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: DESC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional type filter
        explode: true
        in: query
        name: filter
        required: false
        schema:
          enum:
          - INBOX
          - EMAIL
          - ATTACHMENT
          - PHONE
          - SMS
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEntityFavouriteItems'
          description: OK
      tags:
      - UserController
  /user/events:
    get:
      operationId: getEntityEvents
      parameters:
      - description: Optional page index
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: DESC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional inbox ID
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional email ID
        explode: true
        in: query
        name: emailId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional phone ID
        explode: true
        in: query
        name: phoneId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional SMS ID
        explode: true
        in: query
        name: smsId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional attachment ID
        explode: true
        in: query
        name: attachmentId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional type filter
        explode: true
        in: query
        name: filter
        required: false
        schema:
          enum:
          - WEBHOOK_EVENT
          - INBOX_FORWARDER_EVENT
          - INBOX_REPLIER_EVENT
          - INBOX_RULESET_EVENT
          - ALIAS_EVENT
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEntityEventItems'
          description: OK
      tags:
      - UserController
  /user/automations:
    get:
      operationId: getEntityAutomations
      parameters:
      - description: Optional page index
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: DESC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional inbox ID
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional phone ID
        explode: true
        in: query
        name: phoneId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional automation type filter
        explode: true
        in: query
        name: filter
        required: false
        schema:
          enum:
          - INBOX_FORWARDER
          - INBOX_REPLIER
          - INBOX_RULESET
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEntityAutomationItems'
          description: OK
      tags:
      - UserController
  /tracking/pixels/{id}:
    get:
      operationId: getTrackingPixel
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TrackingPixelDto'
          description: OK
      summary: Get pixel
      tags:
      - TrackingController
  /tools/fake-emails:
    get:
      description: Get fake emails for an address
      operationId: getFakeEmailsForAddress
      parameters:
      - explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: emailAddress
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/FakeEmailPreview'
                type: array
          description: OK
      summary: Get fake emails for an address
      tags:
      - ToolsController
  /tools/fake-email/html:
    get:
      description: Retrieve the raw content of a fake email by its ID
      operationId: getFakeEmailRaw
      parameters:
      - explode: true
        in: query
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            text/plain;charset=utf-8:
              schema:
                type: string
            text/html;charset=utf-8:
              schema:
                type: string
            text/plain; charset=utf-8:
              schema:
                type: string
            text/html; charset=utf-8:
              schema:
                type: string
          description: OK
      summary: Get raw fake email content
      tags:
      - ToolsController
  /tools/fake-email/byEmailAddress:
    get:
      operationId: getFakeEmailByEmailAddress
      parameters:
      - explode: true
        in: query
        name: emailAddress
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FakeEmailResult'
          description: OK
      tags:
      - ToolsController
  /templates/{templateId}/preview/json:
    get:
      description: Get email template preview with passed template variables in JSON
        format. Pass template variables as query params.
      operationId: getTemplatePreviewJson
      parameters:
      - description: Template ID
        explode: false
        in: path
        name: templateId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TemplatePreview'
          description: OK
      summary: Get template preview Json
      tags:
      - TemplateController
  /templates/{templateId}/preview/html:
    get:
      description: Get email template preview with passed template variables in HTML
        format for browsers. Pass template variables as query params.
      operationId: getTemplatePreviewHtml
      parameters:
      - description: Template ID
        explode: false
        in: path
        name: templateId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            text/html;charset=utf-8:
              schema:
                type: string
            text/html:
              schema:
                type: string
          description: OK
      summary: Get template preview HTML
      tags:
      - TemplateController
  /templates/paginated:
    get:
      description: Get all templates in paginated format
      operationId: getAllTemplates
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTemplateProjection'
          description: OK
      summary: List templates
      tags:
      - TemplateController
  /sms:
    delete:
      description: Delete all SMS messages or all messages for a given phone number
      operationId: deleteSmsMessages
      parameters:
      - explode: true
        in: query
        name: phoneNumberId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "204":
          description: No Content
      summary: Delete all SMS messages
      tags:
      - SmsController
    get:
      operationId: getAllSmsMessages
      parameters:
      - description: Optional receiving phone number to filter SMS messages for
        explode: true
        in: query
        name: phoneNumber
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional page index in SMS list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in SMS list pagination. Maximum size is 100.
          Use page index and sort to page through larger results
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional filter SMSs received after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter SMSs received before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Optionally filter results for favourites only
        explode: true
        in: query
        name: favourite
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageSmsProjection'
          description: OK
      tags:
      - SmsController
  /sms/{smsId}:
    delete:
      description: Delete an SMS message
      operationId: deleteSmsMessage
      parameters:
      - explode: false
        in: path
        name: smsId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete SMS message.
      tags:
      - SmsController
    get:
      description: Returns a SMS summary object with content.
      operationId: getSmsMessage
      parameters:
      - explode: false
        in: path
        name: smsId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SmsDto'
          description: OK
      summary: Get SMS content including body. Expects SMS to exist by ID. For SMS
        that may not have arrived yet use the WaitForController.
      tags:
      - SmsController
  /sms/unreadCount:
    get:
      description: Get number of SMS unread. Unread means has not been viewed in dashboard
        or returned in an email API response
      operationId: getUnreadSmsCount
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnreadCount'
          description: OK
      summary: Get unread SMS count
      tags:
      - SmsController
  /sms/sent:
    delete:
      description: Delete all sent SMS messages or all messages for a given phone
        number
      operationId: deleteSentSmsMessages
      parameters:
      - explode: true
        in: query
        name: phoneNumberId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "204":
          description: No Content
      summary: Delete all sent SMS messages
      tags:
      - SmsController
    get:
      description: By default returns all SMS messages across all phone numbers sorted
        by ascending created at date. Responses are paginated. You can restrict results
        to a list of phone number IDs. You can also filter out read messages
      operationId: getSentSmsMessagesPaginated
      parameters:
      - description: Optional phone number to filter sent SMS messages for
        explode: true
        in: query
        name: phoneNumber
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional page index in SMS list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in SMS list pagination. Maximum size is 100.
          Use page index and sort to page through larger results
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional filter SMSs received after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter SMSs received before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageSentSmsProjection'
          description: OK
      summary: Get all SMS messages in all phone numbers in paginated form. .
      tags:
      - SmsController
  /sms/sent/{sentSmsId}:
    delete:
      description: Delete a sent SMS message
      operationId: deleteSentSmsMessage
      parameters:
      - explode: false
        in: path
        name: sentSmsId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete sent SMS message.
      tags:
      - SmsController
    get:
      description: Returns an SMS summary object with content.
      operationId: getSentSmsMessage
      parameters:
      - explode: false
        in: path
        name: sentSmsId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SentSmsDto'
          description: OK
      summary: Get sent SMS content including body. Expects sent SMS to exist by ID.
      tags:
      - SmsController
  /sms/sent/count:
    get:
      description: Get number of sent SMS
      operationId: getSentSmsCount
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CountDto'
          description: OK
      summary: Get sent SMS count
      tags:
      - SmsController
  /sms/count:
    get:
      description: Get number of SMS
      operationId: getSmsCount
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CountDto'
          description: OK
      summary: Get SMS count
      tags:
      - SmsController
  /sent:
    delete:
      operationId: deleteAllSentEmails
      responses:
        "204":
          description: No Content
      summary: Delete all sent email receipts
      tags:
      - SentEmailsController
    get:
      operationId: getSentEmails
      parameters:
      - description: Optional inboxId to filter sender of sent emails by
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional page index in inbox sent email list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox sent email list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageSentEmailProjection'
          description: OK
      summary: Get all sent emails in paginated form
      tags:
      - SentEmailsController
  /sent/{sentId}/delivery-status:
    get:
      description: Get all sent email delivery statuses
      operationId: getSentDeliveryStatusesBySentId
      parameters:
      - description: ID of the sent email that you want to get the delivery status
          of. Sent email object is returned when sending an email
        explode: false
        in: path
        name: sentId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in delivery status list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in delivery status list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDeliveryStatus'
          description: OK
      tags:
      - SentEmailsController
  /sent/{id}:
    delete:
      operationId: deleteSentEmail
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete sent email receipt
      tags:
      - SentEmailsController
    get:
      operationId: getSentEmail
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SentEmailDto'
          description: OK
      summary: Get sent email receipt
      tags:
      - SentEmailsController
  /sent/{id}/urls:
    get:
      description: Get a list of URLs for sent email content as text/html or raw SMTP
        message for viewing the message in a browser.
      operationId: getSentEmailPreviewURLs
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailPreviewUrls'
          description: OK
      summary: Get sent email URL for viewing in browser or downloading
      tags:
      - SentEmailsController
  /sent/{id}/tracking-pixels:
    get:
      description: Get all tracking pixels for a sent email in paginated form
      operationId: getSentEmailTrackingPixels
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in sent email tracking pixel list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in sent email tracking pixel list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTrackingPixelProjection'
          description: OK
      tags:
      - SentEmailsController
  /sent/{id}/html:
    get:
      operationId: getSentEmailHTMLContent
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: OK
      summary: Get sent email HTML content
      tags:
      - SentEmailsController
  /sent/{emailId}/raw:
    get:
      description: "Returns a raw, unparsed, and unprocessed sent email. If your client\
        \ has issues processing the response it is likely due to the response content-type\
        \ which is text/plain. If you need a JSON response content-type use the getRawSentEmailJson\
        \ endpoint"
      operationId: getRawSentEmailContents
      parameters:
      - description: ID of email
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Get raw sent email string. Returns unparsed raw SMTP message with headers
        and body.
      tags:
      - SentEmailsController
  /sent/{emailId}/raw/json:
    get:
      description: "Returns a raw, unparsed, and unprocessed sent email wrapped in\
        \ a JSON response object for easier handling when compared with the getRawSentEmail\
        \ text/plain response"
      operationId: getRawSentEmailJson
      parameters:
      - description: ID of email
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RawEmailJson'
          description: OK
      summary: Get raw sent email in JSON. Unparsed SMTP message in JSON wrapper format.
      tags:
      - SentEmailsController
  /sent/tracking-pixels:
    get:
      description: Get all sent email tracking pixels in paginated form
      operationId: getAllSentTrackingPixels
      parameters:
      - description: Optional page index in sent email tracking pixel list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in sent email tracking pixel list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTrackingPixelProjection'
          description: OK
      tags:
      - SentEmailsController
  /sent/queue-results:
    get:
      operationId: getSentEmailsWithQueueResults
      parameters:
      - description: Optional page index in inbox sent email list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox sent email list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageSentEmailWithQueueProjection'
          description: OK
      summary: Get results of email sent with queues in paginated form
      tags:
      - SentEmailsController
  /sent/organization:
    get:
      description: Get all sent organization emails in paginated form
      operationId: getSentOrganizationEmails
      parameters:
      - description: Optional inboxId to filter sender of sent emails by
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional page index in sent email list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in sent email list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageSentEmailProjection'
          description: OK
      tags:
      - SentEmailsController
  /sent/delivery-status:
    get:
      description: Get all sent email delivery statuses
      operationId: getSentDeliveryStatuses
      parameters:
      - description: Optional page index in delivery status list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in delivery status list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDeliveryStatus'
          description: OK
      tags:
      - SentEmailsController
  /sent/delivery-status/{deliveryId}:
    get:
      description: Get a sent email delivery status
      operationId: getSentDeliveryStatus
      parameters:
      - explode: false
        in: path
        name: deliveryId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeliveryStatusDto'
          description: OK
      tags:
      - SentEmailsController
  /sent/delivery-status/wait-for:
    get:
      description: Wait for delivery statuses
      operationId: waitForDeliveryStatuses
      parameters:
      - description: Optional sent email ID filter
        explode: true
        in: query
        name: sentId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional inbox ID filter
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional timeout milliseconds
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Zero based index of the delivery status to wait for. If 1 delivery
          status already and you want to wait for the 2nd pass index=1
        explode: true
        in: query
        name: index
        required: false
        schema:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeliveryStatusDto'
          description: OK
      tags:
      - SentEmailsController
  /rulesets/{id}:
    delete:
      description: Delete inbox ruleset
      operationId: deleteInboxRuleset
      parameters:
      - description: ID of inbox ruleset
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete an inbox ruleset
      tags:
      - InboxRulesetController
    get:
      description: Get inbox ruleset
      operationId: getInboxRuleset
      parameters:
      - description: ID of inbox ruleset
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxRulesetDto'
          description: OK
      summary: Get an inbox ruleset
      tags:
      - InboxRulesetController
  /repliers/{id}/events:
    get:
      description: Get inbox ruleset events
      operationId: getInboxReplierEvents
      parameters:
      - description: ID of inbox replier
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in inbox replier event list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox replier event list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInboxReplierEvents'
          description: OK
      summary: Get an inbox replier event list
      tags:
      - InboxReplierController
  /repliers/events:
    get:
      description: Get all inbox ruleset events
      operationId: getAllInboxReplierEvents
      parameters:
      - description: ID of inbox replier
        explode: true
        in: query
        name: inboxReplierId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: ID of inbox
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: ID of email
        explode: true
        in: query
        name: emailId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: ID of sent
        explode: true
        in: query
        name: sentId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional page index in inbox replier event list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox replier event list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInboxReplierEvents'
          description: OK
      summary: Get inbox replier event list
      tags:
      - InboxReplierController
  /phone/plans:
    get:
      description: Get phone number plans
      operationId: getPhonePlans
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/PhonePlanDto'
                type: array
          description: OK
      summary: Get phone plans
      tags:
      - PhoneController
  /phone/plans/availability:
    get:
      operationId: getPhonePlansAvailability
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PhonePlanAvailability'
          description: OK
      summary: Get phone plans availability
      tags:
      - PhoneController
  /phone/numbers:
    get:
      description: List phone numbers for account
      operationId: getPhoneNumbers
      parameters:
      - description: Optional phone country
        explode: true
        in: query
        name: phoneCountry
        required: false
        schema:
          enum:
          - US
          - GB
          - AU
          - CA
          - EE
          - HK
          - PL
          - CH
          - PT
          - NL
          - IL
          - SE
          type: string
        style: form
      - description: Optional page index for list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size for list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Optional phoneIds to include in result
        explode: true
        in: query
        name: include
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: Optionally filter results for favourites only
        explode: true
        in: query
        name: favourite
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePhoneNumberProjection'
          description: OK
      summary: Get phone numbers
      tags:
      - PhoneController
  /phone/numbers/{phoneNumberId}/sms-sent:
    get:
      description: Get sent SMS messages for a phone number
      operationId: getSentSmsByPhoneNumber
      parameters:
      - explode: false
        in: path
        name: phoneNumberId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in SMS list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in SMS list pagination. Maximum size is 100.
          Use page index and sort to page through larger results
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional filter SMSs received after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter SMSs received before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageSentSmsProjection'
          description: OK
      summary: List sent TXT messages for a phone number
      tags:
      - PhoneController
  /phone/numbers/{phoneNumberId}/message-threads:
    get:
      description: List message threads for a phone
      operationId: getPhoneMessageThreads
      parameters:
      - explode: false
        in: path
        name: phoneNumberId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePhoneMessageThreadProjection'
          description: OK
      summary: Get the latest message preview for a thread
      tags:
      - PhoneController
  /phone/numbers/{phoneNumberId}/message-threads/{otherNumber}:
    get:
      description: List message thread messages for a phone message thread
      operationId: getPhoneMessageThreadItems
      parameters:
      - explode: false
        in: path
        name: phoneNumberId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: otherNumber
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePhoneMessageThreadItemProjection'
          description: OK
      summary: Get messages in a phone thread
      tags:
      - PhoneController
  /phone/numbers/{phoneId}/webhooks/paginated:
    get:
      operationId: getPhoneNumberWebhooksPaginated
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - explode: false
        in: path
        name: phoneId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional event type
        explode: true
        in: query
        name: eventType
        required: false
        schema:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by webhook health
        explode: true
        in: query
        name: health
        required: false
        schema:
          enum:
          - HEALTHY
          - UNHEALTHY
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageWebhookProjection'
          description: OK
      summary: Get paginated webhooks for a phone number
      tags:
      - WebhookController
  /phone/numbers/message-threads:
    get:
      description: List all message threads for all phones
      operationId: getAllPhoneMessageThreads
      parameters:
      - explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePhoneMessageThreadProjection'
          description: OK
      summary: Get the latest messages for all phones
      tags:
      - PhoneController
  /phone/numbers/by-phone-number:
    get:
      description: Get a phone number by phone number
      operationId: getPhoneNumberByPhoneNumber
      parameters:
      - explode: true
        in: query
        name: phoneNumber
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PhoneNumberDto'
          description: OK
      summary: Get a phone number by phone number
      tags:
      - PhoneController
  /phone/numbers/by-name:
    get:
      description: Get a phone number by name
      operationId: getPhoneNumberByName
      parameters:
      - explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PhoneNumberDto'
          description: OK
      summary: Get a phone number by name
      tags:
      - PhoneController
  /phone/emergency-addresses/{addressId}:
    delete:
      description: Delete an emergency address
      operationId: deleteEmergencyAddress
      parameters:
      - explode: false
        in: path
        name: addressId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmptyResponseDto'
          description: OK
      summary: Delete an emergency address
      tags:
      - PhoneController
    get:
      description: Fetch an emergency address by ID
      operationId: getEmergencyAddress
      parameters:
      - explode: false
        in: path
        name: addressId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmergencyAddress'
          description: OK
      summary: Get an emergency address
      tags:
      - PhoneController
  /missed-emails:
    get:
      operationId: getAllMissedEmails
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional inbox ID filter
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageMissedEmailProjection'
          description: OK
      summary: Get all MissedEmails in paginated format
      tags:
      - MissedEmailController
  /missed-emails/{missedEmailId}:
    get:
      description: List emails that were missed due to plan limits.
      operationId: getMissedEmail
      parameters:
      - explode: false
        in: path
        name: missedEmailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MissedEmailDto'
          description: OK
      summary: Get MissedEmail
      tags:
      - MissedEmailController
  /missed-emails/waitForNthMissedEmail:
    get:
      description: Wait for 0 based index missed email
      operationId: waitForNthMissedEmail
      parameters:
      - description: Optional inbox ID filter
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional timeout milliseconds
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Zero based index of the email to wait for. If 1 missed email
          already and you want to wait for the 2nd email pass index=1
        explode: true
        in: query
        name: index
        required: true
        schema:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MissedEmailDto'
          description: OK
      summary: Wait for Nth missed email
      tags:
      - MissedEmailController
  /missed-emails/unknown:
    get:
      description: Unknown missed emails are emails that were sent to MailSlurp but
        could not be assigned to an existing inbox.
      operationId: getAllUnknownMissedEmails
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional inbox ID filter
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageUnknownMissedEmailProjection'
          description: OK
      summary: Get all unknown missed emails in paginated format
      tags:
      - MissedEmailController
  /inboxes/{inboxId}/webhooks/paginated:
    get:
      operationId: getInboxWebhooksPaginated
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by webhook health
        explode: true
        in: query
        name: health
        required: false
        schema:
          enum:
          - HEALTHY
          - UNHEALTHY
          type: string
        style: form
      - description: Optional event type
        explode: true
        in: query
        name: eventType
        required: false
        schema:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageWebhookProjection'
          description: OK
      summary: Get paginated webhooks for an Inbox
      tags:
      - WebhookController
  /inboxes/{inboxId}/tracking-pixels:
    get:
      description: List all tracking pixels sent from an inbox
      operationId: listInboxTrackingPixels
      parameters:
      - explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in inbox tracking pixel list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox tracking pixel list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Optional filter by created after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter by created before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTrackingPixelProjection'
          description: OK
      summary: List inbox tracking pixels
      tags:
      - InboxController
  /inboxes/{inboxId}/sent:
    get:
      deprecated: true
      description: Returns an inbox's sent email receipts. Call individual sent email
        endpoints for more details. Note for privacy reasons the full body of sent
        emails is never stored. An MD5 hash hex is available for comparison instead.
      operationId: getInboxSentEmails
      parameters:
      - explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in inbox sent email list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox sent email list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional sent email search
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Optional filter by sent after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter by sent before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageSentEmailProjection'
          description: OK
      summary: Get Inbox Sent Emails
      tags:
      - InboxController
  /inboxes/{inboxId}/sent/count:
    get:
      operationId: getInboxSentCount
      parameters:
      - description: Id of inbox that emails were sent from
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CountDto'
          description: OK
      summary: Get sent email count in inbox
      tags:
      - InboxController
  /inboxes/{inboxId}/scheduled-jobs:
    get:
      description: Schedule sending of emails using scheduled jobs.
      operationId: getScheduledJobsByInboxId
      parameters:
      - explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in scheduled job list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in scheduled job list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageScheduledJobs'
          description: OK
      summary: Get all scheduled email sending jobs for the inbox
      tags:
      - InboxController
  /inboxes/{inboxId}/plus-addresses:
    get:
      description: Returns paginated list of all plus alias addresses found for an
        inbox based on received emails that used the inbox address with a +xyz alias.
      operationId: getInboxPlusAddresses
      parameters:
      - description: Optional page index in inbox tracking pixel list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox tracking pixel list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: ID of the inbox you want to send the email from
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePlusAddressProjection'
          description: OK
      summary: Get sub address plus address aliases for an inbox
      tags:
      - InboxController
  /inboxes/{inboxId}/plus-addresses/{plusAddressId}:
    get:
      description: Returns a plus address object based on emails that used the inbox
        address with a +xyz alias.
      operationId: getInboxPlusAddress
      parameters:
      - description: ID of the plus address you want to fetch
        explode: false
        in: path
        name: plusAddressId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: ID of the inbox you want to fetch
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PlusAddressDto'
          description: OK
      summary: Get sub address plus address for an inbox
      tags:
      - InboxController
  /inboxes/{inboxId}/plus-addresses/{plusAddressId}/emails:
    get:
      description: Returns paginated list of all emails for a given plus alias addresses
        found for an inbox based on received emails that used the inbox address with
        a +xyz alias.
      operationId: getInboxPlusAddressEmailsForPlusAddressId
      parameters:
      - description: The plus address ID to fetch emails for.
        explode: false
        in: path
        name: plusAddressId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in inbox tracking pixel list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox tracking pixel list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: ID of the inbox you want to send the email from
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional filter by created after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter by created before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEmailPreview'
          description: OK
      summary: Get emails for a given inbox plus address
      tags:
      - InboxController
  /inboxes/{inboxId}/plus-addresses/emails:
    get:
      description: Returns paginated list of all emails for a given plus alias addresses
        found for an inbox based on received emails that used the inbox address with
        a +xyz alias.
      operationId: getInboxPlusAddressEmails
      parameters:
      - description: The plus address to fetch emails for. If your inbox address is
          `123@test.com` and the email was sent to `123+abc@test.com` then the plus
          address is `abc`
        explode: true
        in: query
        name: plusAddress
        required: true
        schema:
          type: string
        style: form
      - description: Optional page index in inbox tracking pixel list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox tracking pixel list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: ID of the inbox you want to send the email from
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional filter by created after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter by created before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEmailPreview'
          description: OK
      summary: Get emails for a given inbox plus address
      tags:
      - InboxController
  /inboxes/{inboxId}/emails:
    get:
      description: List emails that an inbox has received. Only emails that are sent
        to the inbox's email address will appear in the inbox. It may take several
        seconds for any email you send to an inbox's email address to appear in the
        inbox. To make this endpoint wait for a minimum number of emails use the `minCount`
        parameter. The server will retry the inbox database until the `minCount` is
        satisfied or the `retryTimeout` is reached
      operationId: getEmails
      parameters:
      - description: Id of inbox that emails belongs to
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Alias for limit. Assessed first before assessing any passed limit.
        explode: true
        in: query
        name: size
        required: false
        schema:
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: "Limit the result set, ordered by received date time sort direction.\
          \ Maximum 100. For more listing options see the email controller"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Sort the results by received date and direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Maximum milliseconds to spend retrying inbox database until minCount
          emails are returned
        explode: true
        in: query
        name: retryTimeout
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: delayTimeout
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Minimum acceptable email count. Will cause request to hang (and
          retry) until minCount is satisfied or retryTimeout is reached.
        explode: true
        in: query
        name: minCount
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: unreadOnly
        required: false
        schema:
          type: boolean
        style: form
      - description: Exclude emails received after this ISO 8601 date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Exclude emails received before this ISO 8601 date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/EmailPreview'
                type: array
          description: OK
      summary: Get emails in an Inbox. This method is not idempotent as it allows
        retries and waits if you want certain conditions to be met before returning.
        For simple listing and sorting of known emails use the email controller instead.
      tags:
      - InboxController
  /inboxes/{inboxId}/emails/paginated:
    get:
      description: Get a paginated list of emails in an inbox. Does not hold connections
        open.
      operationId: getInboxEmailsPaginated
      parameters:
      - description: Optional page index in inbox emails list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox emails list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional filter by received after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter by received before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Id of inbox that emails belongs to
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Sync connectors before fetching emails
        explode: true
        in: query
        name: syncConnectors
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEmailPreview'
          description: OK
      summary: Get inbox emails paginated
      tags:
      - InboxController
  /inboxes/{inboxId}/emails/count:
    get:
      operationId: getInboxEmailCount
      parameters:
      - description: Id of inbox that emails belongs to
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CountDto'
          description: OK
      summary: Get email count in inbox
      tags:
      - InboxController
  /inboxes/{inboxId}/delivery-status:
    get:
      deprecated: true
      description: Get all email delivery statuses for an inbox
      operationId: getDeliveryStatusesByInboxId
      parameters:
      - explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in delivery status list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in delivery status list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDeliveryStatus'
          description: OK
      tags:
      - InboxController
  /inboxes/tags:
    get:
      description: Get all inbox tags
      operationId: getInboxTags
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: Get inbox tags
      tags:
      - InboxController
  /inboxes/tags/paginated:
    get:
      description: Get all inbox tags paginated
      operationId: getInboxTagsPaginated
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInboxTags'
          description: OK
      summary: Get inbox tags paginated
      tags:
      - InboxController
  /inboxes/tags/inboxes:
    get:
      description: Get all inboxes for a given inbox tag
      operationId: getInboxesByTag
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Tag to filter by
        explode: true
        in: query
        name: tag
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInboxProjection'
          description: OK
      summary: Get inboxes for a tag
      tags:
      - InboxController
  /inboxes/scheduled-jobs:
    get:
      description: Schedule sending of emails using scheduled jobs. These can be inbox
        or account level.
      operationId: getAllScheduledJobs
      parameters:
      - description: Optional page index in scheduled job list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in scheduled job list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageScheduledJobs'
          description: OK
      summary: Get all scheduled email sending jobs for account
      tags:
      - InboxController
  /inboxes/scheduled-jobs/{jobId}:
    delete:
      description: "Get a scheduled email job and cancel it. Will fail if status of\
        \ job is already cancelled, failed, or complete."
      operationId: cancelScheduledJob
      parameters:
      - explode: false
        in: path
        name: jobId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ScheduledJobDto'
          description: OK
      summary: Cancel a scheduled email job
      tags:
      - InboxController
    get:
      description: Get a scheduled email job details.
      operationId: getScheduledJob
      parameters:
      - explode: false
        in: path
        name: jobId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ScheduledJobDto'
          description: OK
      summary: Get a scheduled email job
      tags:
      - InboxController
  /inboxes/plus-addresses:
    get:
      description: Returns paginated list of all plus alias addresses found for in
        account based on received emails that used the inbox address with a +xyz alias.
      operationId: getAllPlusAddresses
      parameters:
      - description: Optional page index in inbox tracking pixel list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox tracking pixel list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional inboxId filter
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePlusAddressProjection'
          description: OK
      summary: Get all sub address plus address aliases for an inbox
      tags:
      - InboxController
  /inboxes/plus-addresses/{plusAddressId}:
    get:
      description: Returns a plus address object based on emails that used the inbox
        address with a +xyz alias.
      operationId: getInboxPlusAddressById
      parameters:
      - description: ID of the plus address you want to fetch
        explode: false
        in: path
        name: plusAddressId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: ID of the inbox you want to filter for
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PlusAddressDto'
          description: OK
      summary: Get sub address plus address by ID
      tags:
      - InboxController
  /inboxes/paginated:
    get:
      description: "List inboxes in paginated form. The results are available on the\
        \ `content` property of the returned object. This method allows for page index\
        \ (zero based), page size (how many results to return), and a sort direction\
        \ (based on createdAt time). You Can also filter by whether an inbox is favorited\
        \ or use email address pattern. This method is the recommended way to query\
        \ inboxes. The alternative `getInboxes` method returns a full list of inboxes\
        \ but is limited to 100 results."
      operationId: getAllInboxes
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optionally filter results for favourites only
        explode: true
        in: query
        name: favourite
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "Optionally filter by search words partial matching ID, tags,\
          \ name, and email address"
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Optionally filter by tags. Will return inboxes that include given
          tags
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - deprecated: true
        description: DEPRECATED. Optionally filter by team access.
        explode: true
        in: query
        name: teamAccess
        required: false
        schema:
          type: boolean
        style: form
      - description: Optional filter by created after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter by created before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter by inbox type
        explode: true
        in: query
        name: inboxType
        required: false
        schema:
          description: Type of inbox. HTTP inboxes are faster and better for most
            cases. SMTP inboxes are more suited for public facing inbound messages
            (but cannot send).
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          type: string
        style: form
      - description: Optional filter by inbox function
        explode: true
        in: query
        name: inboxFunction
        required: false
        schema:
          enum:
          - ALIAS
          - THREAD
          - CATCH_ALL
          - CONNECTOR
          - ACCOUNT
          - GUEST
          - OAUTH_CONNECTION_GMAIL
          type: string
        style: form
      - description: Optional domain ID filter
        explode: true
        in: query
        name: domainId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInboxProjection'
          description: OK
      summary: List All Inboxes Paginated
      tags:
      - InboxController
  /inboxes/outboxes:
    get:
      description: List inboxes that have sent emails
      operationId: getOutboxes
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInboxProjection'
          description: OK
      summary: List all inboxes with sent emails
      tags:
      - InboxController
  /inboxes/organization:
    get:
      deprecated: true
      description: "List organization inboxes in paginated form. These are inboxes\
        \ created with `allowTeamAccess` flag enabled. Organization inboxes are `readOnly`\
        \ for non-admin users. The results are available on the `content` property\
        \ of the returned object. This method allows for page index (zero based),\
        \ page size (how many results to return), and a sort direction (based on createdAt\
        \ time). "
      operationId: getOrganizationInboxes
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Optional filter by created after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter by created before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageOrganizationInboxProjection'
          description: OK
      summary: List Organization Inboxes Paginated
      tags:
      - InboxController
  /inboxes/offset-paginated:
    get:
      description: "List inboxes in paginated form. The results are available on the\
        \ `content` property of the returned object. This method allows for page index\
        \ (zero based), page size (how many results to return), and a sort direction\
        \ (based on createdAt time). You Can also filter by whether an inbox is favorited\
        \ or use email address pattern. This method is the recommended way to query\
        \ inboxes. The alternative `getInboxes` method returns a full list of inboxes\
        \ but is limited to 100 results."
      operationId: getAllInboxesOffsetPaginated
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optionally filter results for favourites only
        explode: true
        in: query
        name: favourite
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "Optionally filter by search words partial matching ID, tags,\
          \ name, and email address"
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Optionally filter by tags. Will return inboxes that include given
          tags
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - deprecated: true
        description: DEPRECATED. Optionally filter by team access.
        explode: true
        in: query
        name: teamAccess
        required: false
        schema:
          type: boolean
        style: form
      - description: Optional filter by created after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter by created before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter by inbox type
        explode: true
        in: query
        name: inboxType
        required: false
        schema:
          description: Type of inbox. HTTP inboxes are faster and better for most
            cases. SMTP inboxes are more suited for public facing inbound messages
            (but cannot send).
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          type: string
        style: form
      - description: Optional filter by inbox function
        explode: true
        in: query
        name: inboxFunction
        required: false
        schema:
          enum:
          - ALIAS
          - THREAD
          - CATCH_ALL
          - CONNECTOR
          - ACCOUNT
          - GUEST
          - OAUTH_CONNECTION_GMAIL
          type: string
        style: form
      - description: Optional domain ID filter
        explode: true
        in: query
        name: domainId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInboxProjection'
          description: OK
      summary: List All Inboxes Offset Paginated
      tags:
      - InboxController
  /inboxes/imap-smtp-access:
    get:
      description: Get IMAP and SMTP access usernames and passwords
      operationId: getImapSmtpAccess
      parameters:
      - description: Inbox ID
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImapSmtpAccessDetails'
          description: OK
      tags:
      - InboxController
  /inboxes/imap-smtp-access/servers:
    get:
      description: Get IMAP and SMTP server hosts
      operationId: getImapSmtpAccessServers
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImapSmtpAccessServers'
          description: OK
      tags:
      - InboxController
  /inboxes/imap-smtp-access/env:
    get:
      description: Get IMAP and SMTP access details in .env format
      operationId: getImapSmtpAccessEnv
      parameters:
      - description: Inbox ID
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: string
          description: OK
      tags:
      - InboxController
  /inboxes/ids:
    get:
      deprecated: true
      description: Get list of inbox IDs
      operationId: getInboxIds
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxIdsResult'
          description: OK
      summary: Get all inbox IDs
      tags:
      - InboxController
  /inboxes/getLatestEmail:
    get:
      description: Get the newest email in an inbox or wait for one to arrive
      operationId: getLatestEmailInInbox
      parameters:
      - description: ID of the inbox you want to get the latest email from
        explode: true
        in: query
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: Timeout milliseconds to wait for latest email
        explode: true
        in: query
        name: timeoutMillis
        required: true
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Email'
          description: OK
      summary: Get latest email in an inbox. Use `WaitForController` to get emails
        that may not have arrived yet.
      tags:
      - InboxController
  /inboxes/exists:
    get:
      description: Check if inboxes exist by email address. Useful if you are sending
        emails to mailslurp addresses
      operationId: doesInboxExist
      parameters:
      - description: Email address
        explode: true
        in: query
        name: emailAddress
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: allowCatchAll
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxExistsDto'
          description: OK
      summary: Does inbox exist
      tags:
      - InboxController
  /inboxes/count:
    get:
      operationId: getInboxCount
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CountDto'
          description: OK
      summary: Get total inbox count
      tags:
      - InboxController
  /inboxes/byName:
    get:
      description: Get a inbox result by name
      operationId: getInboxByName
      parameters:
      - explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxByNameResult'
          description: OK
      summary: Search for an inbox with the given name
      tags:
      - InboxController
  /inboxes/byEmailAddress:
    get:
      description: Get a inbox result by email address
      operationId: getInboxByEmailAddress
      parameters:
      - explode: true
        in: query
        name: emailAddress
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxByEmailAddressResult'
          description: OK
      summary: Search for an inbox with the provided email address
      tags:
      - InboxController
  /inboxes/automations:
    get:
      description: Check if an inbox has automations.
      operationId: doesInboxHaveAutomations
      responses:
        "201":
          description: Created
      summary: Does inbox have automations
      tags:
      - InboxController
  /guest-portal/{portalId}:
    get:
      description: Fetch a customer guest portal
      operationId: getGuestPortal
      parameters:
      - explode: false
        in: path
        name: portalId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GuestPortalDto'
          description: OK
      summary: Get a client email portal
      tags:
      - GuestPortalController
  /guest-portal/{portalId}/user/{guestId}:
    get:
      description: Get customer for portal
      operationId: getGuestPortalUser
      parameters:
      - explode: false
        in: path
        name: portalId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: guestId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GuestPortalUserDto'
          description: OK
      summary: Get guest user for portal
      tags:
      - GuestPortalController
  /guest-portal/user:
    get:
      description: Get all customers for a portal
      operationId: getAllGuestPortalUsers
      parameters:
      - description: Optional portal ID
        explode: true
        in: query
        name: portalId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional search term
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageGuestPortalUsers'
          description: OK
      summary: Get all guest users for portal
      tags:
      - GuestPortalController
  /guest-portal/user/{guestId}:
    get:
      description: Get customer by ID
      operationId: getGuestPortalUserById
      parameters:
      - explode: false
        in: path
        name: guestId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GuestPortalUserDto'
          description: OK
      summary: Get guest user
      tags:
      - GuestPortalController
  /groups/{groupId}:
    delete:
      operationId: deleteGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete group
      tags:
      - GroupController
    get:
      operationId: getGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GroupDto'
          description: OK
      summary: Get group
      tags:
      - GroupController
  /groups/{groupId}/contacts-paginated:
    get:
      description: Get group and paginated contacts belonging to it
      operationId: getGroupWithContactsPaginated
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in group contact pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in group contact pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageContactProjection'
          description: OK
      tags:
      - GroupController
  /groups/paginated:
    get:
      operationId: getAllGroups
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageGroupProjection'
          description: OK
      summary: Get all Contact Groups in paginated format
      tags:
      - GroupController
  /forwarders/{id}/events:
    get:
      description: Get inbox forwarder events
      operationId: getInboxForwarderEvents
      parameters:
      - description: ID of inbox forwarder
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in inbox forwarder event list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox forwarder event list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInboxForwarderEvents'
          description: OK
      summary: Get an inbox forwarder event list
      tags:
      - InboxForwarderController
  /forwarders/{id}/events/{eventId}:
    get:
      description: Get inbox forwarder event
      operationId: getInboxForwarderEvent
      parameters:
      - description: ID of inbox forwarder
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: ID of inbox forwarder event
        explode: false
        in: path
        name: eventId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxForwarderEventDto'
          description: OK
      summary: Get an inbox forwarder event
      tags:
      - InboxForwarderController
  /forwarders/events:
    get:
      description: Get all inbox forwarder events
      operationId: getAllInboxForwarderEvents
      parameters:
      - description: Optional page index in inbox forwarder event list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox forwarder event list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional inbox ID to filter for
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional email ID to filter for
        explode: true
        in: query
        name: emailId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional sent ID to filter for
        explode: true
        in: query
        name: sentId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInboxForwarderEvents'
          description: OK
      summary: Get all inbox forwarder events
      tags:
      - InboxForwarderController
  /forwarders/events/{eventId}:
    get:
      description: Get forwarder event
      operationId: getForwarderEvent
      parameters:
      - description: ID of inbox forwarder event
        explode: false
        in: path
        name: eventId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InboxForwarderEventDto'
          description: OK
      summary: Get a forwarder event
      tags:
      - InboxForwarderController
  /expired:
    get:
      description: Inboxes created with an expiration date will expire after the given
        date. An ExpiredInboxRecord is created that records the inboxes old ID and
        email address. You can still read emails in the inbox (using the inboxes old
        ID) but the email address associated with the inbox can no longer send or
        receive emails. Fetch expired inbox records to view the old inboxes properties
      operationId: getExpiredInboxes
      parameters:
      - description: Optional page index in inbox sent email list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in inbox sent email list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optionally filter by inbox ID
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageExpiredInboxRecordProjection'
          description: OK
      summary: List records of expired inboxes
      tags:
      - ExpiredController
  /expired/{expiredId}:
    get:
      description: Inboxes created with an expiration date will expire after the given
        date and be moved to an ExpiredInbox entity. You can still read emails in
        the inbox but it can no longer send or receive emails. Fetch the expired inboxes
        to view the old inboxes properties
      operationId: getExpiredInboxRecord
      parameters:
      - description: ID of the ExpiredInboxRecord you want to retrieve. This is different
          from the ID of the inbox you are interested in. See other methods for getting
          ExpiredInboxRecord for an inbox inboxId
        explode: false
        in: path
        name: expiredId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExpiredInboxDto'
          description: OK
      summary: Get an expired inbox record
      tags:
      - ExpiredController
  /expired/inbox/{inboxId}:
    get:
      description: Use the inboxId to return an ExpiredInboxRecord if an inbox has
        expired. Inboxes expire and are disabled if an expiration date is set or plan
        requires. Returns 404 if no expired inbox is found for the inboxId
      operationId: getExpiredInboxByInboxId
      parameters:
      - description: ID of inbox you want to retrieve (not the inbox ID)
        explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExpiredInboxDto'
          description: OK
      summary: Get expired inbox record for a previously existing inbox
      tags:
      - ExpiredController
  /expired/defaults:
    get:
      description: Return default times used for inbox expiration
      operationId: getExpirationDefaults
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExpirationDefaults'
          description: OK
      summary: Get default expiration settings
      tags:
      - ExpiredController
  /emails/{emailId}/urls:
    get:
      description: Get a list of URLs for email content as text/html or raw SMTP message
        for viewing the message in a browser.
      operationId: getEmailPreviewURLs
      parameters:
      - explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailPreviewUrls'
          description: OK
      summary: Get email URLs for viewing in browser or downloading
      tags:
      - EmailController
  /emails/{emailId}/textLines:
    get:
      description: Parse an email body and return the content as an array of strings.
        HTML parsing uses JSoup and UNIX line separators.
      operationId: getEmailTextLines
      parameters:
      - description: ID of email to fetch text for
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Decode HTML entities
        explode: true
        in: query
        name: decodeHtmlEntities
        required: false
        schema:
          type: boolean
        style: form
      - description: Line separator character
        explode: true
        in: query
        name: lineSeparator
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailTextLinesResult'
          description: OK
      summary: "Parse and return text from an email, stripping HTML and decoding encoded\
        \ characters"
      tags:
      - EmailController
  /emails/{emailId}/summary:
    get:
      description: Returns a email summary object with headers. To retrieve the body
        see getEmail and to get raw unparsed email use the getRawEmail endpoints
      operationId: getEmailSummary
      parameters:
      - explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: decode
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailPreview'
          description: OK
      summary: Get email data including headers but not body. Expects email to exist
        by ID. For emails that may not have arrived yet use the WaitForController.
      tags:
      - EmailController
  /emails/{emailId}/raw:
    get:
      description: "Returns a raw, unparsed, and unprocessed email. If your client\
        \ has issues processing the response it is likely due to the response content-type\
        \ which is text/plain. If you need a JSON response content-type use the getRawEmailJson\
        \ endpoint"
      operationId: getRawEmailContents
      parameters:
      - description: ID of email
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Get raw email string. Returns unparsed raw SMTP message with headers
        and body.
      tags:
      - EmailController
  /emails/{emailId}/raw/json:
    get:
      description: "Returns a raw, unparsed, and unprocessed email wrapped in a JSON\
        \ response object for easier handling when compared with the getRawEmail text/plain\
        \ response"
      operationId: getRawEmailJson
      parameters:
      - description: ID of email
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RawEmailJson'
          description: OK
      summary: Get raw email in JSON. Unparsed SMTP message in JSON wrapper format.
      tags:
      - EmailController
  /emails/{emailId}/links:
    get:
      description: HTML parsing uses JSoup and UNIX line separators. Searches content
        for href attributes
      operationId: getEmailLinks
      parameters:
      - description: ID of email to fetch text for
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional HTML query selector for links
        explode: true
        in: query
        name: selector
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailLinksResult'
          description: OK
      summary: Parse and return list of links found in an email (only works for HTML
        content)
      tags:
      - EmailController
  /emails/{emailId}/html:
    get:
      description: "Retrieve email content as HTML response for viewing in browsers.\
        \ Decodes quoted-printable entities and converts charset to UTF-8. Pass your\
        \ API KEY as a request parameter when viewing in a browser: `?apiKey=xxx`.\
        \ Returns content-type `text/html;charset=utf-8` so you must call expecting\
        \ that content response not JSON. For JSON response see the `getEmailHTMLJson`\
        \ method."
      operationId: getEmailHTML
      parameters:
      - explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: replaceCidImages
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            text/html;charset=utf-8:
              schema:
                type: string
            text/html:
              schema:
                type: string
          description: OK
      summary: Get email content as HTML. For displaying emails in browser context.
      tags:
      - EmailController
  /emails/{emailId}/htmlQuery:
    get:
      description: Parse an email body and return the content as an array of text.
        HTML parsing uses JSoup which supports JQuery/CSS style selectors
      operationId: getEmailHTMLQuery
      parameters:
      - description: ID of email to perform HTML query on
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: HTML selector to search for. Uses JQuery/JSoup/CSS style selector
          like '.my-div' to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html
          for more information.
        explode: true
        in: query
        name: htmlSelector
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailTextLinesResult'
          description: OK
      summary: "Parse and return text from an email, stripping HTML and decoding encoded\
        \ characters"
      tags:
      - EmailController
  /emails/{emailId}/html/json:
    get:
      description: Retrieve email content as HTML response. Decodes quoted-printable
        entities and converts charset to UTF-8. Returns content-type `application/json;charset=utf-8`
        so you must call expecting that content response not JSON.
      operationId: getEmailHTMLJson
      parameters:
      - explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: replaceCidImages
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailHtmlDto'
          description: OK
      summary: Get email content as HTML in JSON wrapper. For fetching entity decoded
        HTML content
      tags:
      - EmailController
  /emails/{emailId}/contentPart:
    get:
      description: Get email body content parts from a multipart email message for
        a given content type
      operationId: getEmailContentPart
      parameters:
      - description: ID of email to match against
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Content type
        explode: true
        in: query
        name: contentType
        required: true
        schema:
          type: string
        style: form
      - description: Strict content type match
        explode: true
        in: query
        name: strict
        required: false
        schema:
          type: boolean
        style: form
      - description: Index of content type part if multiple
        explode: true
        in: query
        name: index
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EmailContentPartResult'
            application/xml;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EmailContentPartResult'
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EmailContentPartResult'
            application/xml; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EmailContentPartResult'
          description: OK
      summary: Get email content part by content type
      tags:
      - EmailController
  /emails/{emailId}/contentPart/raw:
    get:
      description: Get email body content parts from a multipart email message for
        a given content type and return as response
      operationId: getEmailContentPartContent
      parameters:
      - description: ID of email to match against
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Content type
        explode: true
        in: query
        name: contentType
        required: true
        schema:
          type: string
        style: form
      - description: Strict content type match
        explode: true
        in: query
        name: strict
        required: false
        schema:
          type: boolean
        style: form
      - description: Index of content type part if multiple. Starts from 0 and applies
          to the result list after selecting for your content type. Content type parts
          are sorted by order found in original MIME message.
        explode: true
        in: query
        name: index
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: string
          description: OK
      summary: Get email content part by content type raw response
      tags:
      - EmailController
  /emails/{emailId}/body:
    get:
      description: Returns the specified email body for a given email as a string
      operationId: downloadBody
      parameters:
      - description: ID of email
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
            text/html:
              schema:
                type: string
          description: OK
      summary: Get email body as string. Returned as `plain/text` with content type
        header.
      tags:
      - EmailController
  /emails/{emailId}/body-bytes:
    get:
      description: Returns the specified email body for a given email as a stream
        / array of bytes.
      operationId: downloadBodyBytes
      parameters:
      - description: ID of email
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        default:
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
          description: default response
      summary: Get email body in bytes. Returned as `octet-stream` with content type
        header.
      tags:
      - EmailController
  /emails/{emailId}/attachments:
    get:
      description: Returns an array of attachment metadata such as name and content-type
        for a given email if present.
      operationId: getEmailAttachments
      parameters:
      - description: ID of email
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/AttachmentMetaData'
                type: array
          description: OK
      summary: Get all email attachment metadata. Metadata includes name and size
        of attachments.
      tags:
      - EmailController
  /emails/{emailId}/attachments/{attachmentId}:
    get:
      description: Returns the specified attachment for a given email as a stream
        / array of bytes. You can find attachment ids in email responses endpoint
        responses. The response type is application/octet-stream.
      operationId: downloadAttachment
      parameters:
      - description: ID of email
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: ID of attachment
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      - description: Can pass apiKey in url for this request if you wish to download
          the file in a browser. Content type will be set to original content type
          of the attachment file. This is so that browsers can download the file correctly.
        explode: true
        in: query
        name: apiKey
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
          description: default response
      summary: Get email attachment bytes. Returned as `octet-stream` with content
        type header. If you have trouble with byte responses try the `downloadAttachmentBase64`
        response endpoints and convert the base 64 encoded content to a file or string.
      tags:
      - EmailController
  /emails/{emailId}/attachments/{attachmentId}/metadata:
    get:
      description: Returns the metadata such as name and content-type for a given
        attachment and email.
      operationId: getAttachmentMetaData
      parameters:
      - description: ID of email
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: ID of attachment
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AttachmentMetaData'
          description: OK
      summary: Get email attachment metadata. This is the `contentType` and `contentLength`
        of an attachment. To get the individual attachments  use the `downloadAttachment`
        methods.
      tags:
      - EmailController
  /emails/{emailId}/attachments/{attachmentId}/base64:
    get:
      description: Returns the specified attachment for a given email as a base 64
        encoded string. The response type is application/json. This method is similar
        to the `downloadAttachment` method but allows some clients to get around issues
        with binary responses.
      operationId: downloadAttachmentBase64
      parameters:
      - description: ID of email
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: ID of attachment
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DownloadAttachmentDto'
          description: OK
      summary: Get email attachment as base64 encoded string as an alternative to
        binary responses. Decode the `base64FileContents` as a `utf-8` encoded string
        or array of bytes depending on the `contentType`.
      tags:
      - EmailController
  /emails/unreadCount:
    get:
      description: Get number of emails unread. Unread means has not been viewed in
        dashboard or returned in an email API response
      operationId: getUnreadEmailCount
      parameters:
      - description: Optional inbox ID filter
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnreadCount'
          description: OK
      summary: Get unread email count
      tags:
      - EmailController
  /emails/threads:
    get:
      description: "Return email message chains built from Message-ID, In-Reply-To,\
        \ and References header."
      operationId: getEmailThreads
      parameters:
      - description: Optional inbox filter
        explode: true
        in: query
        name: htmlSelector
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional page index in email thread pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in email thread pagination. Maximum size is
          100. Use page index and sort to page through larger results
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter search filter for email threads.
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Optional filter email threads created since time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter emails threads created before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEmailThreadProjection'
          description: OK
      summary: Return email threads in paginated form
      tags:
      - EmailController
  /emails/threads/{threadId}:
    get:
      description: "Return email message thread summary from Message-ID, In-Reply-To,\
        \ and References header. Get messages using items endpoint"
      operationId: getEmailThread
      parameters:
      - explode: false
        in: path
        name: threadId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailThreadDto'
          description: OK
      summary: Return email thread information. Use items endpoints to get messages
        for thread.
      tags:
      - EmailController
  /emails/threads/{threadId}/items:
    get:
      description: "Return email thread messages based on Message-ID, In-Reply-To,\
        \ and References header"
      operationId: getEmailThreadItems
      parameters:
      - explode: false
        in: path
        name: threadId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmailThreadItemsDto'
          description: OK
      summary: Return email thread items.
      tags:
      - EmailController
  /emails/organization:
    get:
      description: By default returns all emails across all team inboxes sorted by
        ascending created at date. Responses are paginated. You can restrict results
        to a list of inbox IDs. You can also filter out read messages
      operationId: getOrganizationEmailsPaginated
      parameters:
      - description: Optional inbox ids to filter by. Can be repeated. By default
          will use all inboxes belonging to your account.
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: Optional page index in email list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in email list pagination. Maximum size is
          100. Use page index and sort to page through larger results
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional filter for unread emails only. All emails are considered
          unread until they are viewed in the dashboard or requested directly
        explode: true
        in: query
        name: unreadOnly
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Optional search filter search filter for emails.
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Optional filter emails received after given date time. If unset
          will use time 24hours prior to now.
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter emails received before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Sync connectors
        explode: true
        in: query
        name: syncConnectors
        required: false
        schema:
          type: boolean
        style: form
      - description: Search only favorited emails
        explode: true
        in: query
        name: favourited
        required: false
        schema:
          type: boolean
        style: form
      - description: Optional plus address ID filter
        explode: true
        in: query
        name: plusAddressId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEmailProjection'
          description: OK
      summary: Get all organization emails. List team or shared test email accounts
      tags:
      - EmailController
  /emails/offset-paginated:
    get:
      description: By default returns all emails across all inboxes sorted by ascending
        created at date. Responses are paginated. You can restrict results to a list
        of inbox IDs. You can also filter out read messages
      operationId: getEmailsOffsetPaginated
      parameters:
      - description: Optional inbox ids to filter by. Can be repeated. By default
          will use all inboxes belonging to your account.
        explode: true
        in: query
        name: inboxId
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: Optional page index in email list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in email list pagination. Maximum size is
          100. Use page index and sort to page through larger results
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional filter for unread emails only. All emails are considered
          unread until they are viewed in the dashboard or requested directly
        explode: true
        in: query
        name: unreadOnly
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "Optional search filter. Searches email recipients, sender, subject,\
          \ email address and ID. Does not search email body"
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Optional filter emails received after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter emails received before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter emails that are favourited
        explode: true
        in: query
        name: favourited
        required: false
        schema:
          type: boolean
        style: form
      - description: Sync connectors
        explode: true
        in: query
        name: syncConnectors
        required: false
        schema:
          type: boolean
        style: form
      - description: Optional plus address ID filter
        explode: true
        in: query
        name: plusAddressId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEmailProjection'
          description: OK
      summary: Get all emails in all inboxes in paginated form. Email API list all.
      tags:
      - EmailController
  /emails/latest:
    get:
      description: Get the newest email in all inboxes or in a passed set of inbox
        IDs
      operationId: getLatestEmail
      parameters:
      - description: Optional set of inboxes to filter by. Only get the latest email
          from these inbox IDs. If not provided will search across all inboxes
        explode: true
        in: query
        name: inboxIds
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Email'
          description: OK
      summary: Get latest email in all inboxes. Most recently received.
      tags:
      - EmailController
  /emails/latestIn:
    get:
      description: Get the newest email in all inboxes or in a passed set of inbox
        IDs
      operationId: getLatestEmailInInbox_1
      parameters:
      - description: ID of the inbox you want to get the latest email from
        explode: true
        in: query
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Email'
          description: OK
      summary: Get latest email in an inbox. Use `WaitForController` to get emails
        that may not have arrived yet.
      tags:
      - EmailController
  /emails/gravatarFor:
    get:
      description: Get gravatar url for email address
      operationId: getGravatarUrlForEmailAddress
      parameters:
      - explode: true
        in: query
        name: emailAddress
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: size
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GravatarUrl'
          description: OK
      tags:
      - EmailController
  /emails/emails/count:
    get:
      operationId: getEmailCount
      parameters:
      - explode: true
        in: query
        name: inboxId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CountDto'
          description: OK
      summary: Get email count
      tags:
      - EmailController
  /email-verification/validation-requests:
    get:
      description: List email verification requests
      operationId: getValidationRequests
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          maximum: 9223372036854775807
          minimum: 0
          type: integer
        style: form
      - description: Optional page size for paginated result list.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: DESC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional search filter
        explode: true
        in: query
        name: searchFilter
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter where email is valid is true or false
        explode: true
        in: query
        name: isValid
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEmailValidationRequest'
          description: OK
      summary: Validate a list of email addresses. Per unit billing. See your plan
        for pricing.
      tags:
      - EmailVerificationController
  /domains/mailslurp-domains:
    get:
      description: List all MailSlurp domains used with non-custom email addresses
      operationId: getMailSlurpDomains
      parameters:
      - explode: true
        in: query
        name: inboxType
        required: false
        schema:
          description: Type of inbox. HTTP inboxes are faster and better for most
            cases. SMTP inboxes are more suited for public facing inbound messages
            (but cannot send).
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DomainGroupsDto'
          description: OK
      summary: Get MailSlurp domains
      tags:
      - DomainController
  /domains/issues:
    get:
      description: List domain issues for domains you have created
      operationId: getDomainIssues
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DomainIssuesDto'
          description: OK
      summary: Get domain issues
      tags:
      - DomainController
  /domains/available-domains:
    get:
      description: List all domains available for use with email address creation
      operationId: getAvailableDomains
      parameters:
      - explode: true
        in: query
        name: inboxType
        required: false
        schema:
          description: Type of inbox. HTTP inboxes are faster and better for most
            cases. SMTP inboxes are more suited for public facing inbound messages
            (but cannot send).
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DomainGroupsDto'
          description: OK
      summary: Get all usable domains
      tags:
      - DomainController
  /contacts/{contactId}:
    delete:
      operationId: deleteContact
      parameters:
      - explode: false
        in: path
        name: contactId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete contact
      tags:
      - ContactController
    get:
      operationId: getContact
      parameters:
      - explode: false
        in: path
        name: contactId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ContactDto'
          description: OK
      summary: Get contact
      tags:
      - ContactController
  /contacts/{contactId}/download:
    get:
      deprecated: true
      operationId: getContactVCard
      parameters:
      - explode: false
        in: path
        name: contactId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Get contact vCard vcf file
      tags:
      - ContactController
  /contacts/paginated:
    get:
      operationId: getAllContacts
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search terms
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageContactProjection'
          description: OK
      summary: Get all contacts
      tags:
      - ContactController
  /consent/opt-in:
    delete:
      operationId: revokeOptInConsentForEmailAddress
      parameters:
      - description: Email address to revoke consent for
        explode: true
        in: query
        name: emailAddress
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OptInSendingConsentDto'
          description: OK
      tags:
      - ConsentController
    get:
      operationId: getOptInIdentities
      parameters:
      - description: Optional page index in list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageOptInIdentityProjection'
          description: OK
      tags:
      - ConsentController
  /consent/opt-in/sending-consent:
    get:
      operationId: checkSendingConsentForEmailAddress
      parameters:
      - description: Email address to check consent for
        explode: true
        in: query
        name: emailAddress
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OptInSendingConsentDto'
          description: OK
      tags:
      - ConsentController
  /connectors/{id}/events:
    get:
      operationId: getConnectorEvents
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in connector list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in connector list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by event type
        explode: true
        in: query
        name: eventType
        required: false
        schema:
          enum:
          - SEND
          - SYNC
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageConnectorEvents'
          description: OK
      summary: Get an inbox connector events
      tags:
      - ConnectorController
  /connectors/provider-settings:
    get:
      description: Get common mail provider SMTP and IMAP connection settings
      operationId: getConnectorProviderSettings
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorProviderSettingsDto'
          description: OK
      summary: Get SMTP and IMAP connection settings for common mail providers
      tags:
      - ConnectorController
  /connectors/events:
    get:
      operationId: getAllConnectorEvents
      parameters:
      - description: Optional connector ID
        explode: true
        in: query
        name: id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Optional page index in connector list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in connector list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by event type
        explode: true
        in: query
        name: eventType
        required: false
        schema:
          enum:
          - SEND
          - SYNC
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageConnectorEvents'
          description: OK
      summary: Get all inbox connector events
      tags:
      - ConnectorController
  /connectors/events/{id}:
    get:
      operationId: getConnectorEvent
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectorEventDto'
          description: OK
      summary: Get an inbox connector event
      tags:
      - ConnectorController
  /connectors/by-name:
    get:
      description: Find an inbox connector by name
      operationId: getConnectorByName
      parameters:
      - description: Name to search for connector by
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OptionalConnectorDto'
          description: OK
      summary: Get connector by name
      tags:
      - ConnectorController
  /connectors/by-inbox-id:
    get:
      description: Find an inbox connector by inbox ID
      operationId: getConnectorByInboxId
      parameters:
      - description: Inbox ID to search for connector by
        explode: true
        in: query
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OptionalConnectorDto'
          description: OK
      summary: Get connector by inbox ID
      tags:
      - ConnectorController
  /connectors/by-email-address:
    get:
      description: Find an inbox connector by email address
      operationId: getConnectorByEmailAddress
      parameters:
      - description: Email address to search for connector by
        explode: true
        in: query
        name: emailAddress
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OptionalConnectorDto'
          description: OK
      summary: Get connector by email address
      tags:
      - ConnectorController
  /bounce/reputation-items:
    get:
      description: List of complaints and bounces
      operationId: getReputationItems
      parameters:
      - description: Optional page index
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: DESC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageReputationItems'
          description: OK
      summary: Get paginated list of reputation items.
      tags:
      - BounceController
  /bounce/recipients:
    get:
      description: Bounced recipients are email addresses that you have sent emails
        to that did not accept the sent email. Once a recipient is bounced you cannot
        send emails to that address.
      operationId: getBouncedRecipients
      parameters:
      - description: 'Optional page index '
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: 'Optional page size '
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageBouncedRecipients'
          description: OK
      summary: Get paginated list of bounced recipients.
      tags:
      - BounceController
  /bounce/recipients/{id}:
    get:
      description: Bounced emails are email you have sent that were rejected by a
        recipient
      operationId: getBouncedRecipient
      parameters:
      - description: ID of the bounced recipient
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BouncedRecipientDto'
          description: OK
      summary: Get a bounced email.
      tags:
      - BounceController
  /bounce/list-unsubscribe-recipients:
    get:
      description: Unsubscribed recipient have unsubscribed from a mailing list for
        a user or domain and cannot be contacted again.
      operationId: getListUnsubscribeRecipients
      parameters:
      - description: Optional page index
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: 'Optional page size '
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by domainId
        explode: true
        in: query
        name: domainId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageListUnsubscribeRecipients'
          description: OK
      summary: Get paginated list of unsubscribed recipients.
      tags:
      - BounceController
  /bounce/emails:
    get:
      description: Bounced emails are email you have sent that were rejected by a
        recipient
      operationId: getBouncedEmails
      parameters:
      - description: Optional page index
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: 'Optional page size '
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageBouncedEmail'
          description: OK
      summary: Get paginated list of bounced emails.
      tags:
      - BounceController
  /bounce/emails/{id}:
    get:
      description: Bounced emails are email you have sent that were rejected by a
        recipient
      operationId: getBouncedEmail
      parameters:
      - description: ID of the bounced email to fetch
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BouncedEmailDto'
          description: OK
      summary: Get a bounced email.
      tags:
      - BounceController
  /bounce/complaints:
    get:
      description: SMTP complaints made against your account
      operationId: getComplaints
      parameters:
      - description: 'Optional page index '
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: 'Optional page size '
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Filter by created at after the given timestamp
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by created at before the given timestamp
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageComplaint'
          description: OK
      summary: Get paginated list of complaints.
      tags:
      - BounceController
  /bounce/complaints/{id}:
    get:
      description: Get complaint
      operationId: getComplaint
      parameters:
      - description: ID of the complaint
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Complaint'
          description: OK
      summary: Get complaint
      tags:
      - BounceController
  /bounce/account-block:
    get:
      description: Check if account block status prevents sending
      operationId: getAccountBounceBlockStatus
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccountBounceBlockDto'
          description: OK
      summary: Can account send email
      tags:
      - BounceController
  /attachments/{attachmentId}:
    delete:
      description: Delete an attachment
      operationId: deleteAttachment
      parameters:
      - description: ID of attachment
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete an attachment
      tags:
      - AttachmentController
    get:
      operationId: getAttachment
      parameters:
      - description: ID of attachment
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AttachmentEntityDto'
          description: OK
      summary: Get an attachment entity
      tags:
      - AttachmentController
  /attachments/{attachmentId}/metadata:
    get:
      description: Returns the metadata for an attachment. It is saved separately
        to the content of the attachment. Contains properties `name` and `content-type`
        and `content-length` in bytes for a given attachment.
      operationId: getAttachmentInfo
      parameters:
      - description: ID of attachment
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AttachmentMetaData'
          description: OK
      summary: Get email attachment metadata information
      tags:
      - AttachmentController
  /attachments/{attachmentId}/bytes:
    get:
      description: Returns the specified attachment for a given email as a stream
        / array of bytes. You can find attachment ids in email responses endpoint
        responses. The response type is application/octet-stream.
      operationId: downloadAttachmentAsBytes
      parameters:
      - description: ID of attachment
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
          description: default response
      summary: Download attachments. Get email attachment bytes. If you have trouble
        with byte responses try the `downloadAttachmentBase64` response endpoints.
      tags:
      - AttachmentController
  /attachments/{attachmentId}/base64:
    get:
      description: Returns the specified attachment for a given email as a base 64
        encoded string. The response type is application/json. This method is similar
        to the `downloadAttachment` method but allows some clients to get around issues
        with binary responses.
      operationId: downloadAttachmentAsBase64Encoded
      parameters:
      - description: ID of attachment
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DownloadAttachmentDto'
          description: OK
      summary: Get email attachment as base64 encoded string as alternative to binary
        responses. To read the content decode the Base64 encoded contents.
      tags:
      - AttachmentController
  /aliases/{aliasId}/threads:
    get:
      description: Returns threads created for an email alias in paginated form
      operationId: getAliasThreads
      parameters:
      - explode: false
        in: path
        name: aliasId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Optional page index in thread list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in thread list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional filter by sent after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter by sent before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAliasThreadProjection'
          description: OK
      summary: Get threads created for an alias
      tags:
      - AliasController
  /aliases/threads:
    get:
      description: Returns threads created for all aliases in paginated form
      operationId: getThreadsPaginated
      parameters:
      - description: Optional page index in thread list pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size in thread list pagination
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Optional filter by sent after given date time
        explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Optional filter by sent before given date time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAliasThreadProjection'
          description: OK
      summary: Get all threads
      tags:
      - AliasController
  /aliases/threads/{threadId}:
    get:
      description: Return a thread associated with an alias
      operationId: getThread
      parameters:
      - explode: false
        in: path
        name: threadId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AliasThreadProjection'
          description: OK
      summary: Get a thread
      tags:
      - AliasController
  /ai/transformer/{id}:
    delete:
      description: Delete an AI transformer and schemas by ID
      operationId: deleteTransformer
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete a transformer
      tags:
      - AIController
    get:
      description: Get AI transformer and schemas by ID
      operationId: getTransformer
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AITransformDto'
          description: OK
      summary: Get a transformer
      tags:
      - AIController
  /ai/transformer/results:
    get:
      description: Get AI transformer results
      operationId: getTransformerResults
      parameters:
      - explode: true
        in: query
        name: aiTransformId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: aiTransformMappingId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: entityId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: entityType
        required: false
        schema:
          enum:
          - INBOX
          - PHONE
          type: string
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Optional page size. Maximum size is 100. Use page index and sort
          to page through larger results
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: Optional createdAt sort direction ASC or DESC
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAITransformResultProjection'
          description: OK
      summary: Get transformer results
      tags:
      - AIController
  /ai/transformer/results/{id}:
    get:
      description: Get AI transformer result
      operationId: getTransformerResult
      parameters:
      - description: ID of transform result
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AITransformResultDto'
          description: OK
      summary: Get transformer result
      tags:
      - AIController
  /ai/transformer/mappings/{id}:
    delete:
      description: Delete an AI transformer mapping
      operationId: deleteTransformerMapping
      parameters:
      - description: ID of transform mapping
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete transformer mapping
      tags:
      - AIController
    get:
      description: Get an AI transformer mapping
      operationId: getTransformerMapping
      parameters:
      - description: ID of transform mapping
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AITransformMappingDto'
          description: OK
      summary: Get transformer mapping
      tags:
      - AIController
  /inboxes/{inboxId}/webhooks/{webhookId}:
    delete:
      operationId: deleteWebhook
      parameters:
      - explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete and disable a Webhook for an Inbox
      tags:
      - WebhookController
  /inboxes/{inboxId}/deleteAllInboxEmails:
    delete:
      description: Deletes all emails in an inbox. Be careful as emails cannot be
        recovered
      operationId: deleteAllInboxEmails
      parameters:
      - explode: false
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete all emails in a given inboxes.
      tags:
      - InboxController
  /inboxes/expired:
    delete:
      description: Remove any expired inboxes for your account (instead of waiting
        for scheduled removal on server)
      operationId: flushExpired
      parameters:
      - description: Optional expired at before flag to flush expired inboxes that
          have expired before the given time
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FlushExpiredInboxesResult'
          description: OK
      summary: Remove expired inboxes
      tags:
      - InboxController
  /inboxes/by-tag:
    delete:
      description: Permanently delete all inboxes by tag
      operationId: deleteAllInboxesByTag
      parameters:
      - explode: true
        in: query
        name: tag
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
      summary: Delete inboxes by tag
      tags:
      - InboxController
  /inboxes/by-name:
    delete:
      description: Permanently delete all inboxes by name
      operationId: deleteAllInboxesByName
      parameters:
      - explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
      summary: Delete inboxes by name
      tags:
      - InboxController
  /inboxes/by-description:
    delete:
      description: Permanently delete all inboxes by description
      operationId: deleteAllInboxesByDescription
      parameters:
      - explode: true
        in: query
        name: description
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
      summary: Delete inboxes by description
      tags:
      - InboxController
  /emptyInbox:
    delete:
      description: Deletes all emails
      operationId: emptyInbox
      parameters:
      - description: ID of inbox to empty
        explode: true
        in: query
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "204":
          description: No Content
      summary: Delete all emails in an inbox
      tags:
      - CommonActionsController
  /email-verification:
    delete:
      description: Remove validation requests
      operationId: deleteAllValidationRequests
      responses:
        "204":
          description: No Content
      summary: Delete all validation requests
      tags:
      - EmailVerificationController
  /email-verification/{id}:
    delete:
      description: Delete a validation record
      operationId: deleteValidationRequest
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      summary: Delete a validation record
      tags:
      - EmailVerificationController
  /deleteEmailAddress:
    delete:
      description: Deletes inbox email address
      operationId: deleteEmailAddress
      parameters:
      - description: ID of inbox to delete
        explode: true
        in: query
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "204":
          description: No Content
      summary: Delete inbox email address by inbox id
      tags:
      - CommonActionsController
components:
  schemas:
    WebhookHeaderNameValue:
      description: Name value pair for webhook header
      example:
        name: name
        value: value
      properties:
        name:
          description: Name of header
          type: string
        value:
          description: Value of header
          type: string
      required:
      - name
      - value
      type: object
    WebhookHeaders:
      description: Webhook HTTP headers to include with each request from MailSlurp
        to your server
      example:
        headers:
        - name: name
          value: value
        - name: name
          value: value
      properties:
        headers:
          description: List of header name value pairs to include with webhook requests
          items:
            $ref: '#/components/schemas/WebhookHeaderNameValue'
          type: array
      required:
      - headers
      type: object
    WebhookDto:
      description: Representation of a webhook for an inbox. The URL specified will
        be using by MailSlurp whenever an email is received by the attached inbox.
        A webhook entity should have a URL that points to your server. Your server
        should accept HTTP/S POST requests and return a success 200. MailSlurp will
        retry your webhooks if they fail. See https://csharp.api.mailslurp.com/schemas/webhook-payload
        for the payload schema.
      example:
        ignoreInsecureSslCertificates: true
        useStaticIpRange: true
        aiTransformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        method: POST
        basicAuth: true
        phoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        url: url
        createdAt: 2000-01-23T04:56:07.000+00:00
        requestBodyTemplate: requestBodyTemplate
        requestHeaders:
          headers:
          - name: name
            value: value
          - name: name
            value: value
        healthStatus: HEALTHY
        payloadJsonSchema: payloadJsonSchema
        name: name
        eventName: EMAIL_RECEIVED
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: ID of the Webhook
          format: uuid
          type: string
        userId:
          description: User ID of the Webhook
          format: uuid
          type: string
        basicAuth:
          description: Does webhook expect basic authentication? If true it means
            you created this webhook with a username and password. MailSlurp will
            use these in the URL to authenticate itself.
          type: boolean
        name:
          description: Name of the webhook
          nullable: true
          type: string
        phoneId:
          description: The phoneNumberId that the Webhook will be triggered by. If
            null then webhook triggered at account level or inbox level if inboxId
            set
          format: uuid
          nullable: true
          type: string
        inboxId:
          description: The inbox that the Webhook will be triggered by. If null then
            webhook triggered at account level or phone level if phoneId set
          format: uuid
          nullable: true
          type: string
        requestBodyTemplate:
          description: Request body template for HTTP request that will be sent for
            the webhook. Use Moustache style template variables to insert values from
            the original event payload.
          nullable: true
          type: string
        url:
          description: URL of your server that the webhook will be sent to. The schema
            of the JSON that is sent is described by the payloadJsonSchema.
          type: string
        method:
          description: HTTP method that your server endpoint must listen for
          enum:
          - POST
          - DELETE
          - GET
          - PUT
          - PATCH
          - HEAD
          - OPTIONS
          - TRACE
          type: string
        payloadJsonSchema:
          description: Deprecated. Fetch JSON Schema for webhook using the getJsonSchemaForWebhookPayload
            method
          type: string
        createdAt:
          description: When the webhook was created
          format: date-time
          nullable: true
          type: string
        updatedAt:
          format: date-time
          type: string
        eventName:
          description: Webhook trigger event name
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          nullable: true
          type: string
        requestHeaders:
          $ref: '#/components/schemas/WebhookHeaders'
        aiTransformId:
          description: ID of AI transformer for payload
          format: uuid
          nullable: true
          type: string
        ignoreInsecureSslCertificates:
          description: Should notifier ignore insecure SSL certificates
          nullable: true
          type: boolean
        useStaticIpRange:
          description: Should notifier use static IP range when sending webhook payload
          nullable: true
          type: boolean
        healthStatus:
          description: Webhook health
          enum:
          - HEALTHY
          - UNHEALTHY
          nullable: true
          type: string
      required:
      - basicAuth
      - createdAt
      - id
      - method
      - payloadJsonSchema
      - updatedAt
      - url
      - userId
      type: object
    CreateTemplateOptions:
      description: Create template options
      example:
        name: name
        content: content
      properties:
        name:
          description: Name of template
          type: string
        content:
          description: "Template content. Can include moustache style variables such\
            \ as {{var_name}}"
          type: string
      required:
      - content
      - name
      type: object
    TemplateDto:
      description: Email template
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        variables:
        - variableType: STRING
          name: name
        - variableType: STRING
          name: name
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        content: content
      properties:
        id:
          description: ID of template
          format: uuid
          type: string
        name:
          description: Template name
          type: string
        variables:
          description: Variables available in template that can be replaced with values
          items:
            $ref: '#/components/schemas/TemplateVariable'
          type: array
        content:
          description: Content of the template
          type: string
        createdAt:
          description: Created at time
          format: date-time
          type: string
      required:
      - content
      - createdAt
      - id
      - name
      - variables
      type: object
    TemplateVariable:
      description: Variable for use with email template
      example:
        variableType: STRING
        name: name
      properties:
        name:
          description: "Name of variable. This can be used in a template as {{name}}"
          type: string
        variableType:
          description: The type of variable
          enum:
          - STRING
          type: string
      required:
      - name
      - variableType
      type: object
    SmsDto:
      example:
        fromNumber: fromNumber
        createdAt: 2000-01-23T04:56:07.000+00:00
        phoneNumber: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        read: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        favourite: true
        body: body
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        toNumber: toNumber
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        phoneNumber:
          format: uuid
          type: string
        fromNumber:
          type: string
        toNumber:
          type: string
        favourite:
          type: boolean
        body:
          type: string
        read:
          type: boolean
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - body
      - createdAt
      - favourite
      - fromNumber
      - id
      - phoneNumber
      - read
      - updatedAt
      - userId
      type: object
    InboxRulesetTestOptions:
      description: Test options for inbox ruleset
      example:
        testTarget: testTarget
      properties:
        testTarget:
          type: string
      required:
      - testTarget
      type: object
    InboxRulesetTestResult:
      description: Result of test of inbox ruleset
      example:
        rulesetMatches:
          key: true
        matches: true
      properties:
        rulesetMatches:
          additionalProperties:
            description: Map of inbox ruleset ID to boolean of if target matches
            type: boolean
          description: Map of inbox ruleset ID to boolean of if target matches
          type: object
        matches:
          type: boolean
      required:
      - matches
      - rulesetMatches
      type: object
    UpdateInboxReplierOptions:
      description: Options for updating an inbox replier
      example:
        charset: charset
        subject: subject
        match: match
        ignoreReplyTo: true
        body: body
        templateId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        templateVariables:
          key: "{}"
        field: RECIPIENTS
        isHTML: true
        name: name
        replyTo: replyTo
        from: from
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        inboxId:
          description: Inbox ID to attach replier to
          format: uuid
          type: string
        name:
          description: Name for replier
          nullable: true
          type: string
        field:
          description: Field to match against to trigger inbox replier for inbound
            email
          enum:
          - RECIPIENTS
          - SENDER
          - SUBJECT
          - ATTACHMENTS
          type: string
        match:
          description: String or wildcard style match for field specified when evaluating
            reply rules
          type: string
        replyTo:
          description: Reply-to email address when sending replying
          nullable: true
          type: string
        subject:
          description: Subject override when replying to email
          nullable: true
          type: string
        from:
          description: Send email from address
          nullable: true
          type: string
        charset:
          description: Email reply charset
          nullable: true
          type: string
        isHTML:
          description: Send HTML email
          nullable: true
          type: boolean
        ignoreReplyTo:
          description: Ignore sender replyTo when responding. Send directly to the
            sender if enabled.
          nullable: true
          type: boolean
        body:
          description: Email body for reply
          nullable: true
          type: string
        templateId:
          description: ID of template to use when sending a reply
          format: uuid
          nullable: true
          type: string
        templateVariables:
          additionalProperties:
            description: Template variable values
            nullable: true
            type: object
          description: Template variable values
          nullable: true
          type: object
      required:
      - field
      - inboxId
      - match
      type: object
    InboxReplierDto:
      description: Inbox replier. Will automatically reply to inbound emails that
        match given field for an inbox.
      example:
        charset: charset
        subject: subject
        match: match
        ignoreReplyTo: true
        templateId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        templateVariables:
          key: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        field: RECIPIENTS
        isHTML: true
        name: name
        replyTo: replyTo
        from: from
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        field:
          enum:
          - RECIPIENTS
          - SENDER
          - SUBJECT
          - ATTACHMENTS
          type: string
        match:
          type: string
        replyTo:
          nullable: true
          type: string
        subject:
          nullable: true
          type: string
        from:
          nullable: true
          type: string
        charset:
          nullable: true
          type: string
        isHTML:
          type: boolean
        templateId:
          format: uuid
          nullable: true
          type: string
        templateVariables:
          additionalProperties:
            nullable: true
            type: object
          nullable: true
          type: object
        ignoreReplyTo:
          type: boolean
        createdAt:
          format: date-time
          type: string
      required:
      - createdAt
      - field
      - id
      - ignoreReplyTo
      - isHTML
      - match
      type: object
    UpdatePhoneNumberOptions:
      example:
        name: name
        description: description
      properties:
        name:
          type: string
        description:
          type: string
      type: object
    PhoneNumberDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        phoneNumber: phoneNumber
        complianceAddress: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        description: description
        emergencyAddress: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        favourite: true
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        phoneCountry: US
        phonePlan: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        description:
          type: string
        userId:
          format: uuid
          type: string
        complianceAddress:
          format: uuid
          type: string
        emergencyAddress:
          format: uuid
          type: string
        phoneNumber:
          type: string
        phoneCountry:
          enum:
          - US
          - GB
          - AU
          - CA
          - EE
          - HK
          - PL
          - CH
          - PT
          - NL
          - IL
          - SE
          type: string
        phonePlan:
          format: uuid
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        favourite:
          type: boolean
      required:
      - createdAt
      - favourite
      - id
      - phoneCountry
      - phoneNumber
      - phonePlan
      - updatedAt
      - userId
      type: object
    SetPhoneFavouritedOptions:
      description: Options for setting phone favourite state
      example:
        state: true
      properties:
        state:
          description: Phone favourite state
          type: boolean
      required:
      - state
      type: object
    SetInboxFavouritedOptions:
      description: Options for setting inbox favourite state
      example:
        state: true
      properties:
        state:
          description: Is the inbox a favorite. Marking an inbox as a favorite is
            typically done in the dashboard for quick access or filtering
          type: boolean
      required:
      - state
      type: object
    InboxDto:
      description: "Representation of a MailSlurp inbox. An inbox has an ID and a\
        \ real email address. Emails can be sent to or from this email address. Inboxes\
        \ are either `SMTP` or `HTTP` mailboxes. The default, `HTTP` inboxes, use\
        \ AWS SES to process emails and are best suited as test email accounts and\
        \ do not support IMAP or POP3. `SMTP` inboxes use a custom mail server at\
        \ `mxslurp.click` and support SMTP login, IMAP and POP3. Use the `EmailController`\
        \ or the `InboxController` methods to send and receive emails and attachments.\
        \ Inboxes may have a description, name, and tags for display purposes. You\
        \ can also favourite an inbox for easier searching."
      example:
        inboxType: HTTP_INBOX
        accountRegion: US_WEST_2
        description: description
        readOnly: true
        favourite: true
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        expiresAt: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        virtualInbox: true
        functionsAs: ALIAS
        localPart: localPart
        domain: domain
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: ID of the inbox. The ID is a UUID-V4 format string. Use the
            inboxId for calls to Inbox and Email Controller endpoints. See the emailAddress
            property for the email address or the inbox. To get emails in an inbox
            use the WaitFor and Inbox Controller methods `waitForLatestEmail` and
            `getEmails` methods respectively. Inboxes can be used with aliases to
            forward emails automatically.
          format: uuid
          type: string
        userId:
          description: ID of user that inbox belongs to
          format: uuid
          nullable: true
          type: string
        createdAt:
          description: When the inbox was created. Time stamps are in ISO DateTime
            Format `yyyy-MM-dd'T'HH:mm:ss.SSSXXX` e.g. `2000-10-31T01:30:00.000-05:00`.
          format: date-time
          type: string
        name:
          description: Name of the inbox and used as the sender name when sending
            emails .Displayed in the dashboard for easier search
          nullable: true
          type: string
        domainId:
          description: ID of custom domain used by the inbox if any
          format: uuid
          nullable: true
          type: string
        description:
          description: Description of an inbox for labelling and searching purposes
          nullable: true
          type: string
        emailAddress:
          description: The inbox's email address. Inbox projections and previews may
            not include the email address. To view the email address fetch the inbox
            entity directly. Send an email to this address and the inbox will receive
            and store it for you. Note the email address in MailSlurp match characters
            exactly and are case sensitive so `+123` additions are considered different
            addresses. To retrieve the email use the Inbox and Email Controller endpoints
            with the inbox ID.
          type: string
        expiresAt:
          description: "Inbox expiration time. When, if ever, the inbox should expire\
            \ and be deleted. If null then this inbox is permanent and the emails\
            \ in it won't be deleted. This is the default behavior unless expiration\
            \ date is set. If an expiration date is set and the time is reached MailSlurp\
            \ will expire the inbox and move it to an expired inbox entity. You can\
            \ still access the emails belonging to it but it can no longer send or\
            \ receive email."
          format: date-time
          nullable: true
          type: string
        favourite:
          description: Is the inbox a favorite inbox. Make an inbox a favorite is
            typically done in the dashboard for quick access or filtering
          type: boolean
        tags:
          description: Tags that inbox has been tagged with. Tags can be added to
            inboxes to group different inboxes within an account. You can also search
            for inboxes by tag in the dashboard UI.
          items:
            description: Tags that inbox has been tagged with. Tags can be added to
              inboxes to group different inboxes within an account. You can also search
              for inboxes by tag in the dashboard UI.
            nullable: true
            type: string
          nullable: true
          type: array
        inboxType:
          description: Type of inbox. HTTP inboxes are faster and better for most
            cases. SMTP inboxes are more suited for public facing inbound messages
            (but cannot send).
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          nullable: true
          type: string
        readOnly:
          description: Is the inbox readOnly for the caller. Read only means can not
            be deleted or modified. This flag is present when using team accounts
            and shared inboxes.
          type: boolean
        virtualInbox:
          description: Virtual inbox can receive email but will not send emails to
            real recipients. Will save sent email record but never send an actual
            email. Perfect for testing mail server actions.
          type: boolean
        functionsAs:
          description: Inbox function if used as a primitive for another system.
          enum:
          - ALIAS
          - THREAD
          - CATCH_ALL
          - CONNECTOR
          - ACCOUNT
          - GUEST
          - OAUTH_CONNECTION_GMAIL
          nullable: true
          type: string
        localPart:
          description: Local part of email addresses before the @ symbol
          nullable: true
          type: string
        domain:
          description: Domain name of the email address
          nullable: true
          type: string
        accountRegion:
          description: Region of the inbox
          enum:
          - US_WEST_2
          nullable: true
          type: string
      required:
      - createdAt
      - emailAddress
      - favourite
      - id
      - readOnly
      - userId
      - virtualInbox
      title: Inbox
      type: object
    UpdateGroupContacts:
      description: Update group contacts options. Pass a list of contact ids to replace
        existing group contacts.
      example:
        contactIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        contactIds:
          items:
            format: uuid
            type: string
          type: array
      required:
      - contactIds
      type: object
    ContactDto:
      description: Contact object. For saving a user in contact book.
      example:
        firstName: firstName
        lastName: lastName
        metaData: "{}"
        optOut: true
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddresses:
        - emailAddresses
        - emailAddresses
        groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        company: company
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        primaryEmailAddress: primaryEmailAddress
        tags:
        - tags
        - tags
      properties:
        id:
          format: uuid
          type: string
        groupId:
          format: uuid
          nullable: true
          type: string
        firstName:
          nullable: true
          type: string
        lastName:
          nullable: true
          type: string
        company:
          nullable: true
          type: string
        emailAddresses:
          items:
            type: string
          type: array
        primaryEmailAddress:
          nullable: true
          type: string
        tags:
          items:
            type: string
          type: array
        metaData:
          nullable: true
          type: object
        optOut:
          nullable: true
          type: boolean
        createdAt:
          format: date-time
          type: string
      required:
      - createdAt
      - emailAddresses
      - id
      - tags
      type: object
    GroupContactsDto:
      description: Describes contacts attached to a contact group
      example:
        contacts:
        - firstName: firstName
          lastName: lastName
          metaData: "{}"
          optOut: true
          createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddresses:
          - emailAddresses
          - emailAddresses
          groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          company: company
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          primaryEmailAddress: primaryEmailAddress
          tags:
          - tags
          - tags
        - firstName: firstName
          lastName: lastName
          metaData: "{}"
          optOut: true
          createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddresses:
          - emailAddresses
          - emailAddresses
          groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          company: company
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          primaryEmailAddress: primaryEmailAddress
          tags:
          - tags
          - tags
        group:
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        group:
          $ref: '#/components/schemas/GroupDto'
        contacts:
          items:
            $ref: '#/components/schemas/ContactDto'
          type: array
      required:
      - contacts
      - group
      type: object
    GroupDto:
      description: Contact group data
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        description:
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
      required:
      - createdAt
      - id
      - name
      type: object
    JsonNode:
      nullable: true
      type: object
    InboxForwarderTestOptions:
      description: Options for testing an inbox forwarder against a value
      example:
        testValue: testValue
      properties:
        testValue:
          type: string
      required:
      - testValue
      type: object
    InboxForwarderTestResult:
      description: Results of inbox forwarder test
      example:
        doesMatch: true
        matches:
          key: true
      properties:
        matches:
          additionalProperties:
            type: boolean
          type: object
        doesMatch:
          type: boolean
      required:
      - doesMatch
      - matches
      type: object
    CreateInboxForwarderOptions:
      description: Options for creating an inbox forwarder
      example:
        field: RECIPIENTS
        forwardToRecipients:
        - forwardToRecipients
        - forwardToRecipients
        match: match
      properties:
        field:
          description: Field to match against to trigger inbox forwarding for inbound
            email
          enum:
          - RECIPIENTS
          - SENDER
          - SUBJECT
          - ATTACHMENTS
          type: string
        match:
          description: String or wildcard style match for field specified when evaluating
            forwarding rules
          type: string
        forwardToRecipients:
          description: Email addresses to forward an email to if it matches the field
            and match criteria of the forwarder
          items:
            description: Email addresses to forward an email to if it matches the
              field and match criteria of the forwarder
            type: string
          type: array
      required:
      - field
      - forwardToRecipients
      - match
      type: object
    InboxForwarderDto:
      description: Inbox forwarder. Describes how an inbox will forward matching emails
        to designated recipients.
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        field: RECIPIENTS
        forwardToRecipients:
        - forwardToRecipients
        - forwardToRecipients
        name: name
        match: match
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      externalDocs:
        url: https://docs.mailslurp.com/forwarders
      properties:
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          nullable: true
          type: string
        name:
          description: Name of inbox forwarder
          nullable: true
          type: string
        field:
          description: Which field to match against
          enum:
          - RECIPIENTS
          - SENDER
          - SUBJECT
          - ATTACHMENTS
          type: string
        match:
          description: Wild-card type pattern to apply to field
          type: string
        forwardToRecipients:
          description: Who to send forwarded email to
          items:
            description: Who to send forwarded email to
            type: string
          type: array
        createdAt:
          format: date-time
          type: string
      required:
      - createdAt
      - field
      - forwardToRecipients
      - id
      - match
      type: object
    ReplyToEmailOptions:
      description: Options for replying to email with API
      example:
        template: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sendStrategy: SINGLE_MESSAGE
        charset: charset
        useInboxName: true
        attachments:
        - attachments
        - attachments
        isHTML: true
        replyTo: replyTo
        from: from
        html: true
        body: body
        customHeaders:
          key: customHeaders
        templateVariables:
          key: "{}"
      properties:
        body:
          description: Body of the reply email you want to send
          type: string
        isHTML:
          description: Is the reply HTML
          type: boolean
        from:
          description: The from header that should be used. Optional
          nullable: true
          type: string
        replyTo:
          description: The replyTo header that should be used. Optional
          nullable: true
          type: string
        customHeaders:
          additionalProperties:
            description: Optional custom headers
            nullable: true
            type: string
          description: Optional custom headers
          nullable: true
          type: object
        charset:
          description: The charset that your message should be sent with. Optional.
            Default is UTF-8
          nullable: true
          type: string
        attachments:
          description: List of uploaded attachments to send with the reply. Optional.
          items:
            description: List of uploaded attachments to send with the reply. Optional.
            nullable: true
            type: string
          nullable: true
          type: array
        templateVariables:
          additionalProperties:
            description: Template variables if using a template
            nullable: true
            type: object
          description: Template variables if using a template
          nullable: true
          type: object
        template:
          description: Template ID to use instead of body. Will use template variable
            map to fill defined variable slots.
          format: uuid
          nullable: true
          type: string
        sendStrategy:
          description: How an email should be sent based on its recipients
          enum:
          - SINGLE_MESSAGE
          nullable: true
          type: string
        useInboxName:
          description: Optionally use inbox name as display name for sender email
            address
          nullable: true
          type: boolean
        html:
          type: boolean
          writeOnly: true
      required:
      - body
      - isHTML
      type: object
    EmailRecipients:
      description: "The `To`,`CC`,`BCC` recipients stored in object form with email\
        \ address and name accessible."
      example:
        cc:
        - emailAddress: emailAddress
          rawValue: rawValue
          name: name
        - emailAddress: emailAddress
          rawValue: rawValue
          name: name
        bcc:
        - emailAddress: emailAddress
          rawValue: rawValue
          name: name
        - emailAddress: emailAddress
          rawValue: rawValue
          name: name
        to:
        - emailAddress: emailAddress
          rawValue: rawValue
          name: name
        - emailAddress: emailAddress
          rawValue: rawValue
          name: name
      nullable: true
      properties:
        to:
          items:
            $ref: '#/components/schemas/Recipient'
          type: array
        cc:
          items:
            $ref: '#/components/schemas/Recipient'
          type: array
        bcc:
          items:
            $ref: '#/components/schemas/Recipient'
          type: array
      type: object
    Recipient:
      description: Email recipient
      example:
        emailAddress: emailAddress
        rawValue: rawValue
        name: name
      properties:
        rawValue:
          type: string
        emailAddress:
          type: string
        name:
          nullable: true
          type: string
      required:
      - emailAddress
      - rawValue
      type: object
    Sender:
      description: Sender object containing from email address and from personal name
        if provided in address
      example:
        emailAddress: emailAddress
        rawValue: rawValue
        name: name
      nullable: true
      properties:
        rawValue:
          type: string
        emailAddress:
          type: string
        name:
          type: string
      required:
      - emailAddress
      - rawValue
      type: object
    SentEmailDto:
      description: Sent email details
      example:
        charset: charset
        bcc:
        - bcc
        - bcc
        attachments:
        - attachments
        - attachments
        subject: subject
        messageIds:
        - messageIds
        - messageIds
        body: body
        templateId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        virtualSend: true
        threadId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        createdAt: 2000-01-23T04:56:07.000+00:00
        toContacts:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        from: from
        html: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        toGroup: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        cc:
        - cc
        - cc
        headers:
          key: headers
        inReplyTo: inReplyTo
        messageId: messageId
        pixelIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sentAt: 2000-01-23T04:56:07.000+00:00
        favourite: true
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        bodyMD5Hash: bodyMD5Hash
        templateVariables:
          key: "{}"
        sizeBytes: 0
        sender:
          emailAddress: emailAddress
          rawValue: rawValue
          name: name
        recipients:
          cc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          bcc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          to:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
        isHTML: true
        replyTo: replyTo
        textExcerpt: textExcerpt
        to:
        - to
        - to
        bodyExcerpt: bodyExcerpt
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: ID of sent email
          format: uuid
          type: string
        userId:
          description: User ID
          format: uuid
          type: string
        inboxId:
          description: Inbox ID email was sent from
          format: uuid
          type: string
        domainId:
          description: Domain ID
          format: uuid
          nullable: true
          type: string
        to:
          description: Recipients email was sent to
          items:
            description: Recipients email was sent to
            nullable: true
            type: string
          nullable: true
          type: array
        from:
          description: Sent from address
          nullable: true
          type: string
        sender:
          $ref: '#/components/schemas/Sender'
        recipients:
          $ref: '#/components/schemas/EmailRecipients'
        replyTo:
          nullable: true
          type: string
        cc:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        bcc:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        attachments:
          description: Array of IDs of attachments that were sent with this email
          items:
            description: Array of IDs of attachments that were sent with this email
            nullable: true
            type: string
          nullable: true
          type: array
        subject:
          nullable: true
          type: string
        bodyMD5Hash:
          description: MD5 Hash
          nullable: true
          type: string
        body:
          description: Sent email body
          nullable: true
          type: string
        toContacts:
          items:
            format: uuid
            nullable: true
            type: string
          nullable: true
          type: array
        toGroup:
          format: uuid
          nullable: true
          type: string
        charset:
          nullable: true
          type: string
        isHTML:
          nullable: true
          type: boolean
        sentAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        pixelIds:
          items:
            format: uuid
            nullable: true
            type: string
          nullable: true
          type: array
        messageId:
          description: RFC 5322 Message-ID header value without angle brackets.
          nullable: true
          type: string
        messageIds:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        virtualSend:
          nullable: true
          type: boolean
        templateId:
          format: uuid
          nullable: true
          type: string
        templateVariables:
          additionalProperties:
            nullable: true
            type: object
          nullable: true
          type: object
        headers:
          additionalProperties:
            nullable: true
            type: string
          nullable: true
          type: object
        threadId:
          description: MailSlurp thread ID for email chain that enables lookup for
            In-Reply-To and References fields.
          format: uuid
          nullable: true
          type: string
        bodyExcerpt:
          description: An excerpt of the body of the email message for quick preview.
            Takes HTML content part if exists falls back to TEXT content part if not
          nullable: true
          type: string
        textExcerpt:
          description: An excerpt of the body of the email message for quick preview.
            Takes TEXT content part if exists
          nullable: true
          type: string
        inReplyTo:
          description: Parsed value of In-Reply-To header. A Message-ID in a thread.
          nullable: true
          type: string
        favourite:
          description: Is email favourited
          nullable: true
          type: boolean
        sizeBytes:
          description: Size of raw email message in bytes
          format: int64
          nullable: true
          type: integer
        html:
          type: boolean
          writeOnly: true
      required:
      - createdAt
      - id
      - inboxId
      - sentAt
      - userId
      type: object
    UpdateDomainOptions:
      description: Options for creating a domain to use with MailSlurp. You must have
        ownership access to this domain in order to verify it. Domains will not functionally
        currently until the domain has been verified. See https://www.mailslurp.com/guides/custom-domains
        for help.
      example:
        catchAllInboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        catchAllInboxId:
          format: uuid
          nullable: true
          type: string
      type: object
    DomainDto:
      description: Domain plus verification records and status
      example:
        hasMissingRecords: true
        missingRecordsMessage: missingRecordsMessage
        isVerified: true
        domainType: HTTP_INBOX
        duplicateRecordsMessage: duplicateRecordsMessage
        verificationToken: verificationToken
        hasDuplicateRecords: true
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        domainNameRecords:
        - recordType: A
          alternativeRecordEntries:
          - alternativeRecordEntries
          - alternativeRecordEntries
          name: name
          label: VERIFICATION
          recordEntries:
          - recordEntries
          - recordEntries
          ttl: 0
          required: true
        - recordType: A
          alternativeRecordEntries:
          - alternativeRecordEntries
          - alternativeRecordEntries
          name: name
          label: VERIFICATION
          recordEntries:
          - recordEntries
          - recordEntries
          ttl: 0
          required: true
        catchAllInboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        createdAt: 2000-01-23T04:56:07.000+00:00
        domain: domain
        dkimTokens:
        - dkimTokens
        - dkimTokens
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        domain:
          description: Custom domain name
          type: string
        verificationToken:
          description: Verification tokens
          type: string
        dkimTokens:
          description: Unique token DKIM tokens
          items:
            description: Unique token DKIM tokens
            type: string
          type: array
        duplicateRecordsMessage:
          description: If the domain is duplicate records.
          nullable: true
          type: string
        hasDuplicateRecords:
          description: Whether the domain has duplicated required records. If true
            then see the domain in the dashboard app.
          type: boolean
        missingRecordsMessage:
          description: If the domain is missing records then show which pairs are
            missing.
          nullable: true
          type: string
        hasMissingRecords:
          description: Whether the domain has missing required records. If true then
            see the domain in the dashboard app.
          type: boolean
        isVerified:
          description: Whether domain has been verified or not. If the domain is not
            verified after 72 hours there is most likely an issue with the domains
            DNS records.
          type: boolean
        domainNameRecords:
          description: "List of DNS domain name records (C, MX, TXT) etc that you\
            \ must add to the DNS server associated with your domain provider."
          items:
            $ref: '#/components/schemas/DomainNameRecord'
          type: array
        catchAllInboxId:
          description: The optional catch all inbox that will receive emails sent
            to the domain that cannot be matched.
          format: uuid
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        domainType:
          description: Type of domain. Dictates type of inbox that can be created
            with domain. HTTP means inboxes are processed using SES while SMTP inboxes
            use a custom SMTP mail server. SMTP does not support sending so use HTTP
            for sending emails.
          enum:
          - HTTP_INBOX
          - SMTP_DOMAIN
          type: string
      required:
      - createdAt
      - dkimTokens
      - domain
      - domainNameRecords
      - domainType
      - hasDuplicateRecords
      - hasMissingRecords
      - id
      - isVerified
      - updatedAt
      - userId
      - verificationToken
      type: object
    DomainNameRecord:
      description: DNS Record required for verification of a domain. Record vary depending
        on domain type.
      example:
        recordType: A
        alternativeRecordEntries:
        - alternativeRecordEntries
        - alternativeRecordEntries
        name: name
        label: VERIFICATION
        recordEntries:
        - recordEntries
        - recordEntries
        ttl: 0
        required: true
      properties:
        label:
          description: Domain Name Server Record Label
          enum:
          - VERIFICATION
          - MX
          - SPF
          - DKIM
          - DMARC
          type: string
        required:
          type: boolean
        recordType:
          description: Domain Name Server Record Types
          enum:
          - A
          - NS
          - MD
          - MF
          - CNAME
          - SOA
          - MB
          - MG
          - MR
          - "NULL"
          - WKS
          - PTR
          - HINFO
          - MINFO
          - MX
          - TXT
          - RP
          - AFSDB
          - X25
          - ISDN
          - RT
          - NSAP
          - NSAP_PTR
          - SIG
          - KEY
          - PX
          - GPOS
          - AAAA
          - LOC
          - NXT
          - EID
          - NIMLOC
          - SRV
          - ATMA
          - NAPTR
          - KX
          - CERT
          - A6
          - DNAME
          - SINK
          - OPT
          - APL
          - DS
          - SSHFP
          - IPSECKEY
          - RRSIG
          - NSEC
          - DNSKEY
          - DHCID
          - NSEC3
          - NSEC3PARAM
          - TLSA
          - SMIMEA
          - HIP
          - NINFO
          - RKEY
          - TALINK
          - CDS
          - CDNSKEY
          - OPENPGPKEY
          - CSYNC
          - ZONEMD
          - SVCB
          - HTTPS
          - SPF
          - UINFO
          - UID
          - GID
          - UNSPEC
          - NID
          - L32
          - L64
          - LP
          - EUI48
          - EUI64
          - TKEY
          - TSIG
          - IXFR
          - AXFR
          - MAILB
          - MAILA
          - ANY
          - URI
          - CAA
          - AVC
          - DOA
          - AMTRELAY
          - TA
          - DLV
          type: string
        name:
          type: string
        recordEntries:
          items:
            type: string
          type: array
        ttl:
          format: int64
          type: integer
        alternativeRecordEntries:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
      required:
      - label
      - name
      - recordEntries
      - recordType
      - required
      - ttl
      type: object
    CreateConnectorOptions:
      description: Options for creating an inbox connection with an external mail
        provider
      example:
        emailAddress: emailAddress
        name: name
        enabled: true
      properties:
        name:
          description: Name of connector
          nullable: true
          type: string
        emailAddress:
          description: Email address of external inbox
          nullable: true
          type: string
        enabled:
          description: Is connector enabled
          nullable: true
          type: boolean
      type: object
    ConnectorDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        enabled: true
      properties:
        id:
          format: uuid
          type: string
        name:
          nullable: true
          type: string
        enabled:
          type: boolean
        emailAddress:
          nullable: true
          type: string
        userId:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        createdAt:
          format: date-time
          type: string
      required:
      - createdAt
      - enabled
      - id
      - inboxId
      - userId
      type: object
    UpdateAliasOptions:
      description: Update an email alias
      example:
        name: name
      properties:
        name:
          description: Optional name for alias
          nullable: true
          type: string
      type: object
    AliasDto:
      description: Email alias representation
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        isVerified: true
        maskedEmailAddress: maskedEmailAddress
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        useThreads: true
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        emailAddress:
          description: The alias's email address for receiving email
          type: string
        maskedEmailAddress:
          description: The underlying email address that is hidden and will received
            forwarded email
          nullable: true
          type: string
        userId:
          format: uuid
          type: string
        inboxId:
          description: Inbox that is associated with the alias
          format: uuid
          type: string
        name:
          nullable: true
          type: string
        useThreads:
          description: If alias will generate response threads or not when email are
            received by it
          nullable: true
          type: boolean
        isVerified:
          description: Has the alias been verified. You must verify an alias if the
            masked email address has not yet been verified by your account
          type: boolean
        domainId:
          description: Domain ID associated with the alias
          format: uuid
          nullable: true
          type: string
        createdAt:
          format: date-time
          nullable: true
          type: string
        updatedAt:
          format: date-time
          nullable: true
          type: string
      required:
      - emailAddress
      - id
      - inboxId
      - isVerified
      - userId
      type: object
    ReplyToAliasEmailOptions:
      description: Options for replying to an alias email using the alias inbox
      example:
        template: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sendStrategy: SINGLE_MESSAGE
        charset: charset
        useInboxName: true
        attachments:
        - attachments
        - attachments
        isHTML: true
        html: true
        body: body
        customHeaders:
          key: customHeaders
        templateVariables:
          key: "{}"
      properties:
        body:
          description: Body of the reply email you want to send
          type: string
        isHTML:
          description: Is the reply HTML
          type: boolean
        charset:
          description: The charset that your message should be sent with. Optional.
            Default is UTF-8
          nullable: true
          type: string
        attachments:
          description: List of uploaded attachments to send with the reply. Optional.
          items:
            description: List of uploaded attachments to send with the reply. Optional.
            nullable: true
            type: string
          nullable: true
          type: array
        templateVariables:
          additionalProperties:
            description: Template variables if using a template
            nullable: true
            type: object
          description: Template variables if using a template
          nullable: true
          type: object
        template:
          description: Template ID to use instead of body. Will use template variable
            map to fill defined variable slots.
          format: uuid
          nullable: true
          type: string
        sendStrategy:
          description: How an email should be sent based on its recipients
          enum:
          - SINGLE_MESSAGE
          nullable: true
          type: string
        customHeaders:
          additionalProperties:
            description: Optional custom headers
            nullable: true
            type: string
          description: Optional custom headers
          nullable: true
          type: object
        useInboxName:
          description: Optionally use inbox name as display name for sender email
            address
          nullable: true
          type: boolean
        html:
          type: boolean
          writeOnly: true
      required:
      - body
      - isHTML
      type: object
    BasicAuthOptions:
      description: Basic Authentication options for webhooks. Will be used is present
        when calling webhook endpoints.
      example:
        password: password
        username: username
      nullable: true
      properties:
        username:
          type: string
        password:
          type: string
      required:
      - password
      - username
      type: object
    CreateWebhookOptions:
      description: Options for creating a webhook. Webhooks can be attached to inboxes
        and MailSlurp will POST a webhook payload to the URL specified whenever the
        webhook's event is triggered. Webhooks are great for processing many inbound
        emails and responding to other events at scale. Customize the payload sent
        to your endpoint by setting the `requestBodyTemplate` property to a string
        with moustache style variables. Property names from the standard payload model
        for the given event are available as variables.
      example:
        useStaticIpRange: false
        ignoreInsecureSslCertificates: true
        aiTransformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        requestBodyTemplate: requestBodyTemplate
        basicAuth:
          password: password
          username: username
        name: name
        eventName: EMAIL_RECEIVED
        includeHeaders:
          headers:
          - name: name
            value: value
          - name: name
            value: value
        url: url
        tags:
        - tags
        - tags
      properties:
        url:
          description: Public URL on your server that MailSlurp can post WebhookNotification
            payload to when an email is received or an event is trigger. The payload
            of the submitted JSON is dependent on the webhook event type. See docs.mailslurp.com/webhooks
            for event payload documentation.
          type: string
        basicAuth:
          $ref: '#/components/schemas/BasicAuthOptions'
        name:
          description: Optional name for the webhook
          nullable: true
          type: string
        eventName:
          description: Optional webhook event name. Default is `EMAIL_RECEIVED` and
            is triggered when an email is received by the inbox associated with the
            webhook. Payload differ according to the webhook event name.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          nullable: true
          type: string
        includeHeaders:
          $ref: '#/components/schemas/WebhookHeaders'
        requestBodyTemplate:
          description: "Template for the JSON body of the webhook request that will\
            \ be sent to your server. Use Moustache style `{{variableName}}` templating\
            \ to use parts of the standard webhook payload for the given event."
          nullable: true
          type: string
        aiTransformId:
          description: AI Transform ID to apply to the webhook event and send a payload
            matching transform output schema
          format: uuid
          nullable: true
          type: string
        useStaticIpRange:
          default: false
          description: Use static IP range when calling webhook endpoint
          nullable: true
          type: boolean
        ignoreInsecureSslCertificates:
          description: Ignore insecure SSL certificates when sending request. Useful
            for self-signed certs.
          nullable: true
          type: boolean
        tags:
          description: Optional list of tags
          items:
            description: Optional list of tags
            nullable: true
            type: string
          nullable: true
          type: array
      required:
      - url
      type: object
    WebhookTestRequest:
      description: Result of webhook test request
      example:
        headers:
          key: headers
        method: POST
        payload: payload
        url: url
      properties:
        url:
          type: string
        method:
          enum:
          - POST
          - DELETE
          - GET
          - PUT
          - PATCH
          - HEAD
          - OPTIONS
          - TRACE
          type: string
        headers:
          additionalProperties:
            type: string
          type: object
        payload:
          nullable: true
          type: string
      required:
      - headers
      - method
      - url
      type: object
    WebhookTestResponse:
      description: Response from webhook test request
      example:
        message: message
        statusCode: 0
      properties:
        statusCode:
          format: int32
          nullable: true
          type: integer
        message:
          nullable: true
          type: string
      type: object
    WebhookTestResult:
      description: Results of testing a webhook
      example:
        request:
          headers:
            key: headers
          method: POST
          payload: payload
          url: url
        response:
          message: message
          statusCode: 0
        message: message
      properties:
        message:
          nullable: true
          type: string
        response:
          $ref: '#/components/schemas/WebhookTestResponse'
        request:
          $ref: '#/components/schemas/WebhookTestRequest'
      required:
      - request
      - response
      type: object
    JSONSchemaDto:
      description: JSONSchema for payload
      example:
        value: value
      properties:
        value:
          type: string
      required:
      - value
      type: object
    AbstractWebhookPayload:
      description: "Abstract webhook payload. Use the correct payload type for your\
        \ webhook event type in order to access all the specific properties for that\
        \ event. See the `NEW_EMAIL`,`NEW_CONTACT`, `NEW_ATTACHMENT` and `EMAIL_OPENED`\
        \ payloads for the properties available for those events."
      example:
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        eventName: EMAIL_RECEIVED
        messageId: messageId
        webhookName: webhookName
      properties:
        eventName:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        messageId:
          type: string
        webhookId:
          format: uuid
          type: string
        webhookName:
          type: string
      required:
      - eventName
      - messageId
      - webhookId
      type: object
    VerifyWebhookSignatureOptions:
      example:
        signature: signature
        messageId: messageId
      properties:
        messageId:
          type: string
        signature:
          type: string
      required:
      - messageId
      - signature
      type: object
    VerifyWebhookSignatureResults:
      example:
        isValid: true
      properties:
        isValid:
          type: boolean
      required:
      - isValid
      type: object
    WebhookRedriveResult:
      description: Result of retrying webhook
      example:
        success: true
        webhookResultId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message: message
      properties:
        webhookResultId:
          format: uuid
          type: string
        success:
          type: boolean
        message:
          nullable: true
          type: string
      required:
      - success
      - webhookResultId
      type: object
    WebhookRedriveAllResult:
      description: Result of retrying all failed webhook
      example:
        success: true
        message: message
      properties:
        success:
          type: boolean
        message:
          nullable: true
          type: string
      required:
      - success
      type: object
    MatchOption:
      description: "Options for matching emails in an inbox. Each match option object\
        \ contains a `field`, `should` and `value` property. Together they form logical\
        \ conditions such as `SUBJECT` should `CONTAIN` value."
      example:
        field: SUBJECT
        should: MATCH
        value: value
      nullable: true
      properties:
        field:
          description: Fields of an email object that can be used to filter results
          enum:
          - SUBJECT
          - TO
          - BCC
          - CC
          - FROM
          - HEADERS
          title: MatchField
          type: string
        should:
          description: How the value of the email field specified should be compared
            to the value given in the match options.
          enum:
          - MATCH
          - CONTAIN
          - EQUAL
          title: MatchShould
          type: string
        value:
          description: The value you wish to compare with the value of the field specified
            using the `should` value passed. For example `BODY` should `CONTAIN` a
            value passed.
          type: string
      required:
      - field
      - should
      - value
      type: object
    WaitForConditions:
      description: Conditions to apply to emails that you are waiting for
      example:
        delayTimeout: 6
        sortDirection: ASC
        before: 2000-01-23T04:56:07.000+00:00
        count: 0
        unreadOnly: true
        countType: EXACTLY
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        matches:
        - field: SUBJECT
          should: MATCH
          value: value
        - field: SUBJECT
          should: MATCH
          value: value
        timeout: 1
        since: 2000-01-23T04:56:07.000+00:00
      properties:
        inboxId:
          description: ID of inbox to search within and apply conditions to. Essentially
            filtering the emails found to give a count.
          format: uuid
          type: string
        count:
          description: Number of results that should match conditions. Either exactly
            or at least this amount based on the `countType`. If count condition is
            not met and the timeout has not been reached the `waitFor` method will
            retry the operation.
          format: int32
          nullable: true
          type: integer
        delayTimeout:
          description: Max time in milliseconds to wait between retries if a `timeout`
            is specified.
          format: int64
          nullable: true
          type: integer
        timeout:
          description: Max time in milliseconds to retry the `waitFor` operation until
            conditions are met.
          format: int64
          type: integer
        unreadOnly:
          description: "Apply conditions only to **unread** emails. All emails begin\
            \ with `read=false`. An email is marked `read=true` when an `EmailDto`\
            \ representation of it has been returned to the user at least once. For\
            \ example you have called `getEmail` or `waitForLatestEmail` etc., or\
            \ you have viewed the email in the dashboard."
          nullable: true
          type: boolean
        countType:
          description: How result size should be compared with the expected size.
            Exactly or at-least matching result?
          enum:
          - EXACTLY
          - ATLEAST
          nullable: true
          title: CountType
          type: string
        matches:
          description: Conditions that should be matched for an email to qualify for
            results. Each condition will be applied in order to each email within
            an inbox to filter a result list of matching emails you are waiting for.
          items:
            $ref: '#/components/schemas/MatchOption'
          nullable: true
          type: array
        sortDirection:
          description: Direction to sort matching emails by created time
          enum:
          - ASC
          - DESC
          nullable: true
          type: string
        since:
          description: ISO Date Time earliest time of email to consider. Filter for
            matching emails that were received after this date
          format: date-time
          nullable: true
          type: string
        before:
          description: ISO Date Time latest time of email to consider. Filter for
            matching emails that were received before this date
          format: date-time
          nullable: true
          type: string
      required:
      - inboxId
      - timeout
      type: object
    EmailPreview:
      description: Preview of an email message. For full message (including body and
        attachments) call the `getEmail` or other email endpoints with the provided
        email ID.
      example:
        cc:
        - cc
        - cc
        bcc:
        - bcc
        - bcc
        read: true
        attachments:
        - attachments
        - attachments
        subject: subject
        inReplyTo: inReplyTo
        bodyPartContentTypes:
        - bodyPartContentTypes
        - bodyPartContentTypes
        messageId: messageId
        favourite: true
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sizeBytes: 0
        threadId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        createdAt: 2000-01-23T04:56:07.000+00:00
        plusAddress: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sender:
          emailAddress: emailAddress
          rawValue: rawValue
          name: name
        recipients:
          cc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          bcc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          to:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
        from: from
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        to:
        - to
        - to
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: ID of the email entity
          format: uuid
          type: string
        inboxId:
          description: ID of the inbox that received the email
          format: uuid
          nullable: true
          type: string
        domainId:
          description: ID of the domain that received the email
          format: uuid
          nullable: true
          type: string
        subject:
          description: The subject line of the email message as specified by SMTP
            subject header
          nullable: true
          type: string
        to:
          description: List of `To` recipient email addresses that the email was addressed
            to. See recipients object for names.
          items:
            description: List of `To` recipient email addresses that the email was
              addressed to. See recipients object for names.
            nullable: true
            type: string
          nullable: true
          type: array
        from:
          description: Who the email was sent from. An email address - see fromName
            for the sender name.
          nullable: true
          type: string
        bcc:
          description: List of `BCC` recipients email addresses that the email was
            addressed to. See recipients object for names.
          items:
            description: List of `BCC` recipients email addresses that the email was
              addressed to. See recipients object for names.
            nullable: true
            type: string
          nullable: true
          type: array
        cc:
          description: List of `CC` recipients email addresses that the email was
            addressed to. See recipients object for names.
          items:
            description: List of `CC` recipients email addresses that the email was
              addressed to. See recipients object for names.
            nullable: true
            type: string
          nullable: true
          type: array
        createdAt:
          description: When was the email received by MailSlurp
          format: date-time
          type: string
        read:
          description: Read flag. Has the email ever been viewed in the dashboard
            or fetched via the API with a hydrated body? If so the email is marked
            as read. Paginated results do not affect read status. Read status is different
            to email opened event as it depends on your own account accessing the
            email. Email opened is determined by tracking pixels sent to other uses
            if enable during sending. You can listened for both email read and email
            opened events using webhooks.
          type: boolean
        attachments:
          description: "List of IDs of attachments found in the email. Use these IDs\
            \ with the Inbox and Email Controllers to download attachments and attachment\
            \ meta data such as filesize, name, extension."
          items:
            description: "List of IDs of attachments found in the email. Use these\
              \ IDs with the Inbox and Email Controllers to download attachments and\
              \ attachment meta data such as filesize, name, extension."
            nullable: true
            type: string
          nullable: true
          type: array
        threadId:
          description: MailSlurp thread ID for email chain that enables lookup for
            In-Reply-To and References fields.
          format: uuid
          nullable: true
          type: string
        messageId:
          description: RFC 5322 Message-ID header value without angle brackets.
          nullable: true
          type: string
        inReplyTo:
          description: Parsed value of In-Reply-To header. A Message-ID in a thread.
          nullable: true
          type: string
        sender:
          $ref: '#/components/schemas/Sender'
        recipients:
          $ref: '#/components/schemas/EmailRecipients'
        favourite:
          nullable: true
          type: boolean
        bodyPartContentTypes:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        plusAddress:
          format: uuid
          nullable: true
          type: string
        sizeBytes:
          format: int64
          nullable: true
          type: integer
      required:
      - createdAt
      - id
      - read
      - to
      type: object
    SmsMatchOption:
      description: "Options for matching SMS messages in a phone number. Each match\
        \ option object contains a `field`, `should` and `value` property. Together\
        \ they form logical conditions such as `BODY` should `CONTAIN` value."
      example:
        field: BODY
        should: MATCH
        value: value
      nullable: true
      properties:
        field:
          description: Fields of an SMS object that can be used to filter results
          enum:
          - BODY
          - FROM
          title: SmsMatchField
          type: string
        should:
          description: How the value of the email field specified should be compared
            to the value given in the match options.
          enum:
          - MATCH
          - CONTAIN
          - EQUAL
          title: MatchShould
          type: string
        value:
          description: The value you wish to compare with the value of the field specified
            using the `should` value passed. For example `BODY` should `CONTAIN` a
            value passed.
          type: string
      required:
      - field
      - should
      - value
      type: object
    WaitForSmsConditions:
      description: Conditions to apply to emails that you are waiting for
      example:
        delayTimeout: 1
        sortDirection: ASC
        before: 2000-01-23T04:56:07.000+00:00
        limit: 0
        count: 6
        unreadOnly: true
        countType: EXACTLY
        phoneNumberId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        matches:
        - field: BODY
          should: MATCH
          value: value
        - field: BODY
          should: MATCH
          value: value
        timeout: 5
        since: 2000-01-23T04:56:07.000+00:00
      properties:
        phoneNumberId:
          description: ID of phone number to search within and apply conditions to.
            Essentially filtering the SMS found to give a count.
          format: uuid
          type: string
        limit:
          description: Limit results
          format: int32
          nullable: true
          type: integer
        count:
          description: Number of results that should match conditions. Either exactly
            or at least this amount based on the `countType`. If count condition is
            not met and the timeout has not been reached the `waitFor` method will
            retry the operation.
          format: int64
          type: integer
        delayTimeout:
          description: Max time in milliseconds to wait between retries if a `timeout`
            is specified.
          format: int64
          nullable: true
          type: integer
        timeout:
          description: Max time in milliseconds to retry the `waitFor` operation until
            conditions are met.
          format: int64
          type: integer
        unreadOnly:
          description: "Apply conditions only to **unread** SMS. All SMS messages\
            \ begin with `read=false`. An SMS is marked `read=true` when an `SMS`\
            \ has been returned to the user at least once. For example you have called\
            \ `getSms`, or you have viewed the SMS in the dashboard."
          nullable: true
          type: boolean
        countType:
          description: How result size should be compared with the expected size.
            Exactly or at-least matching result?
          enum:
          - EXACTLY
          - ATLEAST
          nullable: true
          title: CountType
          type: string
        matches:
          description: Conditions that should be matched for an SMS to qualify for
            results. Each condition will be applied in order to each SMS within a
            phone number to filter a result list of matching SMSs you are waiting
            for.
          items:
            $ref: '#/components/schemas/SmsMatchOption'
          nullable: true
          type: array
        sortDirection:
          description: Direction to sort matching SMSs by created time
          enum:
          - ASC
          - DESC
          nullable: true
          type: string
        since:
          description: ISO Date Time earliest time of SMS to consider. Filter for
            matching SMSs that were received after this date
          format: date-time
          nullable: true
          type: string
        before:
          description: ISO Date Time latest time of SMS to consider. Filter for matching
            SMSs that were received before this date
          format: date-time
          nullable: true
          type: string
      required:
      - count
      - phoneNumberId
      - timeout
      type: object
    SmsPreview:
      example:
        fromNumber: fromNumber
        createdAt: 2000-01-23T04:56:07.000+00:00
        phoneNumber: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        read: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        body: body
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        body:
          type: string
        phoneNumber:
          format: uuid
          type: string
        fromNumber:
          type: string
        read:
          type: boolean
        createdAt:
          format: date-time
          type: string
      required:
      - body
      - createdAt
      - fromNumber
      - id
      - phoneNumber
      - read
      - userId
      type: object
    ConditionOption:
      description: Options for matching emails in an inbox based on a condition such
        as `HAS_ATTACHMENTS=TRUE`
      example:
        condition: HAS_ATTACHMENTS
        value: "TRUE"
      nullable: true
      properties:
        condition:
          description: Condition of an email object that can be used to filter results
          enum:
          - HAS_ATTACHMENTS
          title: ConditionField
          type: string
        value:
          description: Expected condition value
          enum:
          - "TRUE"
          - "FALSE"
          title: ConditionValue
          type: string
      required:
      - condition
      - value
      type: object
    MatchOptions:
      description: "Optional filter for matching emails based on fields. For instance\
        \ filter results to only include emails whose `SUBJECT` value does `CONTAIN`\
        \ given match value. An example payload would be `{ matches: [{ field: 'SUBJECT',\
        \ should: 'CONTAIN', value: 'Welcome' }] }`. You can also pass conditions\
        \ such as `HAS_ATTACHMENT`. If you wish to extract regex matches inside the\
        \ email content see the `getEmailContentMatch` method in the EmailController."
      example:
        conditions:
        - condition: HAS_ATTACHMENTS
          value: "TRUE"
        - condition: HAS_ATTACHMENTS
          value: "TRUE"
        matches:
        - field: SUBJECT
          should: MATCH
          value: value
        - field: SUBJECT
          should: MATCH
          value: value
      properties:
        matches:
          description: "Zero or more match options such as `{ field: 'SUBJECT', should:\
            \ 'CONTAIN', value: 'Welcome' }`. Options are additive so if one does\
            \ not match the email is excluded from results"
          items:
            $ref: '#/components/schemas/MatchOption'
          nullable: true
          type: array
        conditions:
          description: "Zero or more conditions such as `{ condition: 'HAS_ATTACHMENTS',\
            \ value: 'TRUE' }`. Note the values are the strings `TRUE|FALSE` not booleans."
          items:
            $ref: '#/components/schemas/ConditionOption'
          nullable: true
          type: array
      type: object
    Email:
      description: "Email entity (also known as EmailDto). When an SMTP email message\
        \ is received by MailSlurp it is parsed. The body and attachments are written\
        \ to disk and the fields such as to, from, subject etc are stored in a database.\
        \ The `body` contains the email content. If you want the original SMTP message\
        \ see the `getRawEmail` endpoints. The attachments can be fetched using the\
        \ AttachmentController"
      example:
        charset: charset
        xampHtml: true
        bcc:
        - bcc
        - bcc
        attachments:
        - attachments
        - attachments
        subject: subject
        isXAmpHtml: true
        body: body
        teamAccess: true
        threadId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        createdAt: 2000-01-23T04:56:07.000+00:00
        from: from
        headersMap:
          key:
          - headersMap
          - headersMap
        html: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
        cc:
        - cc
        - cc
        headers:
          key: headers
        read: true
        bodyPartContentTypes:
        - bodyPartContentTypes
        - bodyPartContentTypes
        inReplyTo: inReplyTo
        externalId: externalId
        messageId: messageId
        analysis:
          spamVerdict: spamVerdict
          virusVerdict: virusVerdict
          spfVerdict: spfVerdict
          dmarcVerdict: dmarcVerdict
          dkimVerdict: dkimVerdict
        favourite: true
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        bodyMD5Hash: bodyMD5Hash
        sizeBytes: 0
        sender:
          emailAddress: emailAddress
          rawValue: rawValue
          name: name
        recipients:
          cc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          bcc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          to:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
        isHTML: true
        replyTo: replyTo
        textExcerpt: textExcerpt
        to:
        - to
        - to
        bodyExcerpt: bodyExcerpt
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: ID of the email entity
          format: uuid
          type: string
        userId:
          description: ID of user that email belongs to
          format: uuid
          type: string
        inboxId:
          description: ID of the inbox that received the email
          format: uuid
          type: string
        domainId:
          description: ID of the domain that received the email
          format: uuid
          nullable: true
          type: string
        to:
          description: List of `To` recipient email addresses that the email was addressed
            to. See recipients object for names.
          items:
            description: List of `To` recipient email addresses that the email was
              addressed to. See recipients object for names.
            type: string
          type: array
        from:
          description: Who the email was sent from. An email address - see fromName
            for the sender name.
          nullable: true
          type: string
        sender:
          $ref: '#/components/schemas/Sender'
        recipients:
          $ref: '#/components/schemas/EmailRecipients'
        replyTo:
          description: The `replyTo` field on the received email message
          nullable: true
          type: string
        cc:
          description: List of `CC` recipients email addresses that the email was
            addressed to. See recipients object for names.
          items:
            description: List of `CC` recipients email addresses that the email was
              addressed to. See recipients object for names.
            nullable: true
            type: string
          nullable: true
          type: array
        bcc:
          description: List of `BCC` recipients email addresses that the email was
            addressed to. See recipients object for names.
          items:
            description: List of `BCC` recipients email addresses that the email was
              addressed to. See recipients object for names.
            nullable: true
            type: string
          nullable: true
          type: array
        headers:
          additionalProperties:
            deprecated: true
            description: Collection of SMTP headers attached to email
            nullable: true
            type: string
          deprecated: true
          description: Collection of SMTP headers attached to email
          nullable: true
          type: object
        headersMap:
          additionalProperties:
            description: Multi-value map of SMTP headers attached to email
            items:
              description: Multi-value map of SMTP headers attached to email
              nullable: true
              type: string
            nullable: true
            type: array
          description: Multi-value map of SMTP headers attached to email
          nullable: true
          type: object
        attachments:
          description: "List of IDs of attachments found in the email. Use these IDs\
            \ with the Inbox and Email Controllers to download attachments and attachment\
            \ meta data such as filesize, name, extension."
          items:
            description: "List of IDs of attachments found in the email. Use these\
              \ IDs with the Inbox and Email Controllers to download attachments and\
              \ attachment meta data such as filesize, name, extension."
            nullable: true
            type: string
          nullable: true
          type: array
        subject:
          description: The subject line of the email message as specified by SMTP
            subject header
          nullable: true
          type: string
        body:
          description: The body of the email message as text parsed from the SMTP
            message body (does not include attachments). Fetch the raw content to
            access the SMTP message and use the attachments property to access attachments.
            The body is stored separately to the email entity so the body is not returned
            in paginated results only in full single email or wait requests.
          nullable: true
          type: string
        bodyExcerpt:
          description: An excerpt of the body of the email message for quick preview.
            Takes HTML content part if exists falls back to TEXT content part if not
          nullable: true
          type: string
        textExcerpt:
          description: An excerpt of the body of the email message for quick preview.
            Takes TEXT content part if exists
          nullable: true
          type: string
        bodyMD5Hash:
          description: A hash signature of the email message using MD5. Useful for
            comparing emails without fetching full body.
          nullable: true
          type: string
        isHTML:
          description: Is the email body content type HTML?
          nullable: true
          type: boolean
        charset:
          description: Detected character set of the email body such as UTF-8
          nullable: true
          type: string
        analysis:
          $ref: '#/components/schemas/EmailAnalysis'
        createdAt:
          description: When was the email received by MailSlurp
          format: date-time
          type: string
        updatedAt:
          description: When was the email last updated
          format: date-time
          type: string
        read:
          description: Read flag. Has the email ever been viewed in the dashboard
            or fetched via the API with a hydrated body? If so the email is marked
            as read. Paginated results do not affect read status. Read status is different
            to email opened event as it depends on your own account accessing the
            email. Email opened is determined by tracking pixels sent to other uses
            if enable during sending. You can listened for both email read and email
            opened events using webhooks.
          type: boolean
        teamAccess:
          description: Can the email be accessed by organization team members
          type: boolean
        isXAmpHtml:
          description: Is the email body content type x-amp-html Amp4Email?
          nullable: true
          type: boolean
        bodyPartContentTypes:
          description: A list of detected multipart mime message body part content
            types such as text/plain and text/html. Can be used with email bodyPart
            endpoints to fetch individual body parts.
          items:
            description: A list of detected multipart mime message body part content
              types such as text/plain and text/html. Can be used with email bodyPart
              endpoints to fetch individual body parts.
            nullable: true
            type: string
          nullable: true
          type: array
        externalId:
          description: UID used by external IMAP server to identify email
          nullable: true
          type: string
        messageId:
          description: RFC 5322 Message-ID header value without angle brackets.
          nullable: true
          type: string
        threadId:
          description: MailSlurp thread ID for email chain that enables lookup for
            In-Reply-To and References fields.
          format: uuid
          nullable: true
          type: string
        inReplyTo:
          description: Parsed value of In-Reply-To header. A Message-ID in a thread.
          nullable: true
          type: string
        favourite:
          description: Is email favourited
          nullable: true
          type: boolean
        sizeBytes:
          description: Size of raw email message in bytes
          format: int64
          nullable: true
          type: integer
        html:
          type: boolean
          writeOnly: true
        xampHtml:
          type: boolean
          writeOnly: true
      required:
      - createdAt
      - id
      - inboxId
      - read
      - teamAccess
      - to
      - updatedAt
      - userId
      type: object
    EmailAnalysis:
      description: Analysis result for email. Each verdict property is a string PASS|FAIL|GRAY
        or dynamic error message
      example:
        spamVerdict: spamVerdict
        virusVerdict: virusVerdict
        spfVerdict: spfVerdict
        dmarcVerdict: dmarcVerdict
        dkimVerdict: dkimVerdict
      nullable: true
      properties:
        spamVerdict:
          description: Verdict of spam ranking analysis
          nullable: true
          type: string
        virusVerdict:
          description: Verdict of virus scan analysis
          nullable: true
          type: string
        spfVerdict:
          description: Verdict of Send Policy Framework record spoofing analysis
          nullable: true
          type: string
        dkimVerdict:
          description: Verdict of DomainKeys Identified Mail analysis
          nullable: true
          type: string
        dmarcVerdict:
          description: Verdict of Domain-based Message Authentication Reporting and
            Conformance analysis
          nullable: true
          type: string
      type: object
    WaitForSingleSmsOptions:
      example:
        sortDirection: ASC
        delay: 6
        before: 2000-01-23T04:56:07.000+00:00
        unreadOnly: true
        phoneNumberId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        timeout: 0
        since: 2000-01-23T04:56:07.000+00:00
      properties:
        phoneNumberId:
          format: uuid
          type: string
        timeout:
          format: int64
          type: integer
        unreadOnly:
          type: boolean
        before:
          format: date-time
          type: string
        since:
          format: date-time
          type: string
        sortDirection:
          enum:
          - ASC
          - DESC
          type: string
        delay:
          format: int64
          type: integer
      required:
      - phoneNumberId
      - timeout
      type: object
    CreateTrackingPixelOptions:
      description: Options for creating a tracking pixel for email open tracking
      example:
        name: name
        recipient: recipient
      properties:
        name:
          nullable: true
          type: string
        recipient:
          nullable: true
          type: string
      type: object
    TrackingPixelDto:
      description: Tracking pixel
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        seenAt: 2000-01-23T04:56:07.000+00:00
        sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        recipient: recipient
        html: html
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        seen: true
        url: url
      properties:
        id:
          format: uuid
          type: string
        seen:
          type: boolean
        recipient:
          nullable: true
          type: string
        html:
          type: string
        url:
          type: string
        inboxId:
          format: uuid
          nullable: true
          type: string
        sentEmailId:
          format: uuid
          nullable: true
          type: string
        seenAt:
          format: date-time
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
      required:
      - createdAt
      - html
      - id
      - seen
      - url
      type: object
    LookupTlsReportingDomainOptions:
      example:
        host: host
      properties:
        host:
          type: string
      required:
      - host
      type: object
    DNSLookupOptions:
      description: Options for DNS query.
      example:
        omitFinalDNSDot: true
        hostname: hostname
        recordTypes:
        - A
        - A
      properties:
        hostname:
          description: "List of record types you wish to query such as MX, DNS, TXT,\
            \ NS, A etc."
          type: string
        recordTypes:
          description: "List of record types you wish to query such as MX, DNS, TXT,\
            \ NS, A etc."
          items:
            description: Domain Name Server Record Types
            enum:
            - A
            - NS
            - MD
            - MF
            - CNAME
            - SOA
            - MB
            - MG
            - MR
            - "NULL"
            - WKS
            - PTR
            - HINFO
            - MINFO
            - MX
            - TXT
            - RP
            - AFSDB
            - X25
            - ISDN
            - RT
            - NSAP
            - NSAP_PTR
            - SIG
            - KEY
            - PX
            - GPOS
            - AAAA
            - LOC
            - NXT
            - EID
            - NIMLOC
            - SRV
            - ATMA
            - NAPTR
            - KX
            - CERT
            - A6
            - DNAME
            - SINK
            - OPT
            - APL
            - DS
            - SSHFP
            - IPSECKEY
            - RRSIG
            - NSEC
            - DNSKEY
            - DHCID
            - NSEC3
            - NSEC3PARAM
            - TLSA
            - SMIMEA
            - HIP
            - NINFO
            - RKEY
            - TALINK
            - CDS
            - CDNSKEY
            - OPENPGPKEY
            - CSYNC
            - ZONEMD
            - SVCB
            - HTTPS
            - SPF
            - UINFO
            - UID
            - GID
            - UNSPEC
            - NID
            - L32
            - L64
            - LP
            - EUI48
            - EUI64
            - TKEY
            - TSIG
            - IXFR
            - AXFR
            - MAILB
            - MAILA
            - ANY
            - URI
            - CAA
            - AVC
            - DOA
            - AMTRELAY
            - TA
            - DLV
            type: string
          type: array
        omitFinalDNSDot:
          description: Optionally control whether to omit the final dot in full DNS
            name values.
          type: boolean
      required:
      - hostname
      - omitFinalDNSDot
      - recordTypes
      type: object
    DNSLookupResult:
      description: "DNS lookup result. Includes record type, time to live, raw response,\
        \ and name value for the name server response."
      example:
        recordType: A
        name: name
        ttl: 0
        recordEntries:
        - recordEntries
        - recordEntries
      properties:
        recordType:
          description: Domain Name Server Record Types
          enum:
          - A
          - NS
          - MD
          - MF
          - CNAME
          - SOA
          - MB
          - MG
          - MR
          - "NULL"
          - WKS
          - PTR
          - HINFO
          - MINFO
          - MX
          - TXT
          - RP
          - AFSDB
          - X25
          - ISDN
          - RT
          - NSAP
          - NSAP_PTR
          - SIG
          - KEY
          - PX
          - GPOS
          - AAAA
          - LOC
          - NXT
          - EID
          - NIMLOC
          - SRV
          - ATMA
          - NAPTR
          - KX
          - CERT
          - A6
          - DNAME
          - SINK
          - OPT
          - APL
          - DS
          - SSHFP
          - IPSECKEY
          - RRSIG
          - NSEC
          - DNSKEY
          - DHCID
          - NSEC3
          - NSEC3PARAM
          - TLSA
          - SMIMEA
          - HIP
          - NINFO
          - RKEY
          - TALINK
          - CDS
          - CDNSKEY
          - OPENPGPKEY
          - CSYNC
          - ZONEMD
          - SVCB
          - HTTPS
          - SPF
          - UINFO
          - UID
          - GID
          - UNSPEC
          - NID
          - L32
          - L64
          - LP
          - EUI48
          - EUI64
          - TKEY
          - TSIG
          - IXFR
          - AXFR
          - MAILB
          - MAILA
          - ANY
          - URI
          - CAA
          - AVC
          - DOA
          - AMTRELAY
          - TA
          - DLV
          type: string
        ttl:
          format: int64
          type: integer
        recordEntries:
          items:
            type: string
          type: array
        name:
          type: string
      required:
      - name
      - recordEntries
      - recordType
      - ttl
      type: object
    LookupTlsReportingDomainResults:
      example:
        valid: true
        records:
        - recordType: A
          name: name
          ttl: 0
          recordEntries:
          - recordEntries
          - recordEntries
        - recordType: A
          name: name
          ttl: 0
          recordEntries:
          - recordEntries
          - recordEntries
        query:
          omitFinalDNSDot: true
          hostname: hostname
          recordTypes:
          - A
          - A
        warnings:
        - warnings
        - warnings
        errors:
        - errors
        - errors
      properties:
        valid:
          type: boolean
        query:
          $ref: '#/components/schemas/DNSLookupOptions'
        records:
          items:
            $ref: '#/components/schemas/DNSLookupResult'
          type: array
        errors:
          items:
            type: string
          type: array
        warnings:
          items:
            type: string
          type: array
      required:
      - errors
      - query
      - records
      - valid
      - warnings
      type: object
    LookupMtaStsDomainOptions:
      example:
        host: host
      properties:
        host:
          type: string
      required:
      - host
      type: object
    LookupMtaStsDomainResults:
      example:
        valid: true
        records:
        - recordType: A
          name: name
          ttl: 0
          recordEntries:
          - recordEntries
          - recordEntries
        - recordType: A
          name: name
          ttl: 0
          recordEntries:
          - recordEntries
          - recordEntries
        wellKnownPresent: true
        wellKnownValue: wellKnownValue
        query:
          omitFinalDNSDot: true
          hostname: hostname
          recordTypes:
          - A
          - A
        warnings:
        - warnings
        - warnings
        errors:
        - errors
        - errors
        wellKnownQuery: wellKnownQuery
      properties:
        valid:
          type: boolean
        query:
          $ref: '#/components/schemas/DNSLookupOptions'
        records:
          items:
            $ref: '#/components/schemas/DNSLookupResult'
          type: array
        wellKnownQuery:
          type: string
        wellKnownPresent:
          type: boolean
        wellKnownValue:
          type: string
        errors:
          items:
            type: string
          type: array
        warnings:
          items:
            type: string
          type: array
      required:
      - errors
      - query
      - records
      - valid
      - warnings
      - wellKnownPresent
      - wellKnownQuery
      - wellKnownValue
      type: object
    LookupDmarcDomainOptions:
      example:
        host: host
      properties:
        host:
          type: string
      required:
      - host
      type: object
    LookupDmarcDomainResults:
      example:
        valid: true
        records:
        - recordType: A
          name: name
          ttl: 0
          recordEntries:
          - recordEntries
          - recordEntries
        - recordType: A
          name: name
          ttl: 0
          recordEntries:
          - recordEntries
          - recordEntries
        query:
          omitFinalDNSDot: true
          hostname: hostname
          recordTypes:
          - A
          - A
        warnings:
        - warnings
        - warnings
        errors:
        - errors
        - errors
      properties:
        valid:
          type: boolean
        query:
          $ref: '#/components/schemas/DNSLookupOptions'
        records:
          items:
            $ref: '#/components/schemas/DNSLookupResult'
          type: array
        errors:
          items:
            type: string
          type: array
        warnings:
          items:
            type: string
          type: array
      required:
      - errors
      - query
      - records
      - valid
      - warnings
      type: object
    LookupBimiDomainOptions:
      example:
        host: host
      properties:
        host:
          type: string
      required:
      - host
      type: object
    LookupBimiDomainResults:
      example:
        valid: true
        records:
        - recordType: A
          name: name
          ttl: 0
          recordEntries:
          - recordEntries
          - recordEntries
        - recordType: A
          name: name
          ttl: 0
          recordEntries:
          - recordEntries
          - recordEntries
        query:
          omitFinalDNSDot: true
          hostname: hostname
          recordTypes:
          - A
          - A
        warnings:
        - warnings
        - warnings
        errors:
        - errors
        - errors
      properties:
        valid:
          type: boolean
        query:
          $ref: '#/components/schemas/DNSLookupOptions'
        records:
          items:
            $ref: '#/components/schemas/DNSLookupResult'
          type: array
        errors:
          items:
            type: string
          type: array
        warnings:
          items:
            type: string
          type: array
      required:
      - errors
      - query
      - records
      - valid
      - warnings
      type: object
    GenerateTlsReportingRecordOptions:
      example:
        reportingAddresses:
        - reportingAddresses
        - reportingAddresses
        reportingUrl: reportingUrl
        host: host
        version: TLSRPTv1
        ttl: 0
      properties:
        reportingAddresses:
          items:
            type: string
          type: array
        reportingUrl:
          type: string
        host:
          type: string
        version:
          enum:
          - TLSRPTv1
          type: string
        ttl:
          format: int32
          type: integer
      required:
      - host
      - reportingAddresses
      - ttl
      - version
      type: object
    GenerateTlsReportingRecordResults:
      example:
        name: name
        type: A
        ttl: 0
        value: value
      properties:
        name:
          type: string
        type:
          description: Domain Name Server Record Types
          enum:
          - A
          - NS
          - MD
          - MF
          - CNAME
          - SOA
          - MB
          - MG
          - MR
          - "NULL"
          - WKS
          - PTR
          - HINFO
          - MINFO
          - MX
          - TXT
          - RP
          - AFSDB
          - X25
          - ISDN
          - RT
          - NSAP
          - NSAP_PTR
          - SIG
          - KEY
          - PX
          - GPOS
          - AAAA
          - LOC
          - NXT
          - EID
          - NIMLOC
          - SRV
          - ATMA
          - NAPTR
          - KX
          - CERT
          - A6
          - DNAME
          - SINK
          - OPT
          - APL
          - DS
          - SSHFP
          - IPSECKEY
          - RRSIG
          - NSEC
          - DNSKEY
          - DHCID
          - NSEC3
          - NSEC3PARAM
          - TLSA
          - SMIMEA
          - HIP
          - NINFO
          - RKEY
          - TALINK
          - CDS
          - CDNSKEY
          - OPENPGPKEY
          - CSYNC
          - ZONEMD
          - SVCB
          - HTTPS
          - SPF
          - UINFO
          - UID
          - GID
          - UNSPEC
          - NID
          - L32
          - L64
          - LP
          - EUI48
          - EUI64
          - TKEY
          - TSIG
          - IXFR
          - AXFR
          - MAILB
          - MAILA
          - ANY
          - URI
          - CAA
          - AVC
          - DOA
          - AMTRELAY
          - TA
          - DLV
          type: string
        ttl:
          format: int32
          type: integer
        value:
          type: string
      required:
      - name
      - ttl
      - type
      - value
      type: object
    GenerateMtaStsRecordOptions:
      example:
        mode: TESTING
        mxRecords:
        - mxRecords
        - mxRecords
        host: host
        maxAgeSeconds: 6
        version: STSv1
        ttl: 0
      properties:
        host:
          type: string
        version:
          enum:
          - STSv1
          type: string
        mode:
          enum:
          - TESTING
          - ENFORCE
          - NONE
          type: string
        ttl:
          format: int32
          type: integer
        maxAgeSeconds:
          format: int32
          type: integer
        mxRecords:
          items:
            type: string
          type: array
      required:
      - host
      - maxAgeSeconds
      - mode
      - mxRecords
      - ttl
      - version
      type: object
    GenerateMtaStsRecordResults:
      example:
        wellKnownUrl: wellKnownUrl
        wellKnownValue: wellKnownValue
        name: name
        type: A
        ttl: 0
        value: value
      properties:
        name:
          type: string
        type:
          description: Domain Name Server Record Types
          enum:
          - A
          - NS
          - MD
          - MF
          - CNAME
          - SOA
          - MB
          - MG
          - MR
          - "NULL"
          - WKS
          - PTR
          - HINFO
          - MINFO
          - MX
          - TXT
          - RP
          - AFSDB
          - X25
          - ISDN
          - RT
          - NSAP
          - NSAP_PTR
          - SIG
          - KEY
          - PX
          - GPOS
          - AAAA
          - LOC
          - NXT
          - EID
          - NIMLOC
          - SRV
          - ATMA
          - NAPTR
          - KX
          - CERT
          - A6
          - DNAME
          - SINK
          - OPT
          - APL
          - DS
          - SSHFP
          - IPSECKEY
          - RRSIG
          - NSEC
          - DNSKEY
          - DHCID
          - NSEC3
          - NSEC3PARAM
          - TLSA
          - SMIMEA
          - HIP
          - NINFO
          - RKEY
          - TALINK
          - CDS
          - CDNSKEY
          - OPENPGPKEY
          - CSYNC
          - ZONEMD
          - SVCB
          - HTTPS
          - SPF
          - UINFO
          - UID
          - GID
          - UNSPEC
          - NID
          - L32
          - L64
          - LP
          - EUI48
          - EUI64
          - TKEY
          - TSIG
          - IXFR
          - AXFR
          - MAILB
          - MAILA
          - ANY
          - URI
          - CAA
          - AVC
          - DOA
          - AMTRELAY
          - TA
          - DLV
          type: string
        ttl:
          format: int32
          type: integer
        value:
          type: string
        wellKnownValue:
          type: string
        wellKnownUrl:
          type: string
      required:
      - name
      - ttl
      - type
      - value
      - wellKnownUrl
      - wellKnownValue
      type: object
    GenerateDmarcRecordOptions:
      example:
        reportEmailAddress:
        - reportEmailAddress
        - reportEmailAddress
        subdomainPolicy: NONE
        aspf: STRICT
        domain: domain
        percentage: 8
        adkim: STRICT
        fo: FO_0
        reportFormat: AFRF
        secondsBetweenReports: 6
        version: DMARC1
        forensicEmailAddress:
        - forensicEmailAddress
        - forensicEmailAddress
        policy: NONE
      properties:
        domain:
          type: string
        version:
          enum:
          - DMARC1
          type: string
        policy:
          enum:
          - NONE
          - QUARANTINE
          - REJECT
          type: string
        subdomainPolicy:
          enum:
          - NONE
          - QUARANTINE
          - REJECT
          type: string
        reportEmailAddress:
          items:
            type: string
          type: array
        forensicEmailAddress:
          items:
            type: string
          type: array
        percentage:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        reportFormat:
          enum:
          - AFRF
          type: string
        secondsBetweenReports:
          format: int32
          type: integer
        adkim:
          enum:
          - STRICT
          - RELAXED
          type: string
        aspf:
          enum:
          - STRICT
          - RELAXED
          type: string
        fo:
          enum:
          - FO_0
          - FO_1
          - FO_D
          - FO_S
          type: string
      required:
      - domain
      - policy
      - version
      type: object
    GenerateDmarcRecordResults:
      example:
        name: name
        type: A
        ttl: 0
        value: value
      properties:
        name:
          type: string
        type:
          description: Domain Name Server Record Types
          enum:
          - A
          - NS
          - MD
          - MF
          - CNAME
          - SOA
          - MB
          - MG
          - MR
          - "NULL"
          - WKS
          - PTR
          - HINFO
          - MINFO
          - MX
          - TXT
          - RP
          - AFSDB
          - X25
          - ISDN
          - RT
          - NSAP
          - NSAP_PTR
          - SIG
          - KEY
          - PX
          - GPOS
          - AAAA
          - LOC
          - NXT
          - EID
          - NIMLOC
          - SRV
          - ATMA
          - NAPTR
          - KX
          - CERT
          - A6
          - DNAME
          - SINK
          - OPT
          - APL
          - DS
          - SSHFP
          - IPSECKEY
          - RRSIG
          - NSEC
          - DNSKEY
          - DHCID
          - NSEC3
          - NSEC3PARAM
          - TLSA
          - SMIMEA
          - HIP
          - NINFO
          - RKEY
          - TALINK
          - CDS
          - CDNSKEY
          - OPENPGPKEY
          - CSYNC
          - ZONEMD
          - SVCB
          - HTTPS
          - SPF
          - UINFO
          - UID
          - GID
          - UNSPEC
          - NID
          - L32
          - L64
          - LP
          - EUI48
          - EUI64
          - TKEY
          - TSIG
          - IXFR
          - AXFR
          - MAILB
          - MAILA
          - ANY
          - URI
          - CAA
          - AVC
          - DOA
          - AMTRELAY
          - TA
          - DLV
          type: string
        ttl:
          format: int32
          type: integer
        value:
          type: string
      required:
      - name
      - ttl
      - type
      - value
      type: object
    GenerateBimiRecordOptions:
      example:
        domain: domain
        vmcUrl: vmcUrl
        version: BIMI1
        logoUrl: logoUrl
      properties:
        domain:
          type: string
        version:
          enum:
          - BIMI1
          type: string
        logoUrl:
          type: string
        vmcUrl:
          type: string
      required:
      - domain
      - logoUrl
      - version
      type: object
    GenerateBimiRecordResults:
      example:
        name: name
        type: A
        ttl: 0
        value: value
      properties:
        name:
          type: string
        type:
          description: Domain Name Server Record Types
          enum:
          - A
          - NS
          - MD
          - MF
          - CNAME
          - SOA
          - MB
          - MG
          - MR
          - "NULL"
          - WKS
          - PTR
          - HINFO
          - MINFO
          - MX
          - TXT
          - RP
          - AFSDB
          - X25
          - ISDN
          - RT
          - NSAP
          - NSAP_PTR
          - SIG
          - KEY
          - PX
          - GPOS
          - AAAA
          - LOC
          - NXT
          - EID
          - NIMLOC
          - SRV
          - ATMA
          - NAPTR
          - KX
          - CERT
          - A6
          - DNAME
          - SINK
          - OPT
          - APL
          - DS
          - SSHFP
          - IPSECKEY
          - RRSIG
          - NSEC
          - DNSKEY
          - DHCID
          - NSEC3
          - NSEC3PARAM
          - TLSA
          - SMIMEA
          - HIP
          - NINFO
          - RKEY
          - TALINK
          - CDS
          - CDNSKEY
          - OPENPGPKEY
          - CSYNC
          - ZONEMD
          - SVCB
          - HTTPS
          - SPF
          - UINFO
          - UID
          - GID
          - UNSPEC
          - NID
          - L32
          - L64
          - LP
          - EUI48
          - EUI64
          - TKEY
          - TSIG
          - IXFR
          - AXFR
          - MAILB
          - MAILA
          - ANY
          - URI
          - CAA
          - AVC
          - DOA
          - AMTRELAY
          - TA
          - DLV
          type: string
        ttl:
          format: int32
          type: integer
        value:
          type: string
      required:
      - name
      - ttl
      - type
      - value
      type: object
    NewFakeEmailAddressResult:
      example:
        emailAddress: emailAddress
      properties:
        emailAddress:
          type: string
      required:
      - emailAddress
      type: object
    CheckEmailFeaturesClientSupportOptions:
      example:
        emailBody: emailBody
      properties:
        emailBody:
          type: string
      required:
      - emailBody
      type: object
    CheckEmailFeaturesClientSupportResults:
      example:
        result:
          names:
            family:
            - name: name
              slug: aol
            - name: name
              slug: aol
            category:
            - name: name
              slug: css
            - name: name
              slug: css
            platform:
            - name: name
              slug: android
            - name: name
              slug: android
          detectedFeatures:
          - amp
          - amp
          featureOverviews:
          - notes: notes
            feature: amp
            description: description
            statuses:
            - SUPPORTED
            - SUPPORTED
            title: title
            category: css
            featureStatistics:
            - feature: amp
              family: aol
              platforms:
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
            - feature: amp
              family: aol
              platforms:
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
            notesNumbers:
              key: notesNumbers
          - notes: notes
            feature: amp
            description: description
            statuses:
            - SUPPORTED
            - SUPPORTED
            title: title
            category: css
            featureStatistics:
            - feature: amp
              family: aol
              platforms:
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
            - feature: amp
              family: aol
              platforms:
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
            notesNumbers:
              key: notesNumbers
          featurePercentages:
          - percentage: 0.8008282
            status: SUPPORTED
          - percentage: 0.8008282
            status: SUPPORTED
      properties:
        result:
          $ref: '#/components/schemas/EmailFeatureSupportResult'
      required:
      - result
      type: object
    EmailFeatureCategoryName:
      example:
        name: name
        slug: css
      properties:
        slug:
          enum:
          - css
          - html
          - image
          - others
          type: string
        name:
          type: string
      required:
      - name
      - slug
      type: object
    EmailFeatureFamilyName:
      example:
        name: name
        slug: aol
      properties:
        slug:
          enum:
          - aol
          - apple-mail
          - fastmail
          - free-fr
          - gmail
          - gmx
          - hey
          - ionos-1and1
          - laposte
          - mail-ru
          - microsoft
          - orange
          - outlook
          - protonmail
          - rainloop
          - samsung-email
          - sfr
          - t-online-de
          - thunderbird
          - web-de
          - yahoo
          type: string
        name:
          type: string
      required:
      - name
      - slug
      type: object
    EmailFeatureFamilyStatistics:
      example:
        feature: amp
        family: aol
        platforms:
        - versions:
          - supportFlags:
              notes:
              - notes
              - notes
              status: SUPPORTED
            version: version
          - supportFlags:
              notes:
              - notes
              - notes
              status: SUPPORTED
            version: version
          platform: android
        - versions:
          - supportFlags:
              notes:
              - notes
              - notes
              status: SUPPORTED
            version: version
          - supportFlags:
              notes:
              - notes
              - notes
              status: SUPPORTED
            version: version
          platform: android
      properties:
        feature:
          enum:
          - amp
          - css-accent-color
          - css-align-items
          - css-animation
          - css-aspect-ratio
          - css-at-font-face
          - css-at-import
          - css-at-keyframes
          - css-at-media
          - css-at-supports
          - css-background-blend-mode
          - css-background-clip
          - css-background-color
          - css-background-image
          - css-background-origin
          - css-background-position
          - css-background-repeat
          - css-background-size
          - css-background
          - css-block-inline-size
          - css-border-image
          - css-border-inline-block-individual
          - css-border-inline-block-longhand
          - css-border-inline-block
          - css-border-radius-logical
          - css-border-radius
          - css-border
          - css-box-shadow
          - css-box-sizing
          - css-caption-side
          - css-clip-path
          - css-column-count
          - css-column-layout-properties
          - css-direction
          - css-display-flex
          - css-display-grid
          - css-display-none
          - css-display
          - css-filter
          - css-flex-direction
          - css-flex-wrap
          - css-float
          - css-font-kerning
          - css-font-weight
          - css-font
          - css-gap
          - css-grid-template
          - css-height
          - css-hyphens
          - css-inline-size
          - css-justify-content
          - css-left-right-top-bottom
          - css-letter-spacing
          - css-line-height
          - css-list-style-image
          - css-list-style-position
          - css-list-style-type
          - css-list-style
          - css-margin-block-start-end
          - css-margin-inline-block
          - css-margin-inline-start-end
          - css-margin-inline
          - css-margin
          - css-max-block-size
          - css-max-height
          - css-max-width
          - css-min-height
          - css-min-inline-size
          - css-min-width
          - css-mix-blend-mode
          - css-object-fit
          - css-object-position
          - css-opacity
          - css-outline-offset
          - css-outline
          - css-overflow-wrap
          - css-overflow
          - css-padding-block-start-end
          - css-padding-inline-block
          - css-padding-inline-start-end
          - css-padding
          - css-position
          - css-tab-size
          - css-table-layout
          - css-text-align-last
          - css-text-align
          - css-text-decoration-color
          - css-text-decoration-thickness
          - css-text-decoration
          - css-text-emphasis-position
          - css-text-emphasis
          - css-text-indent
          - css-text-overflow
          - css-text-shadow
          - css-text-transform
          - css-text-underline-offset
          - css-transform
          - css-vertical-align
          - css-visibility
          - css-white-space
          - css-width
          - css-word-break
          - css-writing-mode
          - css-z-index
          - html-abbr
          - html-address
          - html-align
          - html-anchor-links
          - html-aria-describedby
          - html-aria-hidden
          - html-aria-label
          - html-aria-labelledby
          - html-aria-live
          - html-audio
          - html-background
          - html-base
          - html-blockquote
          - html-body
          - html-button-reset
          - html-button-submit
          - html-code
          - html-del
          - html-dfn
          - html-dialog
          - html-dir
          - html-div
          - html-doctype
          - html-form
          - html-h1-h6
          - html-height
          - html-image-maps
          - html-input-checkbox
          - html-input-hidden
          - html-input-radio
          - html-input-reset
          - html-input-submit
          - html-input-text
          - html-lang
          - html-link
          - html-lists
          - html-loading-attribute
          - html-mailto-links
          - html-marquee
          - html-meter
          - html-object
          - html-p
          - html-picture
          - html-pre
          - html-progress
          - html-required
          - html-role
          - html-rp
          - html-rt
          - html-ruby
          - html-select
          - html-semantics
          - html-small
          - html-span
          - html-srcset
          - html-strike
          - html-strong
          - html-style
          - html-svg
          - html-table
          - html-target
          - html-textarea
          - html-valign
          - html-video
          - html-wbr
          - html-width
          - image-avif
          - image-base64
          - image-bmp
          - image-gif
          - image-ico
          - image-jpg
          - image-png
          - image-svg
          - image-webp
          - unsupported
          type: string
        family:
          enum:
          - aol
          - apple-mail
          - fastmail
          - free-fr
          - gmail
          - gmx
          - hey
          - ionos-1and1
          - laposte
          - mail-ru
          - microsoft
          - orange
          - outlook
          - protonmail
          - rainloop
          - samsung-email
          - sfr
          - t-online-de
          - thunderbird
          - web-de
          - yahoo
          type: string
        platforms:
          items:
            $ref: '#/components/schemas/EmailFeaturePlatformStatistics'
          type: array
      required:
      - family
      - feature
      - platforms
      type: object
    EmailFeatureNames:
      example:
        family:
        - name: name
          slug: aol
        - name: name
          slug: aol
        category:
        - name: name
          slug: css
        - name: name
          slug: css
        platform:
        - name: name
          slug: android
        - name: name
          slug: android
      properties:
        family:
          items:
            $ref: '#/components/schemas/EmailFeatureFamilyName'
          type: array
        platform:
          items:
            $ref: '#/components/schemas/EmailFeaturePlatformName'
          type: array
        category:
          items:
            $ref: '#/components/schemas/EmailFeatureCategoryName'
          type: array
      required:
      - category
      - family
      - platform
      type: object
    EmailFeatureOverview:
      example:
        notes: notes
        feature: amp
        description: description
        statuses:
        - SUPPORTED
        - SUPPORTED
        title: title
        category: css
        featureStatistics:
        - feature: amp
          family: aol
          platforms:
          - versions:
            - supportFlags:
                notes:
                - notes
                - notes
                status: SUPPORTED
              version: version
            - supportFlags:
                notes:
                - notes
                - notes
                status: SUPPORTED
              version: version
            platform: android
          - versions:
            - supportFlags:
                notes:
                - notes
                - notes
                status: SUPPORTED
              version: version
            - supportFlags:
                notes:
                - notes
                - notes
                status: SUPPORTED
              version: version
            platform: android
        - feature: amp
          family: aol
          platforms:
          - versions:
            - supportFlags:
                notes:
                - notes
                - notes
                status: SUPPORTED
              version: version
            - supportFlags:
                notes:
                - notes
                - notes
                status: SUPPORTED
              version: version
            platform: android
          - versions:
            - supportFlags:
                notes:
                - notes
                - notes
                status: SUPPORTED
              version: version
            - supportFlags:
                notes:
                - notes
                - notes
                status: SUPPORTED
              version: version
            platform: android
        notesNumbers:
          key: notesNumbers
      properties:
        feature:
          enum:
          - amp
          - css-accent-color
          - css-align-items
          - css-animation
          - css-aspect-ratio
          - css-at-font-face
          - css-at-import
          - css-at-keyframes
          - css-at-media
          - css-at-supports
          - css-background-blend-mode
          - css-background-clip
          - css-background-color
          - css-background-image
          - css-background-origin
          - css-background-position
          - css-background-repeat
          - css-background-size
          - css-background
          - css-block-inline-size
          - css-border-image
          - css-border-inline-block-individual
          - css-border-inline-block-longhand
          - css-border-inline-block
          - css-border-radius-logical
          - css-border-radius
          - css-border
          - css-box-shadow
          - css-box-sizing
          - css-caption-side
          - css-clip-path
          - css-column-count
          - css-column-layout-properties
          - css-direction
          - css-display-flex
          - css-display-grid
          - css-display-none
          - css-display
          - css-filter
          - css-flex-direction
          - css-flex-wrap
          - css-float
          - css-font-kerning
          - css-font-weight
          - css-font
          - css-gap
          - css-grid-template
          - css-height
          - css-hyphens
          - css-inline-size
          - css-justify-content
          - css-left-right-top-bottom
          - css-letter-spacing
          - css-line-height
          - css-list-style-image
          - css-list-style-position
          - css-list-style-type
          - css-list-style
          - css-margin-block-start-end
          - css-margin-inline-block
          - css-margin-inline-start-end
          - css-margin-inline
          - css-margin
          - css-max-block-size
          - css-max-height
          - css-max-width
          - css-min-height
          - css-min-inline-size
          - css-min-width
          - css-mix-blend-mode
          - css-object-fit
          - css-object-position
          - css-opacity
          - css-outline-offset
          - css-outline
          - css-overflow-wrap
          - css-overflow
          - css-padding-block-start-end
          - css-padding-inline-block
          - css-padding-inline-start-end
          - css-padding
          - css-position
          - css-tab-size
          - css-table-layout
          - css-text-align-last
          - css-text-align
          - css-text-decoration-color
          - css-text-decoration-thickness
          - css-text-decoration
          - css-text-emphasis-position
          - css-text-emphasis
          - css-text-indent
          - css-text-overflow
          - css-text-shadow
          - css-text-transform
          - css-text-underline-offset
          - css-transform
          - css-vertical-align
          - css-visibility
          - css-white-space
          - css-width
          - css-word-break
          - css-writing-mode
          - css-z-index
          - html-abbr
          - html-address
          - html-align
          - html-anchor-links
          - html-aria-describedby
          - html-aria-hidden
          - html-aria-label
          - html-aria-labelledby
          - html-aria-live
          - html-audio
          - html-background
          - html-base
          - html-blockquote
          - html-body
          - html-button-reset
          - html-button-submit
          - html-code
          - html-del
          - html-dfn
          - html-dialog
          - html-dir
          - html-div
          - html-doctype
          - html-form
          - html-h1-h6
          - html-height
          - html-image-maps
          - html-input-checkbox
          - html-input-hidden
          - html-input-radio
          - html-input-reset
          - html-input-submit
          - html-input-text
          - html-lang
          - html-link
          - html-lists
          - html-loading-attribute
          - html-mailto-links
          - html-marquee
          - html-meter
          - html-object
          - html-p
          - html-picture
          - html-pre
          - html-progress
          - html-required
          - html-role
          - html-rp
          - html-rt
          - html-ruby
          - html-select
          - html-semantics
          - html-small
          - html-span
          - html-srcset
          - html-strike
          - html-strong
          - html-style
          - html-svg
          - html-table
          - html-target
          - html-textarea
          - html-valign
          - html-video
          - html-wbr
          - html-width
          - image-avif
          - image-base64
          - image-bmp
          - image-gif
          - image-ico
          - image-jpg
          - image-png
          - image-svg
          - image-webp
          - unsupported
          type: string
        title:
          type: string
        description:
          type: string
        category:
          enum:
          - css
          - html
          - image
          - others
          type: string
        notes:
          type: string
        notesNumbers:
          additionalProperties:
            type: string
          type: object
        featureStatistics:
          items:
            $ref: '#/components/schemas/EmailFeatureFamilyStatistics'
          type: array
        statuses:
          items:
            enum:
            - SUPPORTED
            - PARTIAL
            - NOT_SUPPORTED
            - UNKNOWN
            type: string
          type: array
          uniqueItems: true
      required:
      - feature
      - statuses
      type: object
    EmailFeaturePlatformName:
      example:
        name: name
        slug: android
      properties:
        slug:
          enum:
          - android
          - desktop-app
          - desktop-webmail
          - ios
          - macos
          - mobile-webmail
          - outlook-com
          - webmail
          - windows
          - windows-mail
          type: string
        name:
          type: string
      required:
      - name
      - slug
      type: object
    EmailFeaturePlatformStatistics:
      example:
        versions:
        - supportFlags:
            notes:
            - notes
            - notes
            status: SUPPORTED
          version: version
        - supportFlags:
            notes:
            - notes
            - notes
            status: SUPPORTED
          version: version
        platform: android
      properties:
        platform:
          enum:
          - android
          - desktop-app
          - desktop-webmail
          - ios
          - macos
          - mobile-webmail
          - outlook-com
          - webmail
          - windows
          - windows-mail
          type: string
        versions:
          items:
            $ref: '#/components/schemas/EmailFeatureVersionStatistics'
          type: array
      required:
      - platform
      - versions
      type: object
    EmailFeatureSupportFlags:
      example:
        notes:
        - notes
        - notes
        status: SUPPORTED
      properties:
        status:
          enum:
          - SUPPORTED
          - PARTIAL
          - NOT_SUPPORTED
          - UNKNOWN
          type: string
        notes:
          items:
            type: string
          type: array
          uniqueItems: true
      required:
      - status
      type: object
    EmailFeatureSupportResult:
      example:
        names:
          family:
          - name: name
            slug: aol
          - name: name
            slug: aol
          category:
          - name: name
            slug: css
          - name: name
            slug: css
          platform:
          - name: name
            slug: android
          - name: name
            slug: android
        detectedFeatures:
        - amp
        - amp
        featureOverviews:
        - notes: notes
          feature: amp
          description: description
          statuses:
          - SUPPORTED
          - SUPPORTED
          title: title
          category: css
          featureStatistics:
          - feature: amp
            family: aol
            platforms:
            - versions:
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              platform: android
            - versions:
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              platform: android
          - feature: amp
            family: aol
            platforms:
            - versions:
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              platform: android
            - versions:
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              platform: android
          notesNumbers:
            key: notesNumbers
        - notes: notes
          feature: amp
          description: description
          statuses:
          - SUPPORTED
          - SUPPORTED
          title: title
          category: css
          featureStatistics:
          - feature: amp
            family: aol
            platforms:
            - versions:
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              platform: android
            - versions:
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              platform: android
          - feature: amp
            family: aol
            platforms:
            - versions:
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              platform: android
            - versions:
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              - supportFlags:
                  notes:
                  - notes
                  - notes
                  status: SUPPORTED
                version: version
              platform: android
          notesNumbers:
            key: notesNumbers
        featurePercentages:
        - percentage: 0.8008282
          status: SUPPORTED
        - percentage: 0.8008282
          status: SUPPORTED
      properties:
        names:
          $ref: '#/components/schemas/EmailFeatureNames'
        detectedFeatures:
          items:
            enum:
            - amp
            - css-accent-color
            - css-align-items
            - css-animation
            - css-aspect-ratio
            - css-at-font-face
            - css-at-import
            - css-at-keyframes
            - css-at-media
            - css-at-supports
            - css-background-blend-mode
            - css-background-clip
            - css-background-color
            - css-background-image
            - css-background-origin
            - css-background-position
            - css-background-repeat
            - css-background-size
            - css-background
            - css-block-inline-size
            - css-border-image
            - css-border-inline-block-individual
            - css-border-inline-block-longhand
            - css-border-inline-block
            - css-border-radius-logical
            - css-border-radius
            - css-border
            - css-box-shadow
            - css-box-sizing
            - css-caption-side
            - css-clip-path
            - css-column-count
            - css-column-layout-properties
            - css-direction
            - css-display-flex
            - css-display-grid
            - css-display-none
            - css-display
            - css-filter
            - css-flex-direction
            - css-flex-wrap
            - css-float
            - css-font-kerning
            - css-font-weight
            - css-font
            - css-gap
            - css-grid-template
            - css-height
            - css-hyphens
            - css-inline-size
            - css-justify-content
            - css-left-right-top-bottom
            - css-letter-spacing
            - css-line-height
            - css-list-style-image
            - css-list-style-position
            - css-list-style-type
            - css-list-style
            - css-margin-block-start-end
            - css-margin-inline-block
            - css-margin-inline-start-end
            - css-margin-inline
            - css-margin
            - css-max-block-size
            - css-max-height
            - css-max-width
            - css-min-height
            - css-min-inline-size
            - css-min-width
            - css-mix-blend-mode
            - css-object-fit
            - css-object-position
            - css-opacity
            - css-outline-offset
            - css-outline
            - css-overflow-wrap
            - css-overflow
            - css-padding-block-start-end
            - css-padding-inline-block
            - css-padding-inline-start-end
            - css-padding
            - css-position
            - css-tab-size
            - css-table-layout
            - css-text-align-last
            - css-text-align
            - css-text-decoration-color
            - css-text-decoration-thickness
            - css-text-decoration
            - css-text-emphasis-position
            - css-text-emphasis
            - css-text-indent
            - css-text-overflow
            - css-text-shadow
            - css-text-transform
            - css-text-underline-offset
            - css-transform
            - css-vertical-align
            - css-visibility
            - css-white-space
            - css-width
            - css-word-break
            - css-writing-mode
            - css-z-index
            - html-abbr
            - html-address
            - html-align
            - html-anchor-links
            - html-aria-describedby
            - html-aria-hidden
            - html-aria-label
            - html-aria-labelledby
            - html-aria-live
            - html-audio
            - html-background
            - html-base
            - html-blockquote
            - html-body
            - html-button-reset
            - html-button-submit
            - html-code
            - html-del
            - html-dfn
            - html-dialog
            - html-dir
            - html-div
            - html-doctype
            - html-form
            - html-h1-h6
            - html-height
            - html-image-maps
            - html-input-checkbox
            - html-input-hidden
            - html-input-radio
            - html-input-reset
            - html-input-submit
            - html-input-text
            - html-lang
            - html-link
            - html-lists
            - html-loading-attribute
            - html-mailto-links
            - html-marquee
            - html-meter
            - html-object
            - html-p
            - html-picture
            - html-pre
            - html-progress
            - html-required
            - html-role
            - html-rp
            - html-rt
            - html-ruby
            - html-select
            - html-semantics
            - html-small
            - html-span
            - html-srcset
            - html-strike
            - html-strong
            - html-style
            - html-svg
            - html-table
            - html-target
            - html-textarea
            - html-valign
            - html-video
            - html-wbr
            - html-width
            - image-avif
            - image-base64
            - image-bmp
            - image-gif
            - image-ico
            - image-jpg
            - image-png
            - image-svg
            - image-webp
            - unsupported
            type: string
          type: array
          uniqueItems: true
        featureOverviews:
          items:
            $ref: '#/components/schemas/EmailFeatureOverview'
          type: array
        featurePercentages:
          items:
            $ref: '#/components/schemas/EmailFeatureSupportStatusPercentage'
          type: array
      required:
      - detectedFeatures
      - featureOverviews
      - featurePercentages
      - names
      type: object
    EmailFeatureSupportStatusPercentage:
      example:
        percentage: 0.8008282
        status: SUPPORTED
      properties:
        status:
          enum:
          - SUPPORTED
          - PARTIAL
          - NOT_SUPPORTED
          - UNKNOWN
          type: string
        percentage:
          format: float
          type: number
      required:
      - percentage
      - status
      type: object
    EmailFeatureVersionStatistics:
      example:
        supportFlags:
          notes:
          - notes
          - notes
          status: SUPPORTED
        version: version
      properties:
        version:
          type: string
        supportFlags:
          $ref: '#/components/schemas/EmailFeatureSupportFlags'
      required:
      - supportFlags
      - version
      type: object
    SmsReplyOptions:
      example:
        body: body
      properties:
        body:
          type: string
      required:
      - body
      type: object
    SentSmsDto:
      example:
        fromNumber: fromNumber
        createdAt: 2000-01-23T04:56:07.000+00:00
        phoneNumber: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        replyToId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        body: body
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        toNumber: toNumber
        sid: sid
        replyToSid: replyToSid
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        phoneNumber:
          format: uuid
          type: string
        fromNumber:
          type: string
        toNumber:
          type: string
        body:
          type: string
        sid:
          type: string
        replyToSid:
          type: string
        replyToId:
          format: uuid
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - body
      - createdAt
      - fromNumber
      - id
      - phoneNumber
      - sid
      - toNumber
      - updatedAt
      - userId
      type: object
    SmsSendOptions:
      example:
        to: to
        body: body
      properties:
        to:
          type: string
        body:
          type: string
      required:
      - body
      - to
      type: object
    SimpleSendEmailOptions:
      description: Simplified send email options
      example:
        senderId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        subject: subject
        to: to
        body: body
      properties:
        senderId:
          description: ID of inbox to send from. If null an inbox will be created
            for sending
          format: uuid
          nullable: true
          type: string
        to:
          description: Email address to send to
          type: string
        body:
          description: Body of the email message. Supports HTML
          nullable: true
          type: string
        subject:
          description: Subject line of the email
          nullable: true
          type: string
      required:
      - to
      type: object
    CreateInboxRulesetOptions:
      description: "Options for creating inbox rulesets. Inbox rulesets can be used\
        \ to block, allow, filter, or forward emails when sending or receiving using\
        \ the inbox."
      example:
        scope: RECEIVING_EMAILS
        action: BLOCK
        target: target
      externalDocs:
        url: https://www.mailslurp.com/guides/inbox-rulesets/
      properties:
        scope:
          description: What type of emails actions to apply ruleset to. Either `SENDING_EMAILS`
            or `RECEIVING_EMAILS` will apply action and target to any sending or receiving
            of emails respectively.
          enum:
          - RECEIVING_EMAILS
          - SENDING_EMAILS
          type: string
        action:
          description: "Action to be taken when the ruleset matches an email for the\
            \ given scope. For example: `BLOCK` action with target `*` and scope `SENDING_EMAILS`\
            \ blocks sending to all recipients. Note `ALLOW` takes precedent over\
            \ `BLOCK`. `FILTER_REMOVE` is like block but will remove offending email\
            \ addresses during a send or receive event instead of blocking the action."
          enum:
          - BLOCK
          - ALLOW
          - FILTER_REMOVE
          type: string
        target:
          description: Target to match emails with. Can be a wild-card type pattern
            or a valid email address. For instance `*@gmail.com` matches all gmail
            addresses while `test@gmail.com` matches one address exactly. The target
            is applied to every recipient field email address when `SENDING_EMAILS`
            is the scope and is applied to sender of email when `RECEIVING_EMAILS`.
          type: string
      required:
      - action
      - scope
      - target
      type: object
    InboxRulesetDto:
      description: Rules for inbox
      example:
        handler: EXCEPTION
        createdAt: 2000-01-23T04:56:07.000+00:00
        scope: RECEIVING_EMAILS
        action: BLOCK
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        target: target
      properties:
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          nullable: true
          type: string
        scope:
          enum:
          - RECEIVING_EMAILS
          - SENDING_EMAILS
          type: string
        action:
          enum:
          - BLOCK
          - ALLOW
          - FILTER_REMOVE
          type: string
        target:
          type: string
        handler:
          enum:
          - EXCEPTION
          type: string
        createdAt:
          format: date-time
          type: string
      required:
      - action
      - createdAt
      - handler
      - id
      - scope
      - target
      type: object
    TestInboxRulesetSendingOptions:
      description: Test options for inbox ruleset sending test
      example:
        recipient: recipient
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        inboxId:
          format: uuid
          type: string
        recipient:
          type: string
      required:
      - inboxId
      - recipient
      type: object
    TestInboxRulesetSendingResult:
      example:
        canSend: true
      properties:
        canSend:
          type: boolean
      required:
      - canSend
      type: object
    TestInboxRulesetReceivingOptions:
      description: Test options for inbox ruleset receiving test
      example:
        fromSender: fromSender
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        inboxId:
          format: uuid
          type: string
        fromSender:
          type: string
      required:
      - fromSender
      - inboxId
      type: object
    TestInboxRulesetReceivingResult:
      example:
        canReceive: true
      properties:
        canReceive:
          type: boolean
      required:
      - canReceive
      type: object
    CreateInboxReplierOptions:
      description: Options for creating an inbox replier. Repliers can be attached
        to inboxes and send automated responses when an inbound email matches given
        criteria.
      example:
        charset: charset
        subject: subject
        match: match
        ignoreReplyTo: true
        body: body
        templateId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        templateVariables:
          key: "{}"
        field: RECIPIENTS
        isHTML: true
        name: name
        replyTo: replyTo
        from: from
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      externalDocs:
        url: https://docs.mailslurp.com/repliers/
      properties:
        inboxId:
          description: Inbox ID to attach replier to
          format: uuid
          nullable: true
          type: string
        name:
          description: Name for replier
          nullable: true
          type: string
        field:
          description: Field to match against to trigger inbox replier for inbound
            email
          enum:
          - RECIPIENTS
          - SENDER
          - SUBJECT
          - ATTACHMENTS
          type: string
        match:
          description: String or wildcard style match for field specified when evaluating
            reply rules. Use `*` to match anything.
          type: string
        replyTo:
          description: Reply-to email address when sending replying
          nullable: true
          type: string
        subject:
          description: Subject override when replying to email
          nullable: true
          type: string
        from:
          description: Send email from address
          nullable: true
          type: string
        charset:
          description: Email reply charset
          nullable: true
          type: string
        ignoreReplyTo:
          description: Ignore sender replyTo when responding. Send directly to the
            sender if enabled.
          nullable: true
          type: boolean
        isHTML:
          description: Send HTML email
          nullable: true
          type: boolean
        body:
          description: Email body for reply
          nullable: true
          type: string
        templateId:
          description: ID of template to use when sending a reply
          format: uuid
          nullable: true
          type: string
        templateVariables:
          additionalProperties:
            description: Template variable values
            nullable: true
            type: object
          description: Template variable values
          nullable: true
          type: object
      required:
      - field
      - match
      type: object
    CreatePhoneNumberOptions:
      example:
        schedule: MONTHLY
        name: name
        description: description
        phoneCountry: US
      properties:
        phoneCountry:
          enum:
          - US
          - GB
          - AU
          - CA
          - EE
          - HK
          - PL
          - CH
          - PT
          - NL
          - IL
          - SE
          type: string
        name:
          type: string
        description:
          type: string
        schedule:
          enum:
          - MONTHLY
          - YEARLY
          type: string
      required:
      - phoneCountry
      type: object
    ValidatePhoneNumberOptions:
      example:
        phoneNumber: phoneNumber
      properties:
        phoneNumber:
          type: string
      required:
      - phoneNumber
      type: object
    PhoneNumberValidationDto:
      example:
        countryPrefix: countryPrefix
        phoneNumber: phoneNumber
        countryCode: countryCode
        isValid: true
        validationErrors:
        - validationErrors
        - validationErrors
      properties:
        countryCode:
          type: string
        countryPrefix:
          type: string
        phoneNumber:
          type: string
        isValid:
          type: boolean
        validationErrors:
          items:
            type: string
          type: array
      required:
      - isValid
      - phoneNumber
      type: object
    TestPhoneNumberOptions:
      example:
        message: message
      properties:
        message:
          type: string
      required:
      - message
      type: object
    CreateEmergencyAddressOptions:
      example:
        city: city
        address1: address1
        displayName: displayName
        postalCode: postalCode
        isoCountryCode: US
        region: region
        customerName: customerName
      properties:
        customerName:
          type: string
        address1:
          type: string
        city:
          type: string
        region:
          type: string
        postalCode:
          type: string
        isoCountryCode:
          enum:
          - US
          - GB
          - AU
          - CA
          - EE
          - HK
          - PL
          - CH
          - PT
          - NL
          - IL
          - SE
          type: string
        displayName:
          type: string
      required:
      - address1
      - city
      - customerName
      - isoCountryCode
      - postalCode
      - region
      type: object
    EmergencyAddress:
      example:
        city: city
        displayName: displayName
        address1: address1
        postalCode: postalCode
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        customerName: customerName
        sid: sid
        phoneCountry: US
        createdAt: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        region: region
        accountSid: accountSid
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        sid:
          type: string
        userId:
          format: uuid
          type: string
        displayName:
          type: string
        customerName:
          type: string
        address1:
          type: string
        city:
          type: string
        region:
          type: string
        postalCode:
          type: string
        phoneCountry:
          enum:
          - US
          - GB
          - AU
          - CA
          - EE
          - HK
          - PL
          - CH
          - PT
          - NL
          - IL
          - SE
          type: string
        accountSid:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - accountSid
      - address1
      - city
      - createdAt
      - customerName
      - displayName
      - id
      - phoneCountry
      - postalCode
      - region
      - sid
      - updatedAt
      - userId
      type: object
    ConsentStatusDto:
      example:
        consented: true
      properties:
        consented:
          type: boolean
      required:
      - consented
      type: object
    CreateOAuthConnectionResult:
      example:
        url: url
      properties:
        url:
          type: string
      required:
      - url
      type: object
    CreateOAuthExchangeResult:
      example:
        success: true
        error: error
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        success:
          type: boolean
        inboxId:
          format: uuid
          type: string
        error:
          type: string
      required:
      - success
      type: object
    VerifyEmailAddressOptions:
      description: Options for verifying that an email address exists at a remote
        mail server.
      example:
        emailAddress: emailAddress
        senderEmailAddress: senderEmailAddress
        port: 0
        mailServerDomain: mailServerDomain
      properties:
        mailServerDomain:
          nullable: true
          type: string
        emailAddress:
          type: string
        senderEmailAddress:
          nullable: true
          type: string
        port:
          format: int32
          nullable: true
          type: integer
      required:
      - emailAddress
      type: object
    EmailVerificationResult:
      description: Email verification result. Valid means email address exists according
        to response from mail server running at the domain and port given.
      example:
        emailAddress: emailAddress
        port: 0
        domainName: domainName
        isValid: true
        error: error
      properties:
        domainName:
          type: string
        port:
          format: int32
          type: integer
        emailAddress:
          type: string
        isValid:
          type: boolean
        error:
          nullable: true
          type: string
      required:
      - domainName
      - emailAddress
      - isValid
      - port
      type: object
    IPAddressResult:
      description: IP Address look up result for a given domain / hostname
      example:
        hostname: hostname
        address: address
      properties:
        address:
          type: string
        hostname:
          type: string
      required:
      - address
      - hostname
      type: object
    DescribeDomainOptions:
      description: Domain record description
      example:
        domain: domain
      properties:
        domain:
          type: string
      required:
      - domain
      type: object
    DescribeMailServerDomainResult:
      description: Name Server lookup result
      example:
        mxRecords:
        - recordType: recordType
          raw: raw
          priority: priority
          value: value
        - recordType: recordType
          raw: raw
          priority: priority
          value: value
        domain: domain
        message: message
      properties:
        mxRecords:
          items:
            $ref: '#/components/schemas/NameServerRecord'
          type: array
        domain:
          type: string
        message:
          nullable: true
          type: string
      required:
      - domain
      - mxRecords
      type: object
    NameServerRecord:
      description: Name Server Record
      example:
        recordType: recordType
        raw: raw
        priority: priority
        value: value
      properties:
        raw:
          type: string
        recordType:
          type: string
        priority:
          type: string
        value:
          type: string
      required:
      - priority
      - raw
      - recordType
      - value
      type: object
    DNSLookupsOptions:
      description: Options for multiple DNS queries
      example:
        lookups:
        - omitFinalDNSDot: true
          hostname: hostname
          recordTypes:
          - A
          - A
        - omitFinalDNSDot: true
          hostname: hostname
          recordTypes:
          - A
          - A
        - omitFinalDNSDot: true
          hostname: hostname
          recordTypes:
          - A
          - A
        - omitFinalDNSDot: true
          hostname: hostname
          recordTypes:
          - A
          - A
        - omitFinalDNSDot: true
          hostname: hostname
          recordTypes:
          - A
          - A
      properties:
        lookups:
          items:
            $ref: '#/components/schemas/DNSLookupOptions'
          maxItems: 10
          minItems: 1
          type: array
      required:
      - lookups
      type: object
    DNSLookupResults:
      description: Results of query on domain name servers
      example:
        results:
        - recordType: A
          name: name
          ttl: 0
          recordEntries:
          - recordEntries
          - recordEntries
        - recordType: A
          name: name
          ttl: 0
          recordEntries:
          - recordEntries
          - recordEntries
      properties:
        results:
          items:
            $ref: '#/components/schemas/DNSLookupResult'
          type: array
      required:
      - results
      type: object
    SendEmailBodyPart:
      description: Email body content parts for multipart mime message. Will override
        body.
      example:
        contentType: contentType
        contentBody: contentBody
      nullable: true
      properties:
        contentType:
          type: string
        contentBody:
          type: string
      required:
      - contentBody
      - contentType
      type: object
    SendEmailOptions:
      description: Options for the email to be sent
      example:
        template: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        charset: charset
        bcc:
        - bcc
        - bcc
        attachments:
        - attachments
        - attachments
        subject: subject
        isXAmpHtml: true
        body: body
        bodyParts:
        - contentType: contentType
          contentBody: contentBody
        - contentType: contentType
          contentBody: contentBody
        useInboxName: true
        toContacts:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        fromName: fromName
        from: from
        html: true
        validateEmailAddresses: VALIDATE_FILTER_REMOVE_INVALID
        toGroup: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        customHeaders:
          key: customHeaders
        cc:
        - cc
        - cc
        sendStrategy: SINGLE_MESSAGE
        filterBouncedRecipients: true
        ignoreEmptyRecipients: true
        addTrackingPixel: true
        templateVariables:
          key: "{}"
        isHTML: true
        replyTo: replyTo
        to:
        - to
        - to
      properties:
        toContacts:
          description: Optional list of contact IDs to send email to. Manage your
            contacts via the API or dashboard. When contacts are used the email is
            sent to each contact separately so they will not see other recipients.
          items:
            description: Optional list of contact IDs to send email to. Manage your
              contacts via the API or dashboard. When contacts are used the email
              is sent to each contact separately so they will not see other recipients.
            format: uuid
            nullable: true
            type: string
          nullable: true
          type: array
        toGroup:
          description: Optional contact group ID to send email to. You can create
            contacts and contact groups in the API or dashboard and use them for email
            campaigns. When contact groups are used the email is sent to each contact
            separately so they will not see other recipients
          format: uuid
          nullable: true
          type: string
        to:
          description: List of destination email addresses. Each email address must
            be RFC 5322 format. Even single recipients must be in array form. Maximum
            recipients per email depends on your plan. If you need to send many emails
            try using contacts or contact groups or use a non standard sendStrategy
            to ensure that spam filters are not triggered (many recipients in one
            email can affect your spam rating). Be cautious when sending emails that
            your recipients exist. High bounce rates (meaning a high percentage of
            emails cannot be delivered because an address does not exist) can result
            in account freezing.
          items:
            description: List of destination email addresses. Each email address must
              be RFC 5322 format. Even single recipients must be in array form. Maximum
              recipients per email depends on your plan. If you need to send many
              emails try using contacts or contact groups or use a non standard sendStrategy
              to ensure that spam filters are not triggered (many recipients in one
              email can affect your spam rating). Be cautious when sending emails
              that your recipients exist. High bounce rates (meaning a high percentage
              of emails cannot be delivered because an address does not exist) can
              result in account freezing.
            nullable: true
            type: string
          nullable: true
          type: array
        from:
          description: "Optional from address. Email address is RFC 5322 format and\
            \ may include a display name and email in angle brackets (`my@address.com`\
            \ or `My inbox <my@address.com>`). If no sender is set the source inbox\
            \ address will be used for this field. If you set `useInboxName` to `true`\
            \ the from field will include the inbox name as a display name: `inbox_name\
            \ <inbox@address.com>`. For this to work use the name field when creating\
            \ an inbox. Beware of potential spam penalties when setting the from field\
            \ to an address not used by the inbox. Your emails may get blocked by\
            \ services if you impersonate another address. To use a custom email addresses\
            \ use a custom domain. You can create domains with the DomainController.\
            \ The domain must be verified in the dashboard before it can be used."
          nullable: true
          type: string
        fromName:
          description: Optional from name if not passed with address. If you set `useInboxName`
            to `true` the from field will include the inbox name as a display name
          nullable: true
          type: string
        cc:
          description: Optional list of cc destination email addresses
          items:
            description: Optional list of cc destination email addresses
            nullable: true
            type: string
          nullable: true
          type: array
        bcc:
          description: Optional list of bcc destination email addresses
          items:
            description: Optional list of bcc destination email addresses
            nullable: true
            type: string
          nullable: true
          type: array
        subject:
          description: Optional email subject line
          nullable: true
          type: string
        replyTo:
          description: Optional replyTo header
          nullable: true
          type: string
        customHeaders:
          additionalProperties:
            description: Optional custom headers
            nullable: true
            type: string
          description: Optional custom headers
          nullable: true
          type: object
        body:
          description: Optional contents of email. If body contains HTML then set
            `isHTML` to true to ensure that email clients render it correctly. You
            can use moustache template syntax in the email body in conjunction with
            `toGroup` contact variables or `templateVariables` data. If you need more
            templating control consider creating a template and using the `template`
            property instead of the body.
          nullable: true
          type: string
        html:
          description: "Optional HTML flag to indicate that contents is HTML. Set's\
            \ a `content-type: text/html` for email. (Deprecated: use `isHTML` instead.)"
          nullable: true
          type: boolean
        isHTML:
          description: Optional HTML flag. If true the `content-type` of the email
            will be `text/html`. Set to true when sending HTML to ensure proper rending
            on email clients
          nullable: true
          type: boolean
        charset:
          description: Optional charset
          nullable: true
          type: string
        attachments:
          description: "Optional list of attachment IDs to send with this email. You\
            \ must first upload each attachment separately via method call or dashboard\
            \ in order to obtain attachment IDs. This way you can reuse attachments\
            \ with different emails once uploaded. There are several ways to upload\
            \ that support `multi-part form`, `base64 file encoding`, and octet stream\
            \ binary uploads. See the `UploadController` for available methods. "
          items:
            description: "Optional list of attachment IDs to send with this email.\
              \ You must first upload each attachment separately via method call or\
              \ dashboard in order to obtain attachment IDs. This way you can reuse\
              \ attachments with different emails once uploaded. There are several\
              \ ways to upload that support `multi-part form`, `base64 file encoding`,\
              \ and octet stream binary uploads. See the `UploadController` for available\
              \ methods. "
            nullable: true
            type: string
          nullable: true
          type: array
        templateVariables:
          additionalProperties:
            description: Optional map of template variables. Will replace moustache
              syntax variables in subject and body or template with the associated
              values if found.
            nullable: true
            type: object
          description: Optional map of template variables. Will replace moustache
            syntax variables in subject and body or template with the associated values
            if found.
          nullable: true
          type: object
        template:
          description: Optional template ID to use for body. Will override body if
            provided. When using a template make sure you pass the corresponding map
            of `templateVariables`. You can find which variables are needed by fetching
            the template itself or viewing it in the dashboard.
          format: uuid
          nullable: true
          type: string
        sendStrategy:
          description: How an email should be sent based on its recipients
          enum:
          - SINGLE_MESSAGE
          nullable: true
          type: string
        useInboxName:
          description: Use name of inbox as sender email address name. Will construct
            RFC 5322 email address with `Inbox name <inbox@address.com>` if the inbox
            has a name.
          nullable: true
          type: boolean
        addTrackingPixel:
          description: Add tracking pixel to email
          nullable: true
          type: boolean
        filterBouncedRecipients:
          description: "Filter recipients to remove any bounced recipients from to,\
            \ bcc, and cc before sending"
          nullable: true
          type: boolean
        validateEmailAddresses:
          description: Validate recipient email addresses before sending
          enum:
          - VALIDATE_FILTER_REMOVE_INVALID
          - VALIDATE_ERROR_IF_INVALID
          - NO_VALIDATION
          nullable: true
          type: string
        ignoreEmptyRecipients:
          description: Ignore empty recipients after validation removes all recipients
            as invalid and fail silently
          nullable: true
          type: boolean
        isXAmpHtml:
          description: Is content AMP4EMAIL compatible. If set will send as x-amp-html
            part.
          nullable: true
          type: boolean
        bodyParts:
          description: Email body content parts for multipart mime message. Will override
            body.
          items:
            $ref: '#/components/schemas/SendEmailBodyPart'
          nullable: true
          type: array
      type: object
    ScheduledJobDto:
      example:
        jobId: jobId
        createdAt: 2000-01-23T04:56:07.000+00:00
        groupId: groupId
        triggerId: triggerId
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sendAtTimestamp: 2000-01-23T04:56:07.000+00:00
        status: SUBMITTED
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        jobId:
          type: string
        groupId:
          type: string
        triggerId:
          type: string
        status:
          enum:
          - SUBMITTED
          - COMPLETED
          - ABORTED
          - FAILED
          - CANCELLED
          type: string
        sendAtTimestamp:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - groupId
      - id
      - inboxId
      - jobId
      - sendAtTimestamp
      - status
      - triggerId
      - updatedAt
      - userId
      type: object
    SendSMTPEnvelopeOptions:
      description: Options for the email envelope
      example:
        rcptTo:
        - rcptTo
        - rcptTo
        data: data
        mailFrom: mailFrom
      properties:
        rcptTo:
          items:
            type: string
          type: array
        mailFrom:
          type: string
        data:
          type: string
      required:
      - data
      - mailFrom
      - rcptTo
      type: object
    CreateInboxDto:
      description: "Options for creating an inbox. An inbox has a real email address\
        \ that can send and receive emails. Inboxes can be permanent or expire at\
        \ a given time. Inboxes are either `SMTP` or `HTTP` mailboxes. `SMTP` inboxes\
        \ are processed by a mail server running at `mailslurp.mx` while `HTTP` inboxes\
        \ are processed by AWS SES backed mailservers. An inbox email address is randomly\
        \ assigned by default ending in either `mailslurp.com` or (if `useDomainPool`\
        \ is enabled) ending in a similar domain such as `mailslurp.xyz` (selected\
        \ at random). To specify an address use a custom domain: either pass the `emailAddress`\
        \ options with `<your-recipient>@<your-domain>`. To create a randomized address\
        \ for your domain set the `domainName` to the domain you have verified or\
        \ pass the `domainId`. Virtual inboxes prevent outbound sending and instead\
        \ trap mail."
      example:
        inboxType: HTTP_INBOX
        allowTeamAccess: true
        prefix: prefix
        description: description
        favourite: true
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        expiresAt: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
        expiresIn: 0
        emailAddress: emailAddress
        useDomainPool: true
        virtualInbox: true
        domainName: domainName
        name: name
        useShortAddress: true
      externalDocs:
        url: https://www.mailslurp.com/guides/creating-inboxes/
      properties:
        emailAddress:
          description: A custom email address to use with the inbox. Defaults to null.
            When null MailSlurp will assign a random email address to the inbox such
            as `123@mailslurp.com`. If you use the `useDomainPool` option when the
            email address is null it will generate an email address with a more varied
            domain ending such as `123@mailslurp.info` or `123@mailslurp.biz`. When
            a custom email address is provided the address is split into a domain
            and the domain is queried against your user. If you have created the domain
            in the MailSlurp dashboard and verified it you can use any email address
            that ends with the domain. Note domain types must match the inbox type
            - so `SMTP` inboxes will only work with `SMTP` type domains. Avoid `SMTP`
            inboxes if you need to send emails as they can only receive. Send an email
            to this address and the inbox will receive and store it for you. To retrieve
            the email use the Inbox and Email Controller endpoints with the inbox
            ID.
          nullable: true
          type: string
        domainName:
          description: FQDN domain name for the domain you have verified. Will be
            appended with a randomly assigned recipient name. Use the `emailAddress`
            option instead to specify the full custom inbox.
          nullable: true
          type: string
        domainId:
          description: ID of custom domain to use for email address.
          format: uuid
          nullable: true
          type: string
        name:
          description: Optional name of the inbox. Displayed in the dashboard for
            easier search and used as the sender name when sending emails.
          nullable: true
          type: string
        description:
          description: Optional description of the inbox for labelling purposes. Is
            shown in the dashboard and can be used with
          nullable: true
          type: string
        useDomainPool:
          description: "Use the MailSlurp domain name pool with this inbox when creating\
            \ the email address. Defaults to null. If enabled the inbox will be an\
            \ email address with a domain randomly chosen from a list of the MailSlurp\
            \ domains. This is useful when the default `@mailslurp.com` email addresses\
            \ used with inboxes are blocked or considered spam by a provider or receiving\
            \ service. When domain pool is enabled an email address will be generated\
            \ ending in `@mailslurp.{world,info,xyz,...}` . This means a TLD is randomly\
            \ selecting from a list of `.biz`, `.info`, `.xyz` etc to add variance\
            \ to the generated email addresses. When null or false MailSlurp uses\
            \ the default behavior of `@mailslurp.com` or custom email address provided\
            \ by the emailAddress field. Note this feature is only available for `HTTP`\
            \ inbox types."
          nullable: true
          type: boolean
        tags:
          description: Tags that inbox has been tagged with. Tags can be added to
            inboxes to group different inboxes within an account. You can also search
            for inboxes by tag in the dashboard UI.
          items:
            description: Tags that inbox has been tagged with. Tags can be added to
              inboxes to group different inboxes within an account. You can also search
              for inboxes by tag in the dashboard UI.
            nullable: true
            type: string
          nullable: true
          type: array
        expiresAt:
          description: Optional inbox expiration date. If null then this inbox is
            permanent and the emails in it won't be deleted. If an expiration date
            is provided or is required by your plan the inbox will be closed when
            the expiration time is reached. Expired inboxes still contain their emails
            but can no longer send or receive emails. An ExpiredInboxRecord is created
            when an inbox and the email address and inbox ID are recorded. The expiresAt
            property is a timestamp string in ISO DateTime Format yyyy-MM-dd'T'HH:mm:ss.SSSXXX.
          format: date-time
          nullable: true
          type: string
        favourite:
          description: Is the inbox a favorite. Marking an inbox as a favorite is
            typically done in the dashboard for quick access or filtering
          nullable: true
          type: boolean
        expiresIn:
          description: Number of milliseconds that inbox should exist for
          format: int64
          nullable: true
          type: integer
        allowTeamAccess:
          description: DEPRECATED (team access is always true). Grant team access
            to this inbox and the emails that belong to it for team members of your
            organization.
          nullable: true
          type: boolean
        inboxType:
          description: Type of inbox. HTTP inboxes are faster and better for most
            cases. SMTP inboxes are more suited for public facing inbound messages
            (but cannot send).
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          nullable: true
          type: string
        virtualInbox:
          description: Virtual inbox prevents any outbound emails from being sent.
            It creates sent email records but will never send real emails to recipients.
            Great for testing and faking email sending.
          nullable: true
          type: boolean
        useShortAddress:
          description: Use a shorter email address under 31 characters
          nullable: true
          type: boolean
        prefix:
          description: Prefix to add before the email address for easier labelling
            or identification.
          nullable: true
          type: string
      type: object
    SearchInboxesOptions:
      example:
        sortDirection: ASC
        search: search
        inboxType: HTTP_INBOX
        pageIndex: 0
        before: 2000-01-23T04:56:07.000+00:00
        pageSize: 6
        tag: tag
        inboxFunction: ALIAS
        favourite: true
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        since: 2000-01-23T04:56:07.000+00:00
      properties:
        pageIndex:
          description: Optional page index in list pagination
          format: int32
          nullable: true
          type: integer
        pageSize:
          description: Optional page size in list pagination
          format: int32
          nullable: true
          type: integer
        sortDirection:
          description: Optional createdAt sort direction ASC or DESC
          enum:
          - ASC
          - DESC
          nullable: true
          type: string
        favourite:
          description: Optionally filter results for favourites only
          nullable: true
          type: boolean
        search:
          description: "Optionally filter by search words partial matching ID, tags,\
            \ name, and email address"
          nullable: true
          type: string
        tag:
          description: Optionally filter by tags. Will return inboxes that include
            given tags
          nullable: true
          type: string
        since:
          description: Optional filter by created after given date time
          format: date-time
          nullable: true
          type: string
        before:
          description: Optional filter by created before given date time
          format: date-time
          nullable: true
          type: string
        inboxType:
          description: Type of inbox. HTTP inboxes are faster and better for most
            cases. SMTP inboxes are more suited for public facing inbound messages
            (but cannot send).
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          nullable: true
          type: string
        inboxFunction:
          description: Optional filter by inbox function
          enum:
          - ALIAS
          - THREAD
          - CATCH_ALL
          - CONNECTOR
          - ACCOUNT
          - GUEST
          - OAUTH_CONNECTION_GMAIL
          nullable: true
          type: string
        domainId:
          description: Optional domain ID filter
          format: uuid
          nullable: true
          type: string
      type: object
    InboxPreview:
      description: Inbox data preview element.
      example:
        inboxType: HTTP_INBOX
        accountRegion: US_WEST_2
        description: description
        favourite: true
        teamAccess: true
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        expiresAt: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        virtualInbox: true
        functionsAs: ALIAS
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: ID of the inbox. The ID is a UUID-V4 format string. Use the
            inboxId for calls to Inbox and Email Controller endpoints. See the emailAddress
            property for the email address or the inbox. To get emails in an inbox
            use the WaitFor and Inbox Controller methods `waitForLatestEmail` and
            `getEmails` methods respectively. Inboxes can be used with aliases to
            forward emails automatically.
          format: uuid
          type: string
        domainId:
          description: ID of custom domain used by the inbox if any
          format: uuid
          nullable: true
          type: string
        emailAddress:
          description: The inbox's email address. Inbox projections and previews may
            not include the email address. To view the email address fetch the inbox
            entity directly. Send an email to this address and the inbox will receive
            and store it for you. Note the email address in MailSlurp match characters
            exactly and are case sensitive so `+123` additions are considered different
            addresses. To retrieve the email use the Inbox and Email Controller endpoints
            with the inbox ID.
          nullable: true
          type: string
        createdAt:
          description: When the inbox was created. Time stamps are in ISO DateTime
            Format `yyyy-MM-dd'T'HH:mm:ss.SSSXXX` e.g. `2000-10-31T01:30:00.000-05:00`.
          format: date-time
          type: string
        favourite:
          description: Is the inbox a favorite inbox. Make an inbox a favorite is
            typically done in the dashboard for quick access or filtering
          type: boolean
        name:
          description: Name of the inbox and used as the sender name when sending
            emails .Displayed in the dashboard for easier search
          nullable: true
          type: string
        tags:
          description: Tags that inbox has been tagged with. Tags can be added to
            inboxes to group different inboxes within an account. You can also search
            for inboxes by tag in the dashboard UI.
          items:
            description: Tags that inbox has been tagged with. Tags can be added to
              inboxes to group different inboxes within an account. You can also search
              for inboxes by tag in the dashboard UI.
            nullable: true
            type: string
          nullable: true
          type: array
        teamAccess:
          description: Does inbox permit team access for organization team members.
            If so team users can use inbox and emails associated with it. See the
            team access guide at https://www.mailslurp.com/guides/team-email-account-sharing/
          type: boolean
        inboxType:
          description: Type of inbox. HTTP inboxes are faster and better for most
            cases. SMTP inboxes are more suited for public facing inbound messages
            (but cannot send).
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          nullable: true
          type: string
        virtualInbox:
          description: Virtual inbox can receive email but will not send emails to
            real recipients. Will save sent email record but never send an actual
            email. Perfect for testing mail server actions.
          type: boolean
        expiresAt:
          description: "Inbox expiration time. When, if ever, the inbox should expire\
            \ and be deleted. If null then this inbox is permanent and the emails\
            \ in it won't be deleted. This is the default behavior unless expiration\
            \ date is set. If an expiration date is set and the time is reached MailSlurp\
            \ will expire the inbox and move it to an expired inbox entity. You can\
            \ still access the emails belonging to it but it can no longer send or\
            \ receive email."
          format: date-time
          nullable: true
          type: string
        functionsAs:
          description: Inbox function if used as a primitive for another system.
          enum:
          - ALIAS
          - THREAD
          - CATCH_ALL
          - CONNECTOR
          - ACCOUNT
          - GUEST
          - OAUTH_CONNECTION_GMAIL
          nullable: true
          type: string
        userId:
          description: ID of user that inbox belongs to
          format: uuid
          nullable: true
          type: string
        description:
          description: Description of an inbox for labelling and searching purposes
          nullable: true
          type: string
        accountRegion:
          description: Region of the inbox
          enum:
          - US_WEST_2
          nullable: true
          type: string
      required:
      - createdAt
      - emailAddress
      - favourite
      - id
      - teamAccess
      - userId
      - virtualInbox
      type: object
    PageInboxProjection:
      description: Paginated inbox results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - inboxType: HTTP_INBOX
          accountRegion: US_WEST_2
          description: description
          favourite: true
          teamAccess: true
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          expiresAt: 2000-01-23T04:56:07.000+00:00
          tags:
          - tags
          - tags
          createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          virtualInbox: true
          functionsAs: ALIAS
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - inboxType: HTTP_INBOX
          accountRegion: US_WEST_2
          description: description
          favourite: true
          teamAccess: true
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          expiresAt: 2000-01-23T04:56:07.000+00:00
          tags:
          - tags
          - tags
          createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          virtualInbox: true
          functionsAs: ALIAS
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/InboxPreview'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    PageableObject:
      example:
        paged: true
        pageNumber: 6
        offset: 1
        pageSize: 0
        unpaged: true
        sort:
          unsorted: true
          sorted: true
          empty: true
      properties:
        pageSize:
          format: int32
          type: integer
        paged:
          type: boolean
        pageNumber:
          format: int32
          type: integer
        unpaged:
          type: boolean
        offset:
          format: int64
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
      type: object
    SortObject:
      example:
        unsorted: true
        sorted: true
        empty: true
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
      type: object
    EmailAvailableResult:
      example:
        available: true
      properties:
        available:
          type: boolean
      required:
      - available
      type: object
    ImapUpdateFlagsOptions:
      example:
        seqSet: seqSet
        flags:
        - flags
        - flags
        operation: operation
        uidSet: uidSet
      properties:
        operation:
          type: string
        flags:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        uidSet:
          nullable: true
          type: string
        seqSet:
          nullable: true
          type: string
      required:
      - operation
      type: object
    ImapServerStatusOptions:
      example:
        statusItems:
        - MESSAGES
        - MESSAGES
        name: name
      properties:
        name:
          nullable: true
          type: string
        statusItems:
          items:
            enum:
            - MESSAGES
            - RECENT
            - UIDNEXT
            - UIDVALIDITY
            - UNSEEN
            - APPENDLIMIT
            nullable: true
            type: string
          nullable: true
          type: array
      type: object
    ImapMailboxStatus:
      example:
        appendLimit: 7
        unseenSeqNum: 0
        uidValidity: 2
        name: name
        flags:
        - flags
        - flags
        messages: 6
        readOnly: true
        items: "{}"
        permanentFlags:
        - permanentFlags
        - permanentFlags
        recent: 1
        unseen: 5
        uidNext: 5
      nullable: true
      properties:
        name:
          description: The mailbox name.
          type: string
        readOnly:
          description: True if the mailbox is open in read-only mode.
          type: boolean
        items:
          description: Results map
          nullable: true
          type: object
        flags:
          description: The mailbox flags.
          items:
            description: The mailbox flags.
            nullable: true
            type: string
          nullable: true
          type: array
        permanentFlags:
          description: The mailbox permanent flags.
          items:
            description: The mailbox permanent flags.
            nullable: true
            type: string
          nullable: true
          type: array
        unseenSeqNum:
          description: The sequence number of the first unseen message in the mailbox.
          format: int64
          type: integer
        messages:
          description: The number of messages in this mailbox.
          format: int32
          type: integer
        recent:
          description: The number of messages not seen since the last time the mailbox
            was opened.
          format: int32
          type: integer
        unseen:
          description: The number of unread messages.
          format: int32
          type: integer
        uidNext:
          description: The next UID.
          format: int64
          type: integer
        uidValidity:
          description: "Together with a UID, it is a unique identifier for a message.\
            \ Must be greater than or equal to 1."
          format: int32
          type: integer
        appendLimit:
          description: Per-mailbox limit of message size. Set only if server supports
            the APPENDLIMIT extension
          format: int32
          nullable: true
          type: integer
      required:
      - flags
      - items
      - messages
      - name
      - permanentFlags
      - readOnly
      - recent
      - uidNext
      - uidValidity
      - unseen
      - unseenSeqNum
      type: object
    ImapServerStatusResult:
      example:
        result:
          appendLimit: 7
          unseenSeqNum: 0
          uidValidity: 2
          name: name
          flags:
          - flags
          - flags
          messages: 6
          readOnly: true
          items: "{}"
          permanentFlags:
          - permanentFlags
          - permanentFlags
          recent: 1
          unseen: 5
          uidNext: 5
      properties:
        result:
          $ref: '#/components/schemas/ImapMailboxStatus'
      type: object
    ImapServerSearchOptions:
      description: IMAP server search options
      example:
        uid: uid
        withFlags:
        - withFlags
        - withFlags
        before: 2000-01-23T04:56:07.000+00:00
        sentSince: 2000-01-23T04:56:07.000+00:00
        seqNum: seqNum
        sentBefore: 2000-01-23T04:56:07.000+00:00
        header:
          key:
          - header
          - header
        text:
        - text
        - text
        body:
        - body
        - body
        since: 2000-01-23T04:56:07.000+00:00
        withoutFlags:
        - withoutFlags
        - withoutFlags
      properties:
        seqNum:
          nullable: true
          type: string
        uid:
          nullable: true
          type: string
        since:
          format: date-time
          nullable: true
          type: string
        before:
          format: date-time
          nullable: true
          type: string
        sentSince:
          format: date-time
          nullable: true
          type: string
        sentBefore:
          format: date-time
          nullable: true
          type: string
        header:
          additionalProperties:
            items:
              nullable: true
              type: string
            nullable: true
            type: array
          nullable: true
          type: object
        body:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        text:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        withFlags:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        withoutFlags:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
      type: object
    ImapEmailProjection:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        uid: 0
        read: true
        seqNum: 6
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        createdAt:
          format: date-time
          type: string
        read:
          nullable: true
          type: boolean
        uid:
          format: int64
          type: integer
        seqNum:
          format: int64
          type: integer
        id:
          format: uuid
          type: string
      required:
      - createdAt
      - id
      - seqNum
      - uid
      type: object
    ImapServerSearchResult:
      example:
        results:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          uid: 0
          read: true
          seqNum: 6
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          uid: 0
          read: true
          seqNum: 6
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        results:
          items:
            $ref: '#/components/schemas/ImapEmailProjection'
          type: array
      required:
      - results
      type: object
    ImapServerMailboxResult:
      example:
        success: true
        message: message
      properties:
        message:
          nullable: true
          type: string
        success:
          type: boolean
      required:
      - success
      type: object
    ImapServerListOptions:
      example:
        seqSet: seqSet
        uidSet: uidSet
      properties:
        uidSet:
          nullable: true
          type: string
        seqSet:
          nullable: true
          type: string
      type: object
    ImapServerListResult:
      example:
        results:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          uid: 0
          read: true
          seqNum: 6
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          uid: 0
          read: true
          seqNum: 6
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        results:
          items:
            $ref: '#/components/schemas/ImapEmailProjection'
          type: array
      required:
      - results
      type: object
    ImapServerGetResult:
      example:
        result:
          createdAt: 2000-01-23T04:56:07.000+00:00
          uid: 0
          read: true
          seqNum: 6
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        result:
          $ref: '#/components/schemas/ImapEmailProjection'
      type: object
    ImapServerFetchItem:
      description: IMAP fetch content in raw format
      example:
        uid: 0
        read: true
        seqNum: 6
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        content: content
      nullable: true
      properties:
        content:
          description: Content of the email
          type: string
        id:
          description: ID of the email
          format: uuid
          type: string
        uid:
          description: UID of the email
          format: int64
          type: integer
        seqNum:
          description: Sequence number of the email
          format: int64
          type: integer
        read:
          description: Read status of the email
          type: boolean
      required:
      - content
      - id
      - read
      - seqNum
      - uid
      type: object
    ImapServerFetchResult:
      description: IMAP fetch email result
      example:
        result:
          uid: 0
          read: true
          seqNum: 6
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          content: content
      properties:
        result:
          $ref: '#/components/schemas/ImapServerFetchItem'
      type: object
    CreatePortalOptions:
      example:
        linkHelp: linkHelp
        name: name
        description: description
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        name:
          type: string
        domainId:
          format: uuid
          type: string
        description:
          type: string
        linkHelp:
          type: string
      type: object
    GuestPortalDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        linkHelp: linkHelp
        loginUrl: loginUrl
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        domainId:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        name:
          type: string
        description:
          type: string
        linkHelp:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        loginUrl:
          type: string
      required:
      - createdAt
      - id
      - loginUrl
      - updatedAt
      - userId
      type: object
    CreatePortalUserOptions:
      example:
        password: password
        skipInboxCreation: true
        createInboxOptions:
          inboxType: HTTP_INBOX
          allowTeamAccess: true
          prefix: prefix
          description: description
          favourite: true
          domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          expiresAt: 2000-01-23T04:56:07.000+00:00
          tags:
          - tags
          - tags
          expiresIn: 0
          emailAddress: emailAddress
          useDomainPool: true
          virtualInbox: true
          domainName: domainName
          name: name
          useShortAddress: true
        name: name
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        username: username
      properties:
        password:
          type: string
        name:
          type: string
        username:
          type: string
        skipInboxCreation:
          type: boolean
        inboxId:
          format: uuid
          type: string
        createInboxOptions:
          $ref: '#/components/schemas/CreateInboxDto'
      type: object
    GuestPortalUserCreateDto:
      example:
        password: password
        guest:
          createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          loginUrl: loginUrl
          portalId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          username: username
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        guest:
          $ref: '#/components/schemas/GuestPortalUserDto'
        password:
          type: string
      required:
      - guest
      - password
      type: object
    GuestPortalUserDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        loginUrl: loginUrl
        portalId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        username: username
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        portalId:
          format: uuid
          type: string
        name:
          type: string
        username:
          type: string
        emailAddress:
          type: string
        inboxId:
          format: uuid
          type: string
        loginUrl:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - id
      - loginUrl
      - portalId
      - updatedAt
      - userId
      - username
      type: object
    CreateGroupOptions:
      description: Create contact group options
      example:
        name: name
        description: description
      properties:
        name:
          type: string
        description:
          nullable: true
          type: string
      required:
      - name
      type: object
    ExportOptions:
      description: Options for exporting user data
      example:
        filter: filter
        createdOldestTime: 2000-01-23T04:56:07.000+00:00
        excludePreviouslyExported: true
        createdEarliestTime: 2000-01-23T04:56:07.000+00:00
        listSeparatorToken: listSeparatorToken
        outputFormat: CSV_DEFAULT
      properties:
        outputFormat:
          enum:
          - CSV_DEFAULT
          - CSV_EXCEL
          type: string
        excludePreviouslyExported:
          nullable: true
          type: boolean
        createdEarliestTime:
          format: date-time
          nullable: true
          type: string
        createdOldestTime:
          format: date-time
          nullable: true
          type: string
        filter:
          nullable: true
          type: string
        listSeparatorToken:
          nullable: true
          type: string
      required:
      - outputFormat
      type: object
    ExportLink:
      description: Export download link
      example:
        downloadLink: downloadLink
      properties:
        downloadLink:
          type: string
      required:
      - downloadLink
      type: object
    HTMLValidationResult:
      description: HTML Validation Results
      example:
        isValid: true
        warnings:
        - lineNumber: 0
          message: message
        - lineNumber: 0
          message: message
        infos:
        - lineNumber: 0
          message: message
        - lineNumber: 0
          message: message
        errors:
        - lineNumber: 0
          message: message
        - lineNumber: 0
          message: message
      properties:
        isValid:
          description: Is HTML validation result valid
          type: boolean
        infos:
          description: Optional infos resulting from HTML validation
          items:
            $ref: '#/components/schemas/ValidationMessage'
          type: array
        errors:
          description: Optional errors resulting from HTML validation
          items:
            $ref: '#/components/schemas/ValidationMessage'
          type: array
        warnings:
          description: Optional warnings resulting from HTML validation
          items:
            $ref: '#/components/schemas/ValidationMessage'
          type: array
      required:
      - errors
      - infos
      - isValid
      - warnings
      type: object
    ValidationDto:
      description: Response object for email validation operation
      example:
        emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        html:
          isValid: true
          warnings:
          - lineNumber: 0
            message: message
          - lineNumber: 0
            message: message
          infos:
          - lineNumber: 0
            message: message
          - lineNumber: 0
            message: message
          errors:
          - lineNumber: 0
            message: message
          - lineNumber: 0
            message: message
      properties:
        emailId:
          description: ID of the email validated
          format: uuid
          type: string
        html:
          $ref: '#/components/schemas/HTMLValidationResult'
      required:
      - emailId
      - html
      type: object
    ValidationMessage:
      description: Optional warnings resulting from HTML validation
      example:
        lineNumber: 0
        message: message
      properties:
        lineNumber:
          format: int32
          type: integer
        message:
          type: string
      required:
      - lineNumber
      type: object
    GetEmailScreenshotOptions:
      description: Options taking a screenshot capture of a rendered email
      example:
        width: 6
        height: 0
      properties:
        height:
          description: Window height in pixels
          format: int32
          nullable: true
          type: integer
        width:
          description: Window width in pixels
          format: int32
          nullable: true
          type: integer
      type: object
    EmailScreenshotResult:
      example:
        base64EncodedImage: base64EncodedImage
      properties:
        base64EncodedImage:
          type: string
      required:
      - base64EncodedImage
      type: object
    ImapFlagOperationOptions:
      description: IMAP operation flags
      example:
        flags:
        - flags
        - flags
        flagOperation: SET_FLAGS
      properties:
        flagOperation:
          enum:
          - SET_FLAGS
          - ADD_FLAGS
          - REMOVE_FLAGS
          type: string
        flags:
          items:
            type: string
          type: array
      required:
      - flagOperation
      - flags
      type: object
    ForwardEmailOptions:
      description: Options for forwarding an email
      example:
        cc:
        - cc
        - cc
        useInboxName: true
        bcc:
        - bcc
        - bcc
        filterBouncedRecipients: true
        subject: subject
        from: from
        to:
        - to
        - to
      properties:
        to:
          description: To recipients for forwarded email
          items:
            description: To recipients for forwarded email
            type: string
          type: array
        subject:
          description: Subject for forwarded email
          nullable: true
          type: string
        cc:
          description: Optional cc recipients
          items:
            description: Optional cc recipients
            nullable: true
            type: string
          nullable: true
          type: array
        bcc:
          description: Optional bcc recipients
          items:
            description: Optional bcc recipients
            nullable: true
            type: string
          nullable: true
          type: array
        from:
          description: Optional from override
          nullable: true
          type: string
        useInboxName:
          description: Optionally use inbox name as display name for sender email
            address
          nullable: true
          type: boolean
        filterBouncedRecipients:
          description: "Filter recipients to remove any bounced recipients from to,\
            \ bcc, and cc before sending"
          nullable: true
          type: boolean
      required:
      - to
      type: object
    ContentMatchOptions:
      description: Options for matching content using regex patterns based on Java
        Pattern syntax
      example:
        pattern: pattern
      properties:
        pattern:
          description: "Java style regex pattern. Do not include the typical `/` at\
            \ start or end of regex in some languages. Given an example `your code\
            \ is: 12345` the pattern to extract match looks like `code is: (\\d{6})`.\
            \ This will return an array of matches with the first matching the entire\
            \ pattern and the subsequent matching the groups: `['code is: 123456',\
            \ '123456']` See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html\
            \ for more information of available patterns."
          type: string
      required:
      - pattern
      type: object
    EmailContentMatchResult:
      description: Matches for the given pattern
      example:
        pattern: pattern
        matches:
        - matches
        - matches
      properties:
        pattern:
          type: string
        matches:
          items:
            type: string
          type: array
      required:
      - matches
      - pattern
      type: object
    CheckEmailBodyResults:
      example:
        linkIssues:
        - severity: Warning
          responseStatus: 0
          message: message
          url: url
        - severity: Warning
          responseStatus: 0
          message: message
          url: url
        spellingIssues:
        - severity: Warning
          suggestion: suggestion
          message: message
          group: group
        - severity: Warning
          suggestion: suggestion
          message: message
          group: group
        hasIssues: true
        imageIssues:
        - severity: Warning
          responseStatus: 6
          message: message
          url: url
        - severity: Warning
          responseStatus: 6
          message: message
          url: url
      properties:
        hasIssues:
          type: boolean
        linkIssues:
          items:
            $ref: '#/components/schemas/LinkIssue'
          type: array
        imageIssues:
          items:
            $ref: '#/components/schemas/ImageIssue'
          type: array
        spellingIssues:
          items:
            $ref: '#/components/schemas/SpellingIssue'
          type: array
      required:
      - hasIssues
      - imageIssues
      - linkIssues
      - spellingIssues
      type: object
    ImageIssue:
      example:
        severity: Warning
        responseStatus: 6
        message: message
        url: url
      properties:
        url:
          type: string
        responseStatus:
          format: int32
          type: integer
        severity:
          enum:
          - Warning
          - Error
          type: string
        message:
          type: string
      required:
      - message
      - severity
      - url
      type: object
    LinkIssue:
      example:
        severity: Warning
        responseStatus: 0
        message: message
        url: url
      properties:
        url:
          type: string
        responseStatus:
          format: int32
          type: integer
        severity:
          enum:
          - Warning
          - Error
          type: string
        message:
          type: string
      required:
      - message
      - severity
      - url
      type: object
    SpellingIssue:
      example:
        severity: Warning
        suggestion: suggestion
        message: message
        group: group
      properties:
        group:
          type: string
        suggestion:
          type: string
        severity:
          enum:
          - Warning
          - Error
          type: string
        message:
          type: string
      required:
      - group
      - message
      - severity
      - suggestion
      type: object
    CheckEmailBodyFeatureSupportResults:
      example:
        result:
          names:
            family:
            - name: name
              slug: aol
            - name: name
              slug: aol
            category:
            - name: name
              slug: css
            - name: name
              slug: css
            platform:
            - name: name
              slug: android
            - name: name
              slug: android
          detectedFeatures:
          - amp
          - amp
          featureOverviews:
          - notes: notes
            feature: amp
            description: description
            statuses:
            - SUPPORTED
            - SUPPORTED
            title: title
            category: css
            featureStatistics:
            - feature: amp
              family: aol
              platforms:
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
            - feature: amp
              family: aol
              platforms:
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
            notesNumbers:
              key: notesNumbers
          - notes: notes
            feature: amp
            description: description
            statuses:
            - SUPPORTED
            - SUPPORTED
            title: title
            category: css
            featureStatistics:
            - feature: amp
              family: aol
              platforms:
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
            - feature: amp
              family: aol
              platforms:
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
            notesNumbers:
              key: notesNumbers
          featurePercentages:
          - percentage: 0.8008282
            status: SUPPORTED
          - percentage: 0.8008282
            status: SUPPORTED
      properties:
        result:
          $ref: '#/components/schemas/EmailFeatureSupportResult'
      required:
      - result
      type: object
    SearchEmailsOptions:
      example:
        sortDirection: ASC
        inboxIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        pageIndex: 0
        before: 2000-01-23T04:56:07.000+00:00
        pageSize: 60
        unreadOnly: true
        searchFilter: searchFilter
        since: 2000-01-23T04:56:07.000+00:00
      properties:
        inboxIds:
          description: Optional inbox ids to filter by. Can be repeated. By default
            will use all inboxes belonging to your account.
          items:
            description: Optional inbox ids to filter by. Can be repeated. By default
              will use all inboxes belonging to your account.
            format: uuid
            type: string
          type: array
        pageIndex:
          description: Optional page index in email list pagination
          format: int32
          type: integer
        pageSize:
          description: Optional page size in email list pagination. Maximum size is
            100. Use page index and sort to page through larger results
          format: int32
          maximum: 100
          type: integer
        sortDirection:
          description: Optional createdAt sort direction ASC or DESC
          enum:
          - ASC
          - DESC
          type: string
        unreadOnly:
          description: Optional filter for unread emails only. All emails are considered
            unread until they are viewed in the dashboard or requested directly
          type: boolean
        searchFilter:
          description: "Optional search filter. Searches email recipients, sender,\
            \ subject, email address and ID. Does not search email body"
          type: string
        since:
          description: Optional filter emails received after given date time
          format: date-time
          type: string
        before:
          description: Optional filter emails received before given date time
          format: date-time
          type: string
      type: object
    EmailProjection:
      description: A compact representation of a full email. Used in list endpoints
        to keep response sizes low. Body and attachments are not included. To get
        all fields of the email use the `getEmail` method with the email projection's
        ID. See `EmailDto` for documentation on projection properties.
      example:
        cc:
        - cc
        - cc
        attachments:
        - attachments
        - attachments
        bcc:
        - bcc
        - bcc
        read: true
        subject: subject
        inReplyTo: inReplyTo
        bodyPartContentTypes:
        - bodyPartContentTypes
        - bodyPartContentTypes
        messageId: messageId
        favourite: true
        teamAccess: true
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        bodyMD5Hash: bodyMD5Hash
        sizeBytes: 0
        threadId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        createdAt: 2000-01-23T04:56:07.000+00:00
        plusAddress: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sender:
          emailAddress: emailAddress
          rawValue: rawValue
          name: name
        recipients:
          cc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          bcc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          to:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
        textExcerpt: textExcerpt
        from: from
        to:
        - to
        - to
        bodyExcerpt: bodyExcerpt
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        sender:
          $ref: '#/components/schemas/Sender'
        recipients:
          $ref: '#/components/schemas/EmailRecipients'
        inboxId:
          format: uuid
          type: string
        attachments:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        createdAt:
          format: date-time
          type: string
        to:
          items:
            type: string
          type: array
        cc:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        bcc:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        messageId:
          nullable: true
          type: string
        domainId:
          format: uuid
          nullable: true
          type: string
        favourite:
          nullable: true
          type: boolean
        plusAddress:
          format: uuid
          nullable: true
          type: string
        sizeBytes:
          format: int64
          nullable: true
          type: integer
        inReplyTo:
          nullable: true
          type: string
        read:
          type: boolean
        bodyExcerpt:
          nullable: true
          type: string
        textExcerpt:
          nullable: true
          type: string
        bodyPartContentTypes:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        bodyMD5Hash:
          nullable: true
          type: string
        teamAccess:
          type: boolean
        subject:
          nullable: true
          type: string
        id:
          format: uuid
          type: string
        threadId:
          format: uuid
          nullable: true
          type: string
        from:
          nullable: true
          type: string
      required:
      - createdAt
      - from
      - id
      - inboxId
      - read
      - teamAccess
      - to
      type: object
    PageEmailProjection:
      description: Paginated email projection results. EmailProjections and EmailPreviews
        are essentially the same but have legacy naming issues. Page index starts
        at zero. Projection results may omit larger entity fields. For fetching a
        full email entity use the projection ID with individual method calls. For
        emails there are several methods for fetching message bodies and attachments.
      example:
        number: 2
        last: true
        numberOfElements: 5
        size: 5
        totalPages: 1
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - cc:
          - cc
          - cc
          attachments:
          - attachments
          - attachments
          bcc:
          - bcc
          - bcc
          read: true
          subject: subject
          inReplyTo: inReplyTo
          bodyPartContentTypes:
          - bodyPartContentTypes
          - bodyPartContentTypes
          messageId: messageId
          favourite: true
          teamAccess: true
          domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          bodyMD5Hash: bodyMD5Hash
          sizeBytes: 0
          threadId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          createdAt: 2000-01-23T04:56:07.000+00:00
          plusAddress: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sender:
            emailAddress: emailAddress
            rawValue: rawValue
            name: name
          recipients:
            cc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            bcc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            to:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
          textExcerpt: textExcerpt
          from: from
          to:
          - to
          - to
          bodyExcerpt: bodyExcerpt
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - cc:
          - cc
          - cc
          attachments:
          - attachments
          - attachments
          bcc:
          - bcc
          - bcc
          read: true
          subject: subject
          inReplyTo: inReplyTo
          bodyPartContentTypes:
          - bodyPartContentTypes
          - bodyPartContentTypes
          messageId: messageId
          favourite: true
          teamAccess: true
          domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          bodyMD5Hash: bodyMD5Hash
          sizeBytes: 0
          threadId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          createdAt: 2000-01-23T04:56:07.000+00:00
          plusAddress: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sender:
            emailAddress: emailAddress
            rawValue: rawValue
            name: name
          recipients:
            cc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            bcc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            to:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
          textExcerpt: textExcerpt
          from: from
          to:
          - to
          - to
          bodyExcerpt: bodyExcerpt
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 6
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/EmailProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    CheckEmailClientSupportOptions:
      description: Options for the email to be validated
      example:
        emailBody: emailBody
      properties:
        emailBody:
          type: string
      required:
      - emailBody
      type: object
    CheckEmailClientSupportResults:
      example:
        result:
          names:
            family:
            - name: name
              slug: aol
            - name: name
              slug: aol
            category:
            - name: name
              slug: css
            - name: name
              slug: css
            platform:
            - name: name
              slug: android
            - name: name
              slug: android
          detectedFeatures:
          - amp
          - amp
          featureOverviews:
          - notes: notes
            feature: amp
            description: description
            statuses:
            - SUPPORTED
            - SUPPORTED
            title: title
            category: css
            featureStatistics:
            - feature: amp
              family: aol
              platforms:
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
            - feature: amp
              family: aol
              platforms:
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
            notesNumbers:
              key: notesNumbers
          - notes: notes
            feature: amp
            description: description
            statuses:
            - SUPPORTED
            - SUPPORTED
            title: title
            category: css
            featureStatistics:
            - feature: amp
              family: aol
              platforms:
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
            - feature: amp
              family: aol
              platforms:
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
              - versions:
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                - supportFlags:
                    notes:
                    - notes
                    - notes
                    status: SUPPORTED
                  version: version
                platform: android
            notesNumbers:
              key: notesNumbers
          featurePercentages:
          - percentage: 0.8008282
            status: SUPPORTED
          - percentage: 0.8008282
            status: SUPPORTED
      properties:
        result:
          $ref: '#/components/schemas/EmailFeatureSupportResult'
      required:
      - result
      type: object
    CanSendEmailResults:
      example:
        message: message
        isSendingPermitted: true
      properties:
        isSendingPermitted:
          type: boolean
        message:
          type: string
      required:
      - isSendingPermitted
      type: object
    ValidateEmailAddressListOptions:
      description: Options for validating a list of email addresses
      example:
        ignoreOldResults: true
        emailAddressList:
        - emailAddressList
        - emailAddressList
        - emailAddressList
        - emailAddressList
        - emailAddressList
      properties:
        emailAddressList:
          items:
            type: string
          maxItems: 50
          minItems: 1
          type: array
        ignoreOldResults:
          nullable: true
          type: boolean
      required:
      - emailAddressList
      type: object
    ValidateEmailAddressListResult:
      description: Result of validating a list of email addresses
      example:
        invalidEmailAddresses:
        - invalidEmailAddresses
        - invalidEmailAddresses
        validEmailAddresses:
        - validEmailAddresses
        - validEmailAddresses
        resultMapEmailAddressIsValid:
          key: true
      properties:
        validEmailAddresses:
          items:
            type: string
          type: array
        invalidEmailAddresses:
          items:
            type: string
          type: array
        resultMapEmailAddressIsValid:
          additionalProperties:
            type: boolean
          type: object
      required:
      - invalidEmailAddresses
      - resultMapEmailAddressIsValid
      - validEmailAddresses
      type: object
    CreateDomainOptions:
      description: Options for creating a domain to use with MailSlurp. You must have
        ownership access to this domain in order to verify it. Domains will not function
        correctly until the domain has been verified. See https://www.mailslurp.com/guides/custom-domains
        for help. Domains can be either `HTTP` or `SMTP` type. The type of domain
        determines which inboxes can be used with it. `SMTP` inboxes use a mail server
        running `mxslurp.click` while `HTTP` inboxes are handled by AWS SES.
      example:
        createdCatchAllInbox: true
        domainType: HTTP_INBOX
        domain: domain
        description: description
      properties:
        domain:
          description: The top level domain you wish to use with MailSlurp. Do not
            specify subdomain just the top level. So `test.com` covers all subdomains
            such as `mail.test.com`. Don't include a protocol such as `http://`. Once
            added you must complete the verification steps by adding the returned
            records to your domain.
          type: string
        description:
          description: Optional description of the domain.
          nullable: true
          type: string
        createdCatchAllInbox:
          description: Whether to create a catch all inbox for the domain. Any email
            sent to an address using your domain that cannot be matched to an existing
            inbox you created with the domain will be routed to the created catch
            all inbox. You can access emails using the regular methods on this inbox
            ID.
          nullable: true
          type: boolean
        domainType:
          description: Type of domain. Dictates type of inbox that can be created
            with domain. HTTP means inboxes are processed using SES while SMTP inboxes
            use a custom SMTP mail server. SMTP does not support sending so use HTTP
            for sending emails.
          enum:
          - HTTP_INBOX
          - SMTP_DOMAIN
          nullable: true
          type: string
      required:
      - domain
      type: object
    CreateContactOptions:
      description: Options for creating an email contact in address book
      example:
        firstName: firstName
        lastName: lastName
        metaData: "{}"
        optOut: true
        emailAddresses:
        - emailAddresses
        groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        company: company
        verifyEmailAddresses: true
        tags:
        - tags
        - tags
      properties:
        firstName:
          nullable: true
          type: string
        lastName:
          nullable: true
          type: string
        company:
          nullable: true
          type: string
        emailAddresses:
          description: Set of email addresses belonging to the contact
          items:
            description: Set of email addresses belonging to the contact
            nullable: true
            type: string
          maxItems: 1
          minItems: 0
          nullable: true
          type: array
        tags:
          description: Tags that can be used to search and group contacts
          items:
            description: Tags that can be used to search and group contacts
            nullable: true
            type: string
          nullable: true
          type: array
        metaData:
          nullable: true
          type: object
        optOut:
          description: Has the user explicitly or implicitly opted out of being contacted?
            If so MailSlurp will ignore them in all actions.
          nullable: true
          type: boolean
        groupId:
          description: Group IDs that contact belongs to
          format: uuid
          nullable: true
          type: string
        verifyEmailAddresses:
          description: Whether to validate contact email address exists
          nullable: true
          type: boolean
      type: object
    OptInConsentOptions:
      example:
        sendOptInOptions:
          subject: subject
          senderInbox: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          templateHtml: templateHtml
        emailAddress: emailAddress
        companyName: companyName
      properties:
        emailAddress:
          type: string
        companyName:
          type: string
        sendOptInOptions:
          $ref: '#/components/schemas/SendOptInConsentEmailOptions'
      required:
      - emailAddress
      type: object
    SendOptInConsentEmailOptions:
      example:
        subject: subject
        senderInbox: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        templateHtml: templateHtml
      properties:
        templateHtml:
          type: string
        subject:
          type: string
        senderInbox:
          format: uuid
          type: string
      required:
      - subject
      - templateHtml
      type: object
    OptInConsentSendResult:
      example:
        sent: true
      properties:
        sent:
          type: boolean
      required:
      - sent
      type: object
    ConnectorSyncRequestResult:
      example:
        exception: exception
        eventId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        syncResult:
          emailIds:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          emailSyncCount: 0
          logs:
          - logs
          - logs
      properties:
        syncResult:
          $ref: '#/components/schemas/ConnectorSyncResult'
        exception:
          type: string
        eventId:
          format: uuid
          type: string
      type: object
    ConnectorSyncResult:
      example:
        emailIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        emailSyncCount: 0
        logs:
        - logs
        - logs
      properties:
        emailSyncCount:
          format: int32
          type: integer
        logs:
          items:
            type: string
          type: array
        emailIds:
          items:
            format: uuid
            type: string
          type: array
      required:
      - emailSyncCount
      type: object
    CreateConnectorSyncSettingsOptions:
      description: Options for creating automatic syncing between an inbox connection
        and an external mail provider
      example:
        syncEnabled: true
        syncInterval: 0
        syncScheduleType: INTERVAL
      properties:
        syncEnabled:
          description: Enable automatic background sync
          nullable: true
          type: boolean
        syncScheduleType:
          description: Sync schedule type
          enum:
          - INTERVAL
          nullable: true
          type: string
        syncInterval:
          description: Sync interval in minutes
          format: int32
          nullable: true
          type: integer
      type: object
    ConnectorSyncSettingsDto:
      example:
        syncEnabled: true
        syncInterval: 0
        connectorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        syncScheduleType: INTERVAL
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        connectorId:
          format: uuid
          type: string
        syncEnabled:
          type: boolean
        syncScheduleType:
          enum:
          - INTERVAL
          nullable: true
          type: string
        syncInterval:
          format: int32
          nullable: true
          type: integer
      required:
      - connectorId
      - id
      - syncEnabled
      - userId
      type: object
    CreateConnectorSmtpConnectionOptions:
      example:
        localHostName: localHostName
        smtpMechanisms:
        - smtpMechanisms
        - smtpMechanisms
        proxyEnabled: true
        smtpUsername: smtpUsername
        startTls: true
        smtpPort: 0
        proxyHost: proxyHost
        enabled: true
        proxyPort: 6
        sslProtocols:
        - sslProtocols
        - sslProtocols
        smtpHost: smtpHost
        smtpSsl: true
        smtpPassword: smtpPassword
        sslTrust: sslTrust
      properties:
        enabled:
          nullable: true
          type: boolean
        smtpHost:
          type: string
        smtpPort:
          format: int32
          nullable: true
          type: integer
        smtpSsl:
          nullable: true
          type: boolean
        smtpUsername:
          nullable: true
          type: string
        smtpPassword:
          nullable: true
          type: string
        smtpMechanisms:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        startTls:
          nullable: true
          type: boolean
        localHostName:
          nullable: true
          type: string
        proxyHost:
          nullable: true
          type: string
        proxyPort:
          format: int32
          nullable: true
          type: integer
        proxyEnabled:
          nullable: true
          type: boolean
        sslTrust:
          nullable: true
          type: string
        sslProtocols:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
      required:
      - smtpHost
      type: object
    ConnectorSmtpConnectionDto:
      example:
        localHostName: localHostName
        smtpMechanisms:
        - smtpMechanisms
        - smtpMechanisms
        proxyEnabled: true
        smtpUsername: smtpUsername
        startTls: true
        connectorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        smtpPort: 0
        proxyHost: proxyHost
        enabled: true
        proxyPort: 6
        sslProtocols:
        - sslProtocols
        - sslProtocols
        createdAt: 2000-01-23T04:56:07.000+00:00
        smtpHost: smtpHost
        smtpSsl: true
        smtpPassword: smtpPassword
        sslTrust: sslTrust
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        connectorId:
          format: uuid
          type: string
        smtpHost:
          type: string
        smtpPort:
          format: int32
          nullable: true
          type: integer
        smtpUsername:
          nullable: true
          type: string
        smtpPassword:
          nullable: true
          type: string
        smtpSsl:
          nullable: true
          type: boolean
        startTls:
          nullable: true
          type: boolean
        smtpMechanisms:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        localHostName:
          nullable: true
          type: string
        proxyHost:
          nullable: true
          type: string
        proxyPort:
          format: int32
          nullable: true
          type: integer
        proxyEnabled:
          nullable: true
          type: boolean
        enabled:
          nullable: true
          type: boolean
        sslTrust:
          nullable: true
          type: string
        sslProtocols:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        createdAt:
          format: date-time
          type: string
        id:
          format: uuid
          type: string
      required:
      - connectorId
      - createdAt
      - id
      - smtpHost
      type: object
    ConnectorSmtpConnectionTestResult:
      example:
        success: true
        error: error
        message: message
        logs:
        - logs
        - logs
      properties:
        error:
          type: string
        success:
          type: boolean
        message:
          type: string
        logs:
          items:
            type: string
          type: array
      required:
      - success
      type: object
    CreateConnectorImapConnectionOptions:
      description: Options for IMAP connection to external email inbox. Allows syncing
        emails via IMAP.
      example:
        imapSsl: true
        localHostName: localHostName
        proxyEnabled: true
        searchTerms: searchTerms
        startTls: true
        selectFolder: selectFolder
        imapPassword: imapPassword
        imapUsername: imapUsername
        imapPort: 0
        proxyHost: proxyHost
        imapHost: imapHost
        enabled: true
        proxyPort: 6
        sslProtocols:
        - sslProtocols
        - sslProtocols
        sslTrust: sslTrust
        mechanisms:
        - mechanisms
        - mechanisms
      properties:
        imapSsl:
          nullable: true
          type: boolean
        imapUsername:
          nullable: true
          type: string
        imapPassword:
          nullable: true
          type: string
        selectFolder:
          description: Optional folder to select during IMAP connection
          nullable: true
          type: string
        searchTerms:
          nullable: true
          type: string
        imapPort:
          description: IMAP server port
          format: int32
          nullable: true
          type: integer
        imapHost:
          description: IMAP server host
          type: string
        enabled:
          description: IMAP server enabled
          nullable: true
          type: boolean
        startTls:
          nullable: true
          type: boolean
        proxyEnabled:
          nullable: true
          type: boolean
        proxyPort:
          format: int32
          nullable: true
          type: integer
        proxyHost:
          nullable: true
          type: string
        localHostName:
          nullable: true
          type: string
        mechanisms:
          description: List of IMAP mechanisms
          items:
            description: List of IMAP mechanisms
            nullable: true
            type: string
          nullable: true
          type: array
        sslTrust:
          nullable: true
          type: string
        sslProtocols:
          description: List of SSL protocols
          items:
            description: List of SSL protocols
            nullable: true
            type: string
          nullable: true
          type: array
      required:
      - imapHost
      type: object
    ConnectorImapConnectionDto:
      example:
        imapSsl: true
        localHostName: localHostName
        proxyEnabled: true
        searchTerms: searchTerms
        startTls: true
        connectorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        selectFolder: selectFolder
        imapPassword: imapPassword
        imapUsername: imapUsername
        imapPort: 0
        proxyHost: proxyHost
        imapHost: imapHost
        enabled: true
        proxyPort: 6
        sslProtocols:
        - sslProtocols
        - sslProtocols
        createdAt: 2000-01-23T04:56:07.000+00:00
        sslTrust: sslTrust
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        mechanisms:
        - mechanisms
        - mechanisms
      properties:
        connectorId:
          format: uuid
          type: string
        imapHost:
          type: string
        imapPort:
          format: int32
          type: integer
        imapUsername:
          type: string
        imapPassword:
          type: string
        imapSsl:
          type: boolean
        selectFolder:
          type: string
        searchTerms:
          type: string
        startTls:
          type: boolean
        proxyHost:
          type: string
        proxyPort:
          format: int32
          type: integer
        proxyEnabled:
          type: boolean
        localHostName:
          type: string
        mechanisms:
          items:
            type: string
          type: array
        sslProtocols:
          items:
            type: string
          type: array
        sslTrust:
          type: string
        enabled:
          type: boolean
        createdAt:
          format: date-time
          type: string
        id:
          format: uuid
          type: string
      required:
      - connectorId
      - createdAt
      - id
      - imapHost
      type: object
    ConnectorImapConnectionTestResult:
      example:
        success: true
        error: error
        message: message
        logs:
        - logs
        - logs
      properties:
        error:
          type: string
        success:
          type: boolean
        message:
          type: string
        logs:
          items:
            type: string
          type: array
      required:
      - success
      type: object
    CreateConnectorWithOptions:
      description: Options for creating an inbox connection with an external mail
        provider including extra settings
      example:
        createConnectorImapConnectionOptions:
          imapSsl: true
          localHostName: localHostName
          proxyEnabled: true
          searchTerms: searchTerms
          startTls: true
          selectFolder: selectFolder
          imapPassword: imapPassword
          imapUsername: imapUsername
          imapPort: 0
          proxyHost: proxyHost
          imapHost: imapHost
          enabled: true
          proxyPort: 6
          sslProtocols:
          - sslProtocols
          - sslProtocols
          sslTrust: sslTrust
          mechanisms:
          - mechanisms
          - mechanisms
        createConnectorSmtpConnectionOptions:
          localHostName: localHostName
          smtpMechanisms:
          - smtpMechanisms
          - smtpMechanisms
          proxyEnabled: true
          smtpUsername: smtpUsername
          startTls: true
          smtpPort: 0
          proxyHost: proxyHost
          enabled: true
          proxyPort: 6
          sslProtocols:
          - sslProtocols
          - sslProtocols
          smtpHost: smtpHost
          smtpSsl: true
          smtpPassword: smtpPassword
          sslTrust: sslTrust
        createConnectorOptions:
          emailAddress: emailAddress
          name: name
          enabled: true
        createConnectorSyncSettingsOptions:
          syncEnabled: true
          syncInterval: 0
          syncScheduleType: INTERVAL
      properties:
        createConnectorOptions:
          $ref: '#/components/schemas/CreateConnectorOptions'
        createConnectorImapConnectionOptions:
          $ref: '#/components/schemas/CreateConnectorImapConnectionOptions'
        createConnectorSmtpConnectionOptions:
          $ref: '#/components/schemas/CreateConnectorSmtpConnectionOptions'
        createConnectorSyncSettingsOptions:
          $ref: '#/components/schemas/CreateConnectorSyncSettingsOptions'
      required:
      - createConnectorOptions
      type: object
    BulkSendEmailOptions:
      description: Options for bulk sending an email from multiple addresses. See
        regular `sendEmail` methods for more information.
      example:
        inboxIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sendEmailOptions:
          template: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          charset: charset
          bcc:
          - bcc
          - bcc
          attachments:
          - attachments
          - attachments
          subject: subject
          isXAmpHtml: true
          body: body
          bodyParts:
          - contentType: contentType
            contentBody: contentBody
          - contentType: contentType
            contentBody: contentBody
          useInboxName: true
          toContacts:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          fromName: fromName
          from: from
          html: true
          validateEmailAddresses: VALIDATE_FILTER_REMOVE_INVALID
          toGroup: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          customHeaders:
            key: customHeaders
          cc:
          - cc
          - cc
          sendStrategy: SINGLE_MESSAGE
          filterBouncedRecipients: true
          ignoreEmptyRecipients: true
          addTrackingPixel: true
          templateVariables:
            key: "{}"
          isHTML: true
          replyTo: replyTo
          to:
          - to
          - to
      properties:
        inboxIds:
          description: Inboxes to send the email from
          items:
            description: Inboxes to send the email from
            format: uuid
            type: string
          type: array
        sendEmailOptions:
          $ref: '#/components/schemas/SendEmailOptions'
      required:
      - inboxIds
      - sendEmailOptions
      type: object
    FilterBouncedRecipientsOptions:
      description: Options for filtering bounced email recipients
      example:
        emailRecipients:
        - emailRecipients
        - emailRecipients
      properties:
        emailRecipients:
          items:
            type: string
          type: array
      required:
      - emailRecipients
      type: object
    FilterBouncedRecipientsResult:
      description: Remaining recipients that were filtered to remove bounced recipients
      example:
        filteredRecipients:
        - filteredRecipients
        - filteredRecipients
      properties:
        filteredRecipients:
          items:
            type: string
          type: array
      required:
      - filteredRecipients
      type: object
    UploadAttachmentOptions:
      description: Options for uploading files for attachments. When sending emails
        with the API that require attachments first upload each attachment. Then use
        the returned attachment ID in your `SendEmailOptions` when sending an email.
        This way you can use attachments multiple times once they have been uploaded.
      example:
        filename: filename
        contentId: contentId
        base64Contents: base64Contents
        contentType: contentType
      properties:
        contentId:
          description: Optional contentId for file.
          nullable: true
          title: Content ID
          type: string
        contentType:
          description: Optional contentType for file. For instance `application/pdf`
          nullable: true
          title: Content type
          type: string
        filename:
          description: Optional filename to save upload with. Will be the name that
            is shown in email clients
          nullable: true
          title: File name
          type: string
        base64Contents:
          description: Base64 encoded string of file contents. Typically this means
            reading the bytes or string content of a file and then converting that
            to a base64 encoded string. For examples of how to do this see https://www.mailslurp.com/guides/base64-file-uploads/
          title: Base 64 file contents
          type: string
      required:
      - base64Contents
      type: object
    CreateAliasOptions:
      description: Create email alias options. Email aliases can be used to mask real
        email addresses behind an ID. You can also attach an inbox to an alias so
        that any email received by the inbox email address if forwarded to the alias
        email address.
      example:
        emailAddress: emailAddress
        name: name
        verifyEmailAddress: true
        useThreads: true
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        emailAddress:
          description: Email address to be hidden behind alias. Emails sent to the
            alias email address will be forwarded to this address. If you want to
            enable replies set useThreads true and the reply-to for the email will
            allow outbound communication via a thread. Some email addresses may require
            verification if they are not added as a contact first.
          type: string
        inboxId:
          description: "Optional inbox ID to attach to alias. Null by default means\
            \ an a new inbox will be created for the alias. Use a custom inbox to\
            \ control what email address the alias uses. To use custom email addresses\
            \ create a domain and an inbox, the use the inbox ID with this call. Emails\
            \ received by this inbox will be forwarded to the alias email address"
          format: uuid
          nullable: true
          type: string
        name:
          description: Optional name for alias
          nullable: true
          type: string
        useThreads:
          description: Enable threads options. If true emails will be sent with a
            unique reply-to thread address. This means you can reply to the forwarded
            email and it will be sent to the recipients via your alias address. That
            way a thread conversation is preserved.
          type: boolean
        domainId:
          description: Custom domain ID to use when generating alias email addresses
          format: uuid
          nullable: true
          type: string
        verifyEmailAddress:
          description: Whether to verify the masked email address exists before sending
            an email to it
          nullable: true
          type: boolean
      required:
      - emailAddress
      - useThreads
      type: object
    AITranformCreateOptions:
      example:
        instructions:
        - instructions
        - instructions
        outputSchema:
          maxItems: 0
          nullable: true
          minLength: 0
          format: format
          pattern: pattern
          anyOf:
          - null
          - null
          description: description
          title: title
          type: string
          enum:
          - enum
          - enum
          required:
          - required
          - required
          example: "{}"
          minProperties: 0
          minItems: 0
          default: "{}"
          propertyOrdering:
          - propertyOrdering
          - propertyOrdering
          maximum: 7.061401241503109
          maxProperties: 0
          items: null
          minimum: 9.301444243932576
          maxLength: 0
          properties:
            key: null
        name: name
        conditions:
        - conditions
        - conditions
      properties:
        name:
          type: string
        conditions:
          items:
            type: string
          type: array
        instructions:
          items:
            type: string
          type: array
        outputSchema:
          $ref: '#/components/schemas/StructuredOutputSchema'
      type: object
    StructuredOutputSchema:
      description: JSON output schema for structured content repsonses. This schema
        dictates the format that an AI should use when responding to your instructions.
      example:
        maxItems: 0
        nullable: true
        minLength: 0
        format: format
        pattern: pattern
        anyOf:
        - null
        - null
        description: description
        title: title
        type: string
        enum:
        - enum
        - enum
        required:
        - required
        - required
        example: "{}"
        minProperties: 0
        minItems: 0
        default: "{}"
        propertyOrdering:
        - propertyOrdering
        - propertyOrdering
        maximum: 7.061401241503109
        maxProperties: 0
        items: null
        minimum: 9.301444243932576
        maxLength: 0
        properties:
          key: null
      properties:
        anyOf:
          items:
            $ref: '#/components/schemas/StructuredOutputSchema'
          nullable: true
          type: array
        default:
          nullable: true
          type: object
        description:
          description: Provide a description of the schema to help the AI understand
            the schema.
          nullable: true
          type: string
        enum:
          description: When using type string and format enum pass a collection of
            enum values here.
          items:
            description: When using type string and format enum pass a collection
              of enum values here.
            nullable: true
            type: string
          nullable: true
          type: array
        example:
          nullable: true
          type: object
        format:
          description: "Format for string types. Can be null, date-time or enum."
          nullable: true
          type: string
        items:
          $ref: '#/components/schemas/StructuredOutputSchema'
        maxItems:
          format: int64
          minimum: 0
          nullable: true
          type: integer
        minItems:
          format: int64
          minimum: 0
          nullable: true
          type: integer
        maxLength:
          format: int64
          minimum: 0
          nullable: true
          type: integer
        minLength:
          format: int64
          minimum: 0
          nullable: true
          type: integer
        pattern:
          nullable: true
          type: string
        properties:
          additionalProperties:
            $ref: '#/components/schemas/StructuredOutputSchema'
          description: Properties of an OBJECT schema. These are key value pairs where
            the key is the property name and the value is the schema for that property.
          nullable: true
          type: object
        propertyOrdering:
          description: Pass an array of property names to specify the order of properties
            in the generated JSON object if required.
          items:
            description: Pass an array of property names to specify the order of properties
              in the generated JSON object if required.
            nullable: true
            type: string
          nullable: true
          type: array
        required:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        maxProperties:
          format: int64
          minimum: 0
          nullable: true
          type: integer
        minProperties:
          format: int64
          minimum: 0
          nullable: true
          type: integer
        maximum:
          nullable: true
          type: number
        minimum:
          nullable: true
          type: number
        nullable:
          nullable: true
          type: boolean
        title:
          nullable: true
          type: string
        type:
          description: Primitive JSON schema types with a fallback CUSTOM for unknown
            values.
          enum:
          - string
          - number
          - integer
          - boolean
          - object
          - array
          - "null"
          nullable: true
          type: string
      type: object
    AITransformDto:
      example:
        instructions:
        - instructions
        - instructions
        outputSchema:
          maxItems: 0
          nullable: true
          minLength: 0
          format: format
          pattern: pattern
          anyOf:
          - null
          - null
          description: description
          title: title
          type: string
          enum:
          - enum
          - enum
          required:
          - required
          - required
          example: "{}"
          minProperties: 0
          minItems: 0
          default: "{}"
          propertyOrdering:
          - propertyOrdering
          - propertyOrdering
          maximum: 7.061401241503109
          maxProperties: 0
          items: null
          minimum: 9.301444243932576
          maxLength: 0
          properties:
            key: null
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        conditions:
        - conditions
        - conditions
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        conditions:
          items:
            type: string
          type: array
        instructions:
          items:
            type: string
          type: array
        outputSchema:
          $ref: '#/components/schemas/StructuredOutputSchema'
      required:
      - id
      type: object
    CreateAITransformerMappingOptions:
      example:
        aiTransformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        contentSelector: RAW
        entityType: INBOX
        name: name
        triggerSelector: PER_MESSAGE
        spreadRootArray: true
        entityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        name:
          type: string
        aiTransformId:
          format: uuid
          type: string
        entityId:
          format: uuid
          type: string
        entityType:
          enum:
          - INBOX
          - PHONE
          type: string
        contentSelector:
          enum:
          - RAW
          - BODY
          - BODY_ATTACHMENTS
          type: string
        triggerSelector:
          enum:
          - PER_MESSAGE
          - PER_ATTACHMENT
          type: string
        spreadRootArray:
          type: boolean
      required:
      - aiTransformId
      - entityId
      - entityType
      - name
      type: object
    AITransformMappingDto:
      example:
        aiTransformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        entityType: INBOX
        name: name
        entityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        aiTransformId:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        name:
          type: string
        entityId:
          format: uuid
          type: string
        entityType:
          enum:
          - INBOX
          - PHONE
          type: string
      required:
      - aiTransformId
      - entityId
      - entityType
      - id
      - userId
      type: object
    StructuredOutputSchemaValidation:
      example:
        valid: true
        exampleOutput: exampleOutput
        errors:
        - errors
        - errors
      properties:
        valid:
          type: boolean
        errors:
          items:
            type: string
          type: array
        exampleOutput:
          type: string
      required:
      - valid
      type: object
    GenerateStructuredContentSmsOptions:
      description: Options for generating structured content output from an SMS
      example:
        instructions: instructions
        smsId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        outputSchema:
          maxItems: 0
          nullable: true
          minLength: 0
          format: format
          pattern: pattern
          anyOf:
          - null
          - null
          description: description
          title: title
          type: string
          enum:
          - enum
          - enum
          required:
          - required
          - required
          example: "{}"
          minProperties: 0
          minItems: 0
          default: "{}"
          propertyOrdering:
          - propertyOrdering
          - propertyOrdering
          maximum: 7.061401241503109
          maxProperties: 0
          items: null
          minimum: 9.301444243932576
          maxLength: 0
          properties:
            key: null
        transformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        smsId:
          description: SMS ID to read and pass to AI
          format: uuid
          type: string
        instructions:
          description: Optional instructions for the AI to follow. Try to be precise
            and clear. You can include examples and hints.
          nullable: true
          type: string
        outputSchema:
          $ref: '#/components/schemas/StructuredOutputSchema'
        transformId:
          description: ID of transformer to apply
          format: uuid
          nullable: true
          type: string
      required:
      - smsId
      type: object
    StructuredContentResultDto:
      example:
        result: "{}"
      properties:
        result:
          type: object
      required:
      - result
      type: object
    GenerateStructuredContentEmailOptions:
      description: Options for generating structured content output from an email
      example:
        instructions: instructions
        contentSelector: RAW
        outputSchema:
          maxItems: 0
          nullable: true
          minLength: 0
          format: format
          pattern: pattern
          anyOf:
          - null
          - null
          description: description
          title: title
          type: string
          enum:
          - enum
          - enum
          required:
          - required
          - required
          example: "{}"
          minProperties: 0
          minItems: 0
          default: "{}"
          propertyOrdering:
          - propertyOrdering
          - propertyOrdering
          maximum: 7.061401241503109
          maxProperties: 0
          items: null
          minimum: 9.301444243932576
          maxLength: 0
          properties:
            key: null
        transformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        emailId:
          description: Email ID to read and pass to AI
          format: uuid
          type: string
        contentSelector:
          description: Content selector to select part of email to operate on
          enum:
          - RAW
          - BODY
          - BODY_ATTACHMENTS
          nullable: true
          type: string
        instructions:
          description: Optional instructions for the AI to follow. Try to be precise
            and clear. You can include examples and hints.
          nullable: true
          type: string
        outputSchema:
          $ref: '#/components/schemas/StructuredOutputSchema'
        transformId:
          description: ID of transformer to apply
          format: uuid
          nullable: true
          type: string
      required:
      - emailId
      type: object
    GenerateStructuredContentAttachmentOptions:
      description: Options for generating structured content output from an attachment
      example:
        instructions: instructions
        outputSchema:
          maxItems: 0
          nullable: true
          minLength: 0
          format: format
          pattern: pattern
          anyOf:
          - null
          - null
          description: description
          title: title
          type: string
          enum:
          - enum
          - enum
          required:
          - required
          - required
          example: "{}"
          minProperties: 0
          minItems: 0
          default: "{}"
          propertyOrdering:
          - propertyOrdering
          - propertyOrdering
          maximum: 7.061401241503109
          maxProperties: 0
          items: null
          minimum: 9.301444243932576
          maxLength: 0
          properties:
            key: null
        transformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        attachmentId: attachmentId
      properties:
        attachmentId:
          description: Attachment ID to read and pass to AI
          type: string
        instructions:
          description: Optional instructions for the AI to follow. Try to be precise
            and clear. You can include examples and hints.
          nullable: true
          type: string
        outputSchema:
          $ref: '#/components/schemas/StructuredOutputSchema'
        transformId:
          description: ID of transformer to apply
          format: uuid
          nullable: true
          type: string
        emailId:
          description: Optional email ID for more context
          format: uuid
          nullable: true
          type: string
      required:
      - attachmentId
      type: object
    TestNewInboxRulesetOptions:
      description: Test inbox ruleset options
      example:
        inboxRulesetTestOptions:
          testTarget: testTarget
        createInboxRulesetOptions:
          scope: RECEIVING_EMAILS
          action: BLOCK
          target: target
      properties:
        inboxRulesetTestOptions:
          $ref: '#/components/schemas/InboxRulesetTestOptions'
        createInboxRulesetOptions:
          $ref: '#/components/schemas/CreateInboxRulesetOptions'
      required:
      - createInboxRulesetOptions
      - inboxRulesetTestOptions
      type: object
    UpdateInboxOptions:
      description: Options for updating inbox properties
      example:
        name: name
        description: description
        favourite: true
        expiresAt: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
      properties:
        name:
          description: Name of the inbox and used as the sender name when sending
            emails .Displayed in the dashboard for easier search
          nullable: true
          type: string
        description:
          description: Description of an inbox for labelling and searching purposes
          nullable: true
          type: string
        tags:
          description: Tags that inbox has been tagged with. Tags can be added to
            inboxes to group different inboxes within an account. You can also search
            for inboxes by tag in the dashboard UI.
          items:
            description: Tags that inbox has been tagged with. Tags can be added to
              inboxes to group different inboxes within an account. You can also search
              for inboxes by tag in the dashboard UI.
            nullable: true
            type: string
          nullable: true
          type: array
        expiresAt:
          description: "Inbox expiration time. When, if ever, the inbox should expire\
            \ and be deleted. If null then this inbox is permanent and the emails\
            \ in it won't be deleted. This is the default behavior unless expiration\
            \ date is set. If an expiration date is set and the time is reached MailSlurp\
            \ will expire the inbox and move it to an expired inbox entity. You can\
            \ still access the emails belonging to it but it can no longer send or\
            \ receive email."
          format: date-time
          nullable: true
          type: string
        favourite:
          description: Is the inbox a favorite inbox. Make an inbox a favorite is
            typically done in the dashboard for quick access or filtering
          nullable: true
          type: boolean
      type: object
    UpdateSmtpAccessOptions:
      description: Edit access details for inbox using SMTP
      example:
        smtpUsername: smtpUsername
        smtpPassword: smtpPassword
      properties:
        smtpUsername:
          description: SMTP username for login
          nullable: true
          type: string
        smtpPassword:
          description: SMTP password for login
          nullable: true
          type: string
      type: object
    UpdateImapAccessOptions:
      description: Edit access details for inbox using IMAP
      example:
        imapPassword: imapPassword
        imapUsername: imapUsername
      properties:
        imapUsername:
          description: IMAP username for login
          nullable: true
          type: string
        imapPassword:
          description: IMAP password for login
          nullable: true
          type: string
      type: object
    TestNewInboxForwarderOptions:
      description: Options for testing new inbox forwarder rules
      example:
        createInboxForwarderOptions:
          field: RECIPIENTS
          forwardToRecipients:
          - forwardToRecipients
          - forwardToRecipients
          match: match
        inboxForwarderTestOptions:
          testValue: testValue
      properties:
        inboxForwarderTestOptions:
          $ref: '#/components/schemas/InboxForwarderTestOptions'
        createInboxForwarderOptions:
          $ref: '#/components/schemas/CreateInboxForwarderOptions'
      required:
      - createInboxForwarderOptions
      - inboxForwarderTestOptions
      type: object
    WebhookResultDto:
      description: Result of a webhook notification
      example:
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        phoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        messageId: messageId
        emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        webhookEvent: EMAIL_RECEIVED
        responseTimeMillis: 6
        httpMethod: POST
        responseStatus: 0
        responseBodyExtract: responseBodyExtract
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        webhookUrl: webhookUrl
        seen: true
        createdAt: 2000-01-23T04:56:07.000+00:00
        smsId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        redriveId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        attachmentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        resultType: BAD_RESPONSE
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          nullable: true
          type: string
        userId:
          format: uuid
          type: string
        webhookId:
          format: uuid
          type: string
        webhookUrl:
          type: string
        messageId:
          type: string
        redriveId:
          format: uuid
          nullable: true
          type: string
        httpMethod:
          enum:
          - POST
          - DELETE
          - GET
          - PUT
          - PATCH
          - HEAD
          - OPTIONS
          - TRACE
          type: string
        webhookEvent:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        responseStatus:
          format: int32
          nullable: true
          type: integer
        responseTimeMillis:
          format: int64
          type: integer
        responseBodyExtract:
          nullable: true
          type: string
        resultType:
          enum:
          - BAD_RESPONSE
          - EXCEPTION
          - SUCCESS
          - REDRIVEN
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        seen:
          type: boolean
        inboxId:
          format: uuid
          nullable: true
          type: string
        emailId:
          format: uuid
          nullable: true
          type: string
        attachmentId:
          format: uuid
          nullable: true
          type: string
        phoneId:
          format: uuid
          nullable: true
          type: string
        smsId:
          format: uuid
          nullable: true
          type: string
      required:
      - createdAt
      - httpMethod
      - messageId
      - responseTimeMillis
      - seen
      - updatedAt
      - userId
      - webhookEvent
      - webhookId
      - webhookUrl
      type: object
    PageWebhookResult:
      description: Paginated webhook results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          phoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          messageId: messageId
          emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          webhookEvent: EMAIL_RECEIVED
          responseTimeMillis: 6
          httpMethod: POST
          responseStatus: 0
          responseBodyExtract: responseBodyExtract
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          webhookUrl: webhookUrl
          seen: true
          createdAt: 2000-01-23T04:56:07.000+00:00
          smsId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          redriveId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          attachmentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          resultType: BAD_RESPONSE
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          phoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          messageId: messageId
          emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          webhookEvent: EMAIL_RECEIVED
          responseTimeMillis: 6
          httpMethod: POST
          responseStatus: 0
          responseBodyExtract: responseBodyExtract
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          webhookUrl: webhookUrl
          seen: true
          createdAt: 2000-01-23T04:56:07.000+00:00
          smsId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          redriveId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          attachmentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          resultType: BAD_RESPONSE
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/WebhookResultDto'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    CountDto:
      description: Number of elements
      example:
        totalElements: 0
      properties:
        totalElements:
          format: int64
          type: integer
      required:
      - totalElements
      type: object
    WebhookNewSmsPayload:
      description: NEW_SMS webhook payload. Sent to your webhook url endpoint via
        HTTP POST when an sms is received by the phone number that your webhook is
        attached to. Use the SMS ID to fetch the full SMS details.
      example:
        fromNumber: fromNumber
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        smsId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        phoneNumber: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        read: true
        messageId: messageId
        eventName: EMAIL_RECEIVED
        webhookName: webhookName
        body: body
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        toNumber: toNumber
      properties:
        messageId:
          description: Idempotent message ID. Store this ID locally or in a database
            to prevent message duplication.
          type: string
        webhookId:
          description: ID of webhook entity being triggered
          format: uuid
          type: string
        eventName:
          description: Name of the event type webhook is being triggered for.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        webhookName:
          description: Name of the webhook being triggered
          nullable: true
          type: string
        smsId:
          description: ID of SMS message
          format: uuid
          type: string
        userId:
          description: User ID of event
          format: uuid
          type: string
        phoneNumber:
          description: ID of phone number receiving SMS
          format: uuid
          type: string
        toNumber:
          description: Recipient phone number
          type: string
        fromNumber:
          description: Sender phone number
          type: string
        body:
          description: SMS message body
          type: string
        read:
          description: SMS has been read
          type: boolean
      required:
      - body
      - eventName
      - fromNumber
      - messageId
      - phoneNumber
      - read
      - smsId
      - toNumber
      - userId
      - webhookId
      type: object
    AttachmentMetaData:
      description: Meta data associated with an attachment. Attachments are stored
        as byte blobs so the meta data is stored separately.
      example:
        name: name
        contentId: contentId
        contentLength: 0
        id: id
        contentType: contentType
      properties:
        name:
          description: Name of attachment if given
          title: Name
          type: string
        contentType:
          description: Content type of attachment such as `image/png`
          title: Content type
          type: string
        contentLength:
          description: Size of attachment in bytes
          format: int64
          title: Content length
          type: integer
        id:
          description: ID of attachment. Can be used to with attachment controller
            endpoints to download attachment or with sending methods to attach to
            an email.
          title: ID
          type: string
        contentId:
          description: CID of attachment
          nullable: true
          title: Content ID
          type: string
      required:
      - contentLength
      - contentType
      - id
      - name
      title: Attachment meta data
      type: object
    WebhookNewEmailPayload:
      description: NEW_EMAIL webhook payload. Sent to your webhook url endpoint via
        HTTP POST when an email is received by the inbox that your webhook is attached
        to. Use the email ID to fetch the full email body or attachments.
      example:
        cc:
        - cc
        - cc
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        bcc:
        - bcc
        - bcc
        subject: subject
        messageId: messageId
        emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        createdAt: 2000-01-23T04:56:07.000+00:00
        eventName: EMAIL_RECEIVED
        webhookName: webhookName
        attachmentMetaDatas:
        - name: name
          contentId: contentId
          contentLength: 0
          id: id
          contentType: contentType
        - name: name
          contentId: contentId
          contentLength: 0
          id: id
          contentType: contentType
        from: from
        to:
        - to
        - to
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        messageId:
          description: Idempotent message ID. Store this ID locally or in a database
            to prevent message duplication.
          type: string
        webhookId:
          description: ID of webhook entity being triggered
          format: uuid
          type: string
        eventName:
          description: Name of the event type webhook is being triggered for.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        webhookName:
          description: Name of the webhook being triggered
          nullable: true
          type: string
        inboxId:
          description: Id of the inbox
          format: uuid
          type: string
        domainId:
          description: Id of the domain that received an email
          format: uuid
          nullable: true
          type: string
        emailId:
          description: ID of the email that was received. Use this ID for fetching
            the email with the `EmailController`.
          format: uuid
          type: string
        createdAt:
          description: Date time of event creation
          format: date-time
          type: string
        to:
          description: List of `To` recipient email addresses that the email was addressed
            to. See recipients object for names.
          items:
            description: List of `To` recipient email addresses that the email was
              addressed to. See recipients object for names.
            type: string
          type: array
        from:
          description: Who the email was sent from. An email address - see fromName
            for the sender name.
          type: string
        cc:
          description: List of `CC` recipients email addresses that the email was
            addressed to. See recipients object for names.
          items:
            description: List of `CC` recipients email addresses that the email was
              addressed to. See recipients object for names.
            type: string
          type: array
        bcc:
          description: List of `BCC` recipients email addresses that the email was
            addressed to. See recipients object for names.
          items:
            description: List of `BCC` recipients email addresses that the email was
              addressed to. See recipients object for names.
            type: string
          type: array
        subject:
          description: The subject line of the email message as specified by SMTP
            subject header
          nullable: true
          type: string
        attachmentMetaDatas:
          description: List of attachment meta data objects if attachments present
          items:
            $ref: '#/components/schemas/AttachmentMetaData'
          type: array
      required:
      - attachmentMetaDatas
      - bcc
      - cc
      - createdAt
      - emailId
      - eventName
      - from
      - inboxId
      - messageId
      - to
      - webhookId
      type: object
    WebhookNewContactPayload:
      description: NEW_CONTACT webhook payload. Sent to your webhook url endpoint
        via HTTP POST when an email is received by the inbox that your webhook is
        attached to that contains a recipient that has not been saved as a contact.
      example:
        lastName: lastName
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        contactId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        messageId: messageId
        primaryEmailAddress: primaryEmailAddress
        tags:
        - tags
        - tags
        firstName: firstName
        metaData: "{}"
        optOut: true
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddresses:
        - emailAddresses
        - emailAddresses
        webhookName: webhookName
        eventName: EMAIL_RECEIVED
        company: company
      properties:
        messageId:
          description: Idempotent message ID. Store this ID locally or in a database
            to prevent message duplication.
          type: string
        webhookId:
          description: ID of webhook entity being triggered
          format: uuid
          type: string
        webhookName:
          description: Name of the webhook being triggered
          nullable: true
          type: string
        eventName:
          description: Name of the event type webhook is being triggered for.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        contactId:
          description: Contact ID
          format: uuid
          type: string
        groupId:
          description: Contact group ID
          format: uuid
          nullable: true
          type: string
        firstName:
          description: Contact first name
          nullable: true
          type: string
        lastName:
          description: Contact last name
          nullable: true
          type: string
        company:
          description: Contact company name
          nullable: true
          type: string
        primaryEmailAddress:
          description: Primary email address for contact
          nullable: true
          type: string
        emailAddresses:
          description: Email addresses for contact
          items:
            description: Email addresses for contact
            type: string
          type: array
        tags:
          description: Tags for contact
          items:
            description: Tags for contact
            type: string
          type: array
        metaData:
          nullable: true
          type: object
        optOut:
          description: Has contact opted out of emails
          type: boolean
        createdAt:
          description: Date time of event creation
          format: date-time
          type: string
      required:
      - contactId
      - createdAt
      - emailAddresses
      - eventName
      - messageId
      - optOut
      - tags
      - webhookId
      type: object
    WebhookNewAttachmentPayload:
      description: NEW_ATTACHMENT webhook payload. Sent to your webhook url endpoint
        via HTTP POST when an email is received by the inbox that your webhook is
        attached to that contains an attachment. You can use the attachmentId to download
        the attachment.
      example:
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        messageId: messageId
        webhookName: webhookName
        eventName: EMAIL_RECEIVED
        contentLength: 0
        attachmentId: attachmentId
        contentType: contentType
      properties:
        messageId:
          description: Idempotent message ID. Store this ID locally or in a database
            to prevent message duplication.
          type: string
        webhookId:
          description: ID of webhook entity being triggered
          format: uuid
          type: string
        webhookName:
          description: Name of the webhook being triggered
          nullable: true
          type: string
        eventName:
          description: Name of the event type webhook is being triggered for.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        attachmentId:
          description: ID of attachment. Use the `AttachmentController` to
          type: string
        name:
          description: Filename of the attachment if present
          type: string
        contentType:
          description: Content type of attachment such as 'image/png' or 'application/pdf
          type: string
        contentLength:
          description: Size of attachment in bytes
          format: int64
          type: integer
      required:
      - attachmentId
      - contentLength
      - contentType
      - eventName
      - messageId
      - name
      - webhookId
      type: object
    WebhookEmailReadPayload:
      description: EMAIL_READ webhook payload. Sent to your webhook url endpoint via
        HTTP POST when an email is read. This happens when an email is requested in
        full from the API or a user views the email in the dashboard.
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        messageId: messageId
        eventName: EMAIL_RECEIVED
        webhookName: webhookName
        emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        emailIsRead: true
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        messageId:
          description: Idempotent message ID. Store this ID locally or in a database
            to prevent message duplication.
          type: string
        webhookId:
          description: ID of webhook entity being triggered
          format: uuid
          type: string
        eventName:
          description: Name of the event type webhook is being triggered for.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        webhookName:
          description: Name of the webhook being triggered
          nullable: true
          type: string
        emailId:
          description: ID of the email that was received. Use this ID for fetching
            the email with the `EmailController`.
          format: uuid
          type: string
        inboxId:
          description: Id of the inbox
          format: uuid
          type: string
        emailIsRead:
          description: Is the email read
          type: boolean
        createdAt:
          description: Date time of event creation
          format: date-time
          type: string
      required:
      - createdAt
      - emailId
      - emailIsRead
      - eventName
      - inboxId
      - messageId
      - webhookId
      type: object
    WebhookEmailOpenedPayload:
      description: EMAIL_OPENED webhook payload. Sent to your webhook url endpoint
        via HTTP POST when an email containing a tracking pixel is opened and the
        pixel image is loaded by a reader.
      example:
        pixelId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        createdAt: 2000-01-23T04:56:07.000+00:00
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        recipient: recipient
        messageId: messageId
        eventName: EMAIL_RECEIVED
        webhookName: webhookName
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        messageId:
          description: Idempotent message ID. Store this ID locally or in a database
            to prevent message duplication.
          type: string
        webhookId:
          description: ID of webhook entity being triggered
          format: uuid
          type: string
        eventName:
          description: Name of the event type webhook is being triggered for.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        webhookName:
          description: Name of the webhook being triggered
          nullable: true
          type: string
        inboxId:
          description: Id of the inbox
          format: uuid
          type: string
        pixelId:
          description: ID of the tracking pixel
          format: uuid
          type: string
        sentEmailId:
          description: ID of sent email
          format: uuid
          type: string
        recipient:
          description: Email address for the recipient of the tracking pixel
          type: string
        createdAt:
          description: Date time of event creation
          format: date-time
          type: string
      required:
      - createdAt
      - eventName
      - inboxId
      - messageId
      - pixelId
      - recipient
      - sentEmailId
      - webhookId
      type: object
    WebhookBounceRecipientPayload:
      description: BOUNCE_RECIPIENT webhook payload. Sent to your webhook url endpoint
        via HTTP POST when an email caused a bounce to occur for a recipient. Save
        the recipient to a ban list of your server and avoid email them again.
      example:
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        recipient: recipient
        messageId: messageId
        eventName: EMAIL_RECEIVED
        webhookName: webhookName
      properties:
        messageId:
          description: Idempotent message ID. Store this ID locally or in a database
            to prevent message duplication.
          type: string
        webhookId:
          description: ID of webhook entity being triggered
          format: uuid
          type: string
        eventName:
          description: Name of the event type webhook is being triggered for.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        webhookName:
          description: Name of the webhook being triggered
          nullable: true
          type: string
        recipient:
          description: Email address that caused a bounce. Make note of the address
            and try not to message it again to preserve your reputation.
          type: string
      required:
      - eventName
      - messageId
      - recipient
      - webhookId
      type: object
    WebhookBouncePayload:
      description: BOUNCE webhook payload. Sent to your webhook url endpoint via HTTP
        POST when an email bounced or was rejected by a recipient. Save the recipients
        to a ban list on your server and avoid emailing them again. It is recommended
        you also listen to the BOUNCE_RECIPIENT payload.
      example:
        bounceRecipients:
        - bounceRecipients
        - bounceRecipients
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sender: sender
        sentToRecipients:
        - sentToRecipients
        - sentToRecipients
        messageId: messageId
        eventName: EMAIL_RECEIVED
        webhookName: webhookName
        bounceId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        messageId:
          description: Idempotent message ID. Store this ID locally or in a database
            to prevent message duplication.
          type: string
        webhookId:
          description: ID of webhook entity being triggered
          format: uuid
          type: string
        eventName:
          description: Name of the event type webhook is being triggered for.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        webhookName:
          description: Name of the webhook being triggered
          nullable: true
          type: string
        bounceId:
          description: ID of the bounce email record. Use the ID with the bounce controller
            to view more information
          format: uuid
          type: string
        sentToRecipients:
          description: Email sent to recipients
          items:
            description: Email sent to recipients
            nullable: true
            type: string
          nullable: true
          type: array
        sender:
          description: Sender causing bounce
          type: string
        bounceRecipients:
          description: Email addresses that resulted in a bounce or email being rejected.
            Please save these recipients and avoid emailing them in the future to
            maintain your reputation.
          items:
            description: Email addresses that resulted in a bounce or email being
              rejected. Please save these recipients and avoid emailing them in the
              future to maintain your reputation.
            nullable: true
            type: string
          nullable: true
          type: array
      required:
      - bounceId
      - eventName
      - messageId
      - sender
      - webhookId
      type: object
    WebhookDeliveryStatusPayload:
      description: DELIVERY_STATUS webhook payload. Sent to your webhook url endpoint
        via HTTP POST when an email delivery status is created. This could be a successful
        delivery or a delivery failure.
      example:
        smtpResponse: smtpResponse
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        subject: subject
        messageId: messageId
        received: 2000-01-23T04:56:07.000+00:00
        reportingMta: reportingMta
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        remoteMtaIp: remoteMtaIp
        processingTimeMillis: 6
        sentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        recipients:
        - recipients
        - recipients
        eventName: EMAIL_RECEIVED
        webhookName: webhookName
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        smtpStatusCode: 0
      properties:
        messageId:
          description: Idempotent message ID. Store this ID locally or in a database
            to prevent message duplication.
          type: string
        webhookId:
          description: ID of webhook entity being triggered
          format: uuid
          type: string
        eventName:
          description: Name of the event type webhook is being triggered for.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        webhookName:
          description: Name of the webhook being triggered
          nullable: true
          type: string
        id:
          description: ID of delivery status
          format: uuid
          type: string
        userId:
          description: User ID of event
          format: uuid
          type: string
        sentId:
          description: ID of sent email
          format: uuid
          nullable: true
          type: string
        remoteMtaIp:
          description: IP address of the remote Mail Transfer Agent
          nullable: true
          type: string
        inboxId:
          description: Id of the inbox
          format: uuid
          nullable: true
          type: string
        reportingMta:
          description: Mail Transfer Agent reporting delivery status
          nullable: true
          type: string
        recipients:
          description: Recipients for delivery
          items:
            description: Recipients for delivery
            nullable: true
            type: string
          nullable: true
          type: array
        smtpResponse:
          description: SMTP server response message
          nullable: true
          type: string
        smtpStatusCode:
          description: SMTP server status
          format: int32
          nullable: true
          type: integer
        processingTimeMillis:
          description: Time in milliseconds for delivery processing
          format: int64
          nullable: true
          type: integer
        received:
          description: Time event was received
          format: date-time
          nullable: true
          type: string
        subject:
          description: Email subject
          nullable: true
          type: string
      required:
      - eventName
      - id
      - messageId
      - userId
      - webhookId
      type: object
    UnseenErrorCountDto:
      description: Number of unseen errors
      example:
        count: 0
      properties:
        count:
          format: int64
          type: integer
      required:
      - count
      type: object
    PageWebhookProjection:
      description: Paginated webhook entity. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - aiTransformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          phoneNumberId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          url: url
          createdAt: 2000-01-23T04:56:07.000+00:00
          password: password
          healthStatus: HEALTHY
          name: name
          eventName: EMAIL_RECEIVED
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          username: username
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - aiTransformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          phoneNumberId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          url: url
          createdAt: 2000-01-23T04:56:07.000+00:00
          password: password
          healthStatus: HEALTHY
          name: name
          eventName: EMAIL_RECEIVED
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          username: username
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/WebhookProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    WebhookProjection:
      description: Representation of a webhook
      example:
        aiTransformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        phoneNumberId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        url: url
        createdAt: 2000-01-23T04:56:07.000+00:00
        password: password
        healthStatus: HEALTHY
        name: name
        eventName: EMAIL_RECEIVED
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        username: username
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        url:
          type: string
        password:
          type: string
        username:
          type: string
        inboxId:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        eventName:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          - EMAIL_READ
          - DELIVERY_STATUS
          - BOUNCE
          - BOUNCE_RECIPIENT
          - NEW_SMS
          - NEW_GUEST_USER
          type: string
        updatedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        aiTransformId:
          format: uuid
          type: string
        healthStatus:
          enum:
          - HEALTHY
          - UNHEALTHY
          type: string
        phoneNumberId:
          format: uuid
          type: string
        name:
          type: string
        id:
          format: uuid
          type: string
      required:
      - createdAt
      - id
      - updatedAt
      - url
      - userId
      type: object
    PageWebhookEndpointProjection:
      description: Paginated webhook endpoint with latest health status. Page index
        starts at zero. Projection results may omit larger entity fields. For fetching
        a full entity use the projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - health: HEALTHY
          url: url
        - health: HEALTHY
          url: url
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/WebhookEndpointProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    WebhookEndpointProjection:
      example:
        health: HEALTHY
        url: url
      properties:
        url:
          type: string
        health:
          enum:
          - HEALTHY
          - UNHEALTHY
          type: string
      required:
      - health
      - url
      type: object
    UserInfoDto:
      example:
        accountState: FROZEN
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        subscriptionType: PRO_MONTHLY
        accountType: SOLO
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        emailAddress:
          type: string
        accountState:
          enum:
          - FROZEN
          - ACTIVE
          type: string
        subscriptionType:
          enum:
          - PRO_MONTHLY
          - STARTER
          - PRO
          - TEAM
          - ENTERPRISE
          type: string
        accountType:
          enum:
          - SOLO
          - CHILD_SOLO
          - CHILD_TEAM
          - CHILD_ADMIN
          type: string
        createdAt:
          format: date-time
          type: string
      required:
      - accountState
      - accountType
      - createdAt
      - emailAddress
      - id
      type: object
    EntityFavouriteItemProjection:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        entityType: INBOX
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        createdAt:
          format: date-time
          type: string
        entityType:
          enum:
          - INBOX
          - EMAIL
          - ATTACHMENT
          - PHONE
          - SMS
          type: string
        name:
          type: string
        id:
          format: uuid
          type: string
        description:
          type: string
      required:
      - createdAt
      - entityType
      - id
      - name
      type: object
    PageEntityFavouriteItems:
      description: "Paginated favourite items like inboxes, phones, sms, emails. Page\
        \ index starts at zero. Projection results may omit larger entity fields.\
        \ For fetching a full entity use the projection ID with individual method\
        \ calls."
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          entityType: INBOX
          name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          entityType: INBOX
          name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/EntityFavouriteItemProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    EntityEventItemProjection:
      example:
        severity: INFO
        phoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        eventType: WEBHOOK_EVENT
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        eventType:
          enum:
          - WEBHOOK_EVENT
          - INBOX_FORWARDER_EVENT
          - INBOX_REPLIER_EVENT
          - INBOX_RULESET_EVENT
          - ALIAS_EVENT
          type: string
        inboxId:
          format: uuid
          type: string
        phoneId:
          format: uuid
          type: string
        id:
          format: uuid
          type: string
        severity:
          enum:
          - INFO
          - SUCCESS
          - WARNING
          - DANGER
          type: string
      required:
      - eventType
      - id
      - severity
      type: object
    PageEntityEventItems:
      description: Paginated event items like webhook events and forwarding. Page
        index starts at zero. Projection results may omit larger entity fields. For
        fetching a full entity use the projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - severity: INFO
          phoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          eventType: WEBHOOK_EVENT
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - severity: INFO
          phoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          eventType: WEBHOOK_EVENT
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/EntityEventItemProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    EntityAutomationItemProjection:
      example:
        phoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        action: action
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        automationType: INBOX_FORWARDER
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        inboxId:
          format: uuid
          type: string
        phoneId:
          format: uuid
          type: string
        action:
          type: string
        automationType:
          enum:
          - INBOX_FORWARDER
          - INBOX_REPLIER
          - INBOX_RULESET
          type: string
        name:
          type: string
        id:
          format: uuid
          type: string
      required:
      - automationType
      - id
      type: object
    PageEntityAutomationItems:
      description: "Paginated automation items like auto-repliers, forwarders, and\
        \ rulesets. Page index starts at zero. Projection results may omit larger\
        \ entity fields. For fetching a full entity use the projection ID with individual\
        \ method calls."
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - phoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          action: action
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          automationType: INBOX_FORWARDER
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - phoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          action: action
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          automationType: INBOX_FORWARDER
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/EntityAutomationItemProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    PageTrackingPixelProjection:
      description: Paginated TrackingPixel results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          seenAt: 2000-01-23T04:56:07.000+00:00
          sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          recipient: recipient
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          seen: true
        - createdAt: 2000-01-23T04:56:07.000+00:00
          seenAt: 2000-01-23T04:56:07.000+00:00
          sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          recipient: recipient
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          seen: true
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/TrackingPixelProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    TrackingPixelProjection:
      description: Tracking pixel data
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        seenAt: 2000-01-23T04:56:07.000+00:00
        sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        recipient: recipient
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        seen: true
      properties:
        inboxId:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        sentEmailId:
          format: uuid
          type: string
        createdAt:
          format: date-time
          type: string
        recipient:
          type: string
        seen:
          type: boolean
        seenAt:
          format: date-time
          type: string
        name:
          type: string
        id:
          format: uuid
          type: string
      required:
      - createdAt
      - id
      - seen
      - userId
      type: object
    FakeEmailPreview:
      example:
        preview: preview
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        sender:
          emailAddress: emailAddress
          rawValue: rawValue
          name: name
        recipients:
          cc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          bcc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          to:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
        subject: subject
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        hasAttachments: true
        seen: true
      properties:
        id:
          format: uuid
          type: string
        emailAddress:
          type: string
        sender:
          $ref: '#/components/schemas/Sender'
        recipients:
          $ref: '#/components/schemas/EmailRecipients'
        hasAttachments:
          type: boolean
        subject:
          type: string
        preview:
          type: string
        createdAt:
          format: date-time
          type: string
        seen:
          type: boolean
      required:
      - createdAt
      - emailAddress
      - hasAttachments
      - id
      - seen
      type: object
    FakeEmailDto:
      example:
        preview: preview
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        sender:
          emailAddress: emailAddress
          rawValue: rawValue
          name: name
        recipients:
          cc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          bcc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          to:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
        subject: subject
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        bodyUrl: bodyUrl
        body: body
        contentType: contentType
        seen: true
        attachmentNames:
        - attachmentNames
        - attachmentNames
      properties:
        id:
          format: uuid
          type: string
        emailAddress:
          type: string
        sender:
          $ref: '#/components/schemas/Sender'
        recipients:
          $ref: '#/components/schemas/EmailRecipients'
        attachmentNames:
          items:
            type: string
          type: array
        subject:
          type: string
        preview:
          type: string
        body:
          type: string
        seen:
          type: boolean
        createdAt:
          format: date-time
          type: string
        contentType:
          type: string
        bodyUrl:
          type: string
      required:
      - attachmentNames
      - body
      - bodyUrl
      - contentType
      - createdAt
      - emailAddress
      - id
      - seen
      type: object
    FakeEmailResult:
      example:
        email:
          preview: preview
          createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          sender:
            emailAddress: emailAddress
            rawValue: rawValue
            name: name
          recipients:
            cc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            bcc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            to:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
          subject: subject
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          bodyUrl: bodyUrl
          body: body
          contentType: contentType
          seen: true
          attachmentNames:
          - attachmentNames
          - attachmentNames
      properties:
        email:
          $ref: '#/components/schemas/FakeEmailDto'
      type: object
    TemplateProjection:
      description: Email template data
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        variables:
        - variables
        - variables
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        updatedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        variables:
          items:
            type: string
          type: array
        name:
          type: string
        id:
          format: uuid
          type: string
      required:
      - createdAt
      - id
      - name
      - updatedAt
      - variables
      type: object
    TemplatePreview:
      example:
        preview: preview
      properties:
        preview:
          type: string
      required:
      - preview
      type: object
    PageTemplateProjection:
      description: Paginated email template results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          variables:
          - variables
          - variables
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          variables:
          - variables
          - variables
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/TemplateProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    PageSmsProjection:
      description: Paginated SMS messages. Page index starts at zero. Projection results
        may omit larger entity fields. For fetching a full entity use the projection
        ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - fromNumber: fromNumber
          createdAt: 2000-01-23T04:56:07.000+00:00
          phoneNumber: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          read: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          body: body
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - fromNumber: fromNumber
          createdAt: 2000-01-23T04:56:07.000+00:00
          phoneNumber: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          read: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          body: body
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/SmsProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    SmsProjection:
      description: SMS projection
      example:
        fromNumber: fromNumber
        createdAt: 2000-01-23T04:56:07.000+00:00
        phoneNumber: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        read: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        body: body
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        body:
          type: string
        userId:
          format: uuid
          type: string
        createdAt:
          format: date-time
          type: string
        phoneNumber:
          format: uuid
          type: string
        fromNumber:
          type: string
        read:
          type: boolean
        id:
          format: uuid
          type: string
      required:
      - body
      - createdAt
      - fromNumber
      - id
      - phoneNumber
      - read
      - userId
      type: object
    ReplyForSms:
      example:
        reply:
          fromNumber: fromNumber
          createdAt: 2000-01-23T04:56:07.000+00:00
          phoneNumber: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          replyToId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          body: body
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          toNumber: toNumber
          sid: sid
          replyToSid: replyToSid
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        reply:
          $ref: '#/components/schemas/SentSmsDto'
      type: object
    UnreadCount:
      description: Number of unread entities
      example:
        count: 0
      properties:
        count:
          format: int64
          type: integer
      required:
      - count
      type: object
    PageSentSmsProjection:
      description: Paginated sent SMS messages. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - fromNumber: fromNumber
          createdAt: 2000-01-23T04:56:07.000+00:00
          phoneNumber: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          replyToId: replyToId
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          body: body
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          toNumber: toNumber
        - fromNumber: fromNumber
          createdAt: 2000-01-23T04:56:07.000+00:00
          phoneNumber: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          replyToId: replyToId
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          body: body
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          toNumber: toNumber
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/SentSmsProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    SentSmsProjection:
      description: Sent SMS projection
      example:
        fromNumber: fromNumber
        createdAt: 2000-01-23T04:56:07.000+00:00
        phoneNumber: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        replyToId: replyToId
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        body: body
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        toNumber: toNumber
      properties:
        body:
          type: string
        userId:
          format: uuid
          type: string
        createdAt:
          format: date-time
          type: string
        phoneNumber:
          format: uuid
          type: string
        fromNumber:
          type: string
        toNumber:
          type: string
        replyToId:
          type: string
        id:
          format: uuid
          type: string
      required:
      - body
      - createdAt
      - fromNumber
      - id
      - phoneNumber
      - toNumber
      - userId
      type: object
    PageSentEmailProjection:
      description: Paginated sent email results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full sent email entity
        use the projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - cc:
          - cc
          - cc
          attachments:
          - attachments
          - attachments
          bcc:
          - bcc
          - bcc
          subject: subject
          inReplyTo: inReplyTo
          messageId: messageId
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          bodyMD5Hash: bodyMD5Hash
          virtualSend: true
          threadId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          createdAt: 2000-01-23T04:56:07.000+00:00
          sender:
            emailAddress: emailAddress
            rawValue: rawValue
            name: name
          recipients:
            cc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            bcc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            to:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
          textExcerpt: textExcerpt
          from: from
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          to:
          - to
          - to
          bodyExcerpt: bodyExcerpt
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - cc:
          - cc
          - cc
          attachments:
          - attachments
          - attachments
          bcc:
          - bcc
          - bcc
          subject: subject
          inReplyTo: inReplyTo
          messageId: messageId
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          bodyMD5Hash: bodyMD5Hash
          virtualSend: true
          threadId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          createdAt: 2000-01-23T04:56:07.000+00:00
          sender:
            emailAddress: emailAddress
            rawValue: rawValue
            name: name
          recipients:
            cc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            bcc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            to:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
          textExcerpt: textExcerpt
          from: from
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          to:
          - to
          - to
          bodyExcerpt: bodyExcerpt
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/SentEmailProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    SentEmailProjection:
      example:
        cc:
        - cc
        - cc
        attachments:
        - attachments
        - attachments
        bcc:
        - bcc
        - bcc
        subject: subject
        inReplyTo: inReplyTo
        messageId: messageId
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        bodyMD5Hash: bodyMD5Hash
        virtualSend: true
        threadId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        createdAt: 2000-01-23T04:56:07.000+00:00
        sender:
          emailAddress: emailAddress
          rawValue: rawValue
          name: name
        recipients:
          cc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          bcc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          to:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
        textExcerpt: textExcerpt
        from: from
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        to:
        - to
        - to
        bodyExcerpt: bodyExcerpt
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        from:
          nullable: true
          type: string
        sender:
          $ref: '#/components/schemas/Sender'
        recipients:
          $ref: '#/components/schemas/EmailRecipients'
        subject:
          nullable: true
          type: string
        inboxId:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        attachments:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        createdAt:
          format: date-time
          type: string
        to:
          items:
            type: string
          type: array
        cc:
          items:
            type: string
          type: array
        bcc:
          items:
            type: string
          type: array
        messageId:
          nullable: true
          type: string
        inReplyTo:
          nullable: true
          type: string
        bodyExcerpt:
          nullable: true
          type: string
        textExcerpt:
          nullable: true
          type: string
        bodyMD5Hash:
          nullable: true
          type: string
        virtualSend:
          type: boolean
        threadId:
          format: uuid
          nullable: true
          type: string
      required:
      - bcc
      - cc
      - createdAt
      - id
      - inboxId
      - to
      - userId
      - virtualSend
      type: object
    DeliveryStatusDto:
      example:
        smtpResponse: smtpResponse
        subject: subject
        received: 2000-01-23T04:56:07.000+00:00
        reportingMta: reportingMta
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        remoteMtaIp: remoteMtaIp
        createdAt: 2000-01-23T04:56:07.000+00:00
        processingTimeMillis: 6
        sentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        recipients:
        - recipients
        - recipients
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        smtpStatusCode: 0
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        sentId:
          format: uuid
          type: string
        remoteMtaIp:
          type: string
        inboxId:
          format: uuid
          type: string
        reportingMta:
          type: string
        recipients:
          items:
            type: string
          type: array
        smtpResponse:
          type: string
        smtpStatusCode:
          format: int32
          type: integer
        processingTimeMillis:
          format: int64
          type: integer
        received:
          format: date-time
          type: string
        subject:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - id
      - updatedAt
      - userId
      type: object
    PageDeliveryStatus:
      description: Paginated delivery status results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 7
        last: true
        numberOfElements: 5
        size: 2
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - smtpResponse: smtpResponse
          subject: subject
          received: 2000-01-23T04:56:07.000+00:00
          reportingMta: reportingMta
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          remoteMtaIp: remoteMtaIp
          createdAt: 2000-01-23T04:56:07.000+00:00
          processingTimeMillis: 6
          sentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          recipients:
          - recipients
          - recipients
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          smtpStatusCode: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - smtpResponse: smtpResponse
          subject: subject
          received: 2000-01-23T04:56:07.000+00:00
          reportingMta: reportingMta
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          remoteMtaIp: remoteMtaIp
          createdAt: 2000-01-23T04:56:07.000+00:00
          processingTimeMillis: 6
          sentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          recipients:
          - recipients
          - recipients
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          smtpStatusCode: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 1
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/DeliveryStatusDto'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    EmailPreviewUrls:
      description: URLs for email body
      example:
        plainHtmlBodyUrl: plainHtmlBodyUrl
        rawSmtpMessageUrl: rawSmtpMessageUrl
        origin: origin
      properties:
        rawSmtpMessageUrl:
          type: string
        plainHtmlBodyUrl:
          type: string
        origin:
          type: string
      required:
      - origin
      - plainHtmlBodyUrl
      - rawSmtpMessageUrl
      type: object
    RawEmailJson:
      description: Content in raw format
      example:
        content: content
      properties:
        content:
          type: string
      required:
      - content
      type: object
    PageSentEmailWithQueueProjection:
      description: Paginated sent email results for emails sent with queue. Page index
        starts at zero. Projection results may omit larger entity fields. For fetching
        a full sent email entity use the projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          subject: subject
          delivered: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          message: message
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          headerId: headerId
          exceptionName: exceptionName
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          subject: subject
          delivered: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          message: message
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          headerId: headerId
          exceptionName: exceptionName
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/SendWithQueueResult'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    SendWithQueueResult:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        subject: subject
        delivered: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message: message
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        headerId: headerId
        exceptionName: exceptionName
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        subject:
          type: string
        inboxId:
          format: uuid
          type: string
        headerId:
          type: string
        delivered:
          type: boolean
        exceptionName:
          type: string
        message:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - delivered
      - headerId
      - id
      - updatedAt
      - userId
      type: object
    PageInboxRulesetDto:
      description: Paginated inbox ruleset results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 9
        last: true
        numberOfElements: 2
        size: 7
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - handler: EXCEPTION
          createdAt: 2000-01-23T04:56:07.000+00:00
          scope: RECEIVING_EMAILS
          action: BLOCK
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          target: target
        - handler: EXCEPTION
          createdAt: 2000-01-23T04:56:07.000+00:00
          scope: RECEIVING_EMAILS
          action: BLOCK
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          target: target
        first: true
        totalElements: 5
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/InboxRulesetDto'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    PageInboxReplierDto:
      description: Paginated inbox replier results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - charset: charset
          subject: subject
          match: match
          ignoreReplyTo: true
          templateId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          templateVariables:
            key: "{}"
          createdAt: 2000-01-23T04:56:07.000+00:00
          field: RECIPIENTS
          isHTML: true
          name: name
          replyTo: replyTo
          from: from
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - charset: charset
          subject: subject
          match: match
          ignoreReplyTo: true
          templateId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          templateVariables:
            key: "{}"
          createdAt: 2000-01-23T04:56:07.000+00:00
          field: RECIPIENTS
          isHTML: true
          name: name
          replyTo: replyTo
          from: from
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/InboxReplierDto'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    InboxReplierEventProjection:
      description: Inbox replier event
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        sentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        recipients:
        - recipients
        - recipients
        emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message: message
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        replierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        status: SUCCESS
      properties:
        recipients:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        emailId:
          format: uuid
          nullable: true
          type: string
        inboxId:
          format: uuid
          nullable: true
          type: string
        userId:
          format: uuid
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
        sentId:
          format: uuid
          nullable: true
          type: string
        replierId:
          format: uuid
          nullable: true
          type: string
        message:
          nullable: true
          type: string
        id:
          format: uuid
          nullable: true
          type: string
        status:
          enum:
          - SUCCESS
          - FAILURE
          nullable: true
          type: string
      required:
      - createdAt
      type: object
    PageInboxReplierEvents:
      description: Paginated inbox replier events. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          sentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          recipients:
          - recipients
          - recipients
          emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          message: message
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          replierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: SUCCESS
        - createdAt: 2000-01-23T04:56:07.000+00:00
          sentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          recipients:
          - recipients
          - recipients
          emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          message: message
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          replierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: SUCCESS
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/InboxReplierEventProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    PhonePlanDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        phoneCountry: US
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        phoneCountry:
          enum:
          - US
          - GB
          - AU
          - CA
          - EE
          - HK
          - PL
          - CH
          - PT
          - NL
          - IL
          - SE
          type: string
        createdAt:
          format: date-time
          type: string
      required:
      - createdAt
      - id
      - phoneCountry
      - userId
      type: object
    PhonePlanAvailability:
      example:
        items:
        - availabilityStatus: AVAILABLE
          phoneCountry: US
        - availabilityStatus: AVAILABLE
          phoneCountry: US
      properties:
        items:
          items:
            $ref: '#/components/schemas/PhonePlanAvailabilityItem'
          type: array
      required:
      - items
      type: object
    PhonePlanAvailabilityItem:
      example:
        availabilityStatus: AVAILABLE
        phoneCountry: US
      properties:
        phoneCountry:
          enum:
          - US
          - GB
          - AU
          - CA
          - EE
          - HK
          - PL
          - CH
          - PT
          - NL
          - IL
          - SE
          type: string
        availabilityStatus:
          enum:
          - AVAILABLE
          - NON_MATCHING_SUBSCRIPTION_CURRENCY
          - NON_MATCHING_SUBSCRIPTION_TYPE
          - ALREADY_ASSIGNED
          type: string
      required:
      - availabilityStatus
      - phoneCountry
      type: object
    PagePhoneNumberProjection:
      description: Paginated phone numbers. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          phoneNumber: phoneNumber
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          phoneCountry: US
        - createdAt: 2000-01-23T04:56:07.000+00:00
          phoneNumber: phoneNumber
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          phoneCountry: US
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/PhoneNumberProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    PhoneNumberProjection:
      description: Phone number projection
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        phoneNumber: phoneNumber
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        phoneCountry: US
      properties:
        userId:
          format: uuid
          type: string
        createdAt:
          format: date-time
          type: string
        phoneNumber:
          type: string
        phoneCountry:
          enum:
          - US
          - GB
          - AU
          - CA
          - EE
          - HK
          - PL
          - CH
          - PT
          - NL
          - IL
          - SE
          type: string
        name:
          type: string
        id:
          format: uuid
          type: string
      required:
      - createdAt
      - id
      - phoneCountry
      - phoneNumber
      - userId
      type: object
    PagePhoneMessageThreadProjection:
      description: Paginated phone message threads. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - phoneNumber: phoneNumber
          lastBody: lastBody
          otherPhoneNumber: otherPhoneNumber
          lastMessageDirection: OUTBOUND
          phoneNumberId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          lastCreated: 2000-01-23T04:56:07.000+00:00
        - phoneNumber: phoneNumber
          lastBody: lastBody
          otherPhoneNumber: otherPhoneNumber
          lastMessageDirection: OUTBOUND
          phoneNumberId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          lastCreated: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/PhoneMessageThreadProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    PhoneMessageThreadProjection:
      example:
        phoneNumber: phoneNumber
        lastBody: lastBody
        otherPhoneNumber: otherPhoneNumber
        lastMessageDirection: OUTBOUND
        phoneNumberId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        lastCreated: 2000-01-23T04:56:07.000+00:00
      properties:
        phoneNumber:
          type: string
        phoneNumberId:
          format: uuid
          type: string
        otherPhoneNumber:
          type: string
        lastMessageDirection:
          enum:
          - OUTBOUND
          - INBOUND
          type: string
        lastBody:
          type: string
        lastCreated:
          format: date-time
          type: string
      required:
      - lastBody
      - lastCreated
      - lastMessageDirection
      - otherPhoneNumber
      - phoneNumber
      - phoneNumberId
      type: object
    PagePhoneMessageThreadItemProjection:
      description: Paginated phone message thread items. These are messages in a phone
        thread. Page index starts at zero. Projection results may omit larger entity
        fields. For fetching a full entity use the projection ID with individual method
        calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - messageDirection: OUTBOUND
          created: 2000-01-23T04:56:07.000+00:00
          toPhoneNumber: toPhoneNumber
          body: body
          fromPhoneNumber: fromPhoneNumber
          phoneNumberId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - messageDirection: OUTBOUND
          created: 2000-01-23T04:56:07.000+00:00
          toPhoneNumber: toPhoneNumber
          body: body
          fromPhoneNumber: fromPhoneNumber
          phoneNumberId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/PhoneMessageThreadItemProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    PhoneMessageThreadItemProjection:
      example:
        messageDirection: OUTBOUND
        created: 2000-01-23T04:56:07.000+00:00
        toPhoneNumber: toPhoneNumber
        body: body
        fromPhoneNumber: fromPhoneNumber
        phoneNumberId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        body:
          type: string
        phoneNumberId:
          format: uuid
          type: string
        created:
          format: date-time
          type: string
        fromPhoneNumber:
          type: string
        toPhoneNumber:
          type: string
        messageDirection:
          enum:
          - OUTBOUND
          - INBOUND
          type: string
      required:
      - body
      - created
      - fromPhoneNumber
      - messageDirection
      - phoneNumberId
      - toPhoneNumber
      type: object
    EmergencyAddressDto:
      example:
        address1: address1
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        phoneCountry: US
      properties:
        id:
          format: uuid
          type: string
        address1:
          type: string
        phoneCountry:
          enum:
          - US
          - GB
          - AU
          - CA
          - EE
          - HK
          - PL
          - CH
          - PT
          - NL
          - IL
          - SE
          type: string
      required:
      - address1
      - id
      - phoneCountry
      type: object
    MissedEmailProjection:
      description: Missed email data
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        subject: subject
        from: from
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        userId:
          format: uuid
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
        subject:
          nullable: true
          type: string
        id:
          format: uuid
          type: string
        from:
          nullable: true
          type: string
      required:
      - createdAt
      - id
      type: object
    PageMissedEmailProjection:
      description: Paginated MissedEmail results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          subject: subject
          from: from
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          subject: subject
          from: from
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/MissedEmailProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    MissedEmailDto:
      description: Missed email
      example:
        cc:
        - cc
        - cc
        rawKey: rawKey
        rawBucket: rawBucket
        bcc:
        - bcc
        - bcc
        inboxIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        subject: subject
        canRestore: true
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        rawUrl: rawUrl
        createdAt: 2000-01-23T04:56:07.000+00:00
        attachmentCount: 0
        from: from
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        bodyExcerpt: bodyExcerpt
        to:
        - to
        - to
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          nullable: true
          type: string
        subject:
          nullable: true
          type: string
        bodyExcerpt:
          nullable: true
          type: string
        attachmentCount:
          format: int32
          type: integer
        from:
          nullable: true
          type: string
        rawUrl:
          nullable: true
          type: string
        rawKey:
          nullable: true
          type: string
        rawBucket:
          nullable: true
          type: string
        canRestore:
          nullable: true
          type: boolean
        to:
          items:
            type: string
          type: array
        cc:
          items:
            type: string
          type: array
        bcc:
          items:
            type: string
          type: array
        inboxIds:
          items:
            format: uuid
            type: string
          type: array
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - attachmentCount
      - bcc
      - cc
      - createdAt
      - id
      - inboxIds
      - to
      - updatedAt
      type: object
    PageUnknownMissedEmailProjection:
      description: Paginated unknown MissedEmail results. Unknown missed emails are
        emails that were sent to MailSlurp /Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          subject: subject
          from: from
          to:
          - to
          - to
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          subject: subject
          from: from
          to:
          - to
          - to
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/UnknownMissedEmailProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    UnknownMissedEmailProjection:
      description: Unknown missed email projection
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        subject: subject
        from: from
        to:
        - to
        - to
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        createdAt:
          format: date-time
          type: string
        to:
          items:
            type: string
          type: array
        subject:
          type: string
        id:
          format: uuid
          type: string
        from:
          type: string
      required:
      - createdAt
      - id
      type: object
    PageScheduledJobs:
      description: Paginated scheduled jobs results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - jobId: jobId
          createdAt: 2000-01-23T04:56:07.000+00:00
          groupId: groupId
          triggerId: triggerId
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sendAtTimestamp: 2000-01-23T04:56:07.000+00:00
          status: SUBMITTED
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - jobId: jobId
          createdAt: 2000-01-23T04:56:07.000+00:00
          groupId: groupId
          triggerId: triggerId
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sendAtTimestamp: 2000-01-23T04:56:07.000+00:00
          status: SUBMITTED
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/ScheduledJob'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    ScheduledJob:
      example:
        jobId: jobId
        createdAt: 2000-01-23T04:56:07.000+00:00
        groupId: groupId
        triggerId: triggerId
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sendAtTimestamp: 2000-01-23T04:56:07.000+00:00
        status: SUBMITTED
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        jobId:
          type: string
        groupId:
          type: string
        triggerId:
          type: string
        status:
          enum:
          - SUBMITTED
          - COMPLETED
          - ABORTED
          - FAILED
          - CANCELLED
          type: string
        sendAtTimestamp:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - groupId
      - id
      - inboxId
      - jobId
      - sendAtTimestamp
      - status
      - triggerId
      - updatedAt
      - userId
      type: object
    PagePlusAddressProjection:
      description: Paginated inbox plus addresses. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          plusAddress: plusAddress
          fullAddress: fullAddress
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          plusAddress: plusAddress
          fullAddress: fullAddress
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/PlusAddressProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    PlusAddressProjection:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        plusAddress: plusAddress
        fullAddress: fullAddress
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        inboxId:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        updatedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        plusAddress:
          type: string
        fullAddress:
          type: string
        id:
          format: uuid
          type: string
      required:
      - createdAt
      - fullAddress
      - id
      - inboxId
      - plusAddress
      - updatedAt
      - userId
      type: object
    PlusAddressDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        plusAddress: plusAddress
        fullAddress: fullAddress
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        plusAddress:
          type: string
        fullAddress:
          type: string
        userId:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - fullAddress
      - id
      - inboxId
      - plusAddress
      - updatedAt
      - userId
      type: object
    PageEmailPreview:
      description: Paginated email preview results. EmailProjections and EmailPreviews
        are essentially the same but have legacy naming issues. Page index starts
        at zero. Projection results may omit larger entity fields. For fetching a
        full entity use the projection ID with individual method calls. For emails
        there are several methods for fetching message bodies and attachments.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - cc:
          - cc
          - cc
          bcc:
          - bcc
          - bcc
          read: true
          attachments:
          - attachments
          - attachments
          subject: subject
          inReplyTo: inReplyTo
          bodyPartContentTypes:
          - bodyPartContentTypes
          - bodyPartContentTypes
          messageId: messageId
          favourite: true
          domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sizeBytes: 0
          threadId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          createdAt: 2000-01-23T04:56:07.000+00:00
          plusAddress: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sender:
            emailAddress: emailAddress
            rawValue: rawValue
            name: name
          recipients:
            cc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            bcc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            to:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
          from: from
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          to:
          - to
          - to
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - cc:
          - cc
          - cc
          bcc:
          - bcc
          - bcc
          read: true
          attachments:
          - attachments
          - attachments
          subject: subject
          inReplyTo: inReplyTo
          bodyPartContentTypes:
          - bodyPartContentTypes
          - bodyPartContentTypes
          messageId: messageId
          favourite: true
          domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sizeBytes: 0
          threadId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          createdAt: 2000-01-23T04:56:07.000+00:00
          plusAddress: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sender:
            emailAddress: emailAddress
            rawValue: rawValue
            name: name
          recipients:
            cc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            bcc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            to:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
          from: from
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          to:
          - to
          - to
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/EmailPreview'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    PageInboxTags:
      description: Paginated inbox tags. Page index starts at zero. Projection results
        may omit larger entity fields. For fetching a full entity use the projection
        ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - content
        - content
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            type: string
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    SmtpAccessDetails:
      description: Access details for inbox using SMTP
      example:
        secureSmtpUsername: secureSmtpUsername
        smtpUsername: smtpUsername
        smtpPassword: smtpPassword
        mailFromDomain: mailFromDomain
        secureSmtpServerPort: 0
        smtpServerPort: 6
        secureSmtpServerHost: secureSmtpServerHost
        smtpServerHost: smtpServerHost
        secureSmtpPassword: secureSmtpPassword
      properties:
        secureSmtpServerHost:
          description: Secure TLS SMTP server host domain
          type: string
        secureSmtpServerPort:
          description: Secure TLS SMTP server host port
          format: int32
          type: integer
        secureSmtpUsername:
          description: Secure TLS SMTP username for login
          type: string
        secureSmtpPassword:
          description: Secure TLS SMTP password for login
          type: string
        smtpServerHost:
          description: SMTP server host domain
          type: string
        smtpServerPort:
          description: SMTP server host port
          format: int32
          type: integer
        smtpUsername:
          description: SMTP username for login
          type: string
        smtpPassword:
          description: SMTP password for login
          type: string
        mailFromDomain:
          description: Mail from domain or SMTP HELO value
          nullable: true
          type: string
      required:
      - secureSmtpPassword
      - secureSmtpServerHost
      - secureSmtpServerPort
      - secureSmtpUsername
      - smtpPassword
      - smtpServerHost
      - smtpServerPort
      - smtpUsername
      type: object
    OrganizationInboxProjection:
      description: Organization team inbox
      example:
        inboxType: HTTP_INBOX
        accountRegion: US_WEST_2
        description: description
        readOnly: true
        favourite: true
        teamAccess: true
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        expiresAt: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        virtualInbox: true
        functionsAs: ALIAS
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: ID of the inbox. The ID is a UUID-V4 format string. Use the
            inboxId for calls to Inbox and Email Controller endpoints. See the emailAddress
            property for the email address or the inbox. To get emails in an inbox
            use the WaitFor and Inbox Controller methods `waitForLatestEmail` and
            `getEmails` methods respectively. Inboxes can be used with aliases to
            forward emails automatically.
          format: uuid
          type: string
        domainId:
          description: ID of custom domain used by the inbox if any
          format: uuid
          nullable: true
          type: string
        createdAt:
          description: When the inbox was created. Time stamps are in ISO DateTime
            Format `yyyy-MM-dd'T'HH:mm:ss.SSSXXX` e.g. `2000-10-31T01:30:00.000-05:00`.
          format: date-time
          type: string
        name:
          description: Name of the inbox and used as the sender name when sending
            emails .Displayed in the dashboard for easier search
          nullable: true
          type: string
        emailAddress:
          description: The inbox's email address. Inbox projections and previews may
            not include the email address. To view the email address fetch the inbox
            entity directly. Send an email to this address and the inbox will receive
            and store it for you. Note the email address in MailSlurp match characters
            exactly and are case sensitive so `+123` additions are considered different
            addresses. To retrieve the email use the Inbox and Email Controller endpoints
            with the inbox ID.
          nullable: true
          type: string
        favourite:
          description: Is the inbox a favorite inbox. Make an inbox a favorite is
            typically done in the dashboard for quick access or filtering
          type: boolean
        tags:
          description: Tags that inbox has been tagged with. Tags can be added to
            inboxes to group different inboxes within an account. You can also search
            for inboxes by tag in the dashboard UI.
          items:
            description: Tags that inbox has been tagged with. Tags can be added to
              inboxes to group different inboxes within an account. You can also search
              for inboxes by tag in the dashboard UI.
            nullable: true
            type: string
          nullable: true
          type: array
        teamAccess:
          description: Does inbox permit team access for organization team members.
            If so team users can use inbox and emails associated with it. See the
            team access guide at https://www.mailslurp.com/guides/team-email-account-sharing/
          type: boolean
        inboxType:
          description: Type of inbox. HTTP inboxes are faster and better for most
            cases. SMTP inboxes are more suited for public facing inbound messages
            (but cannot send).
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          nullable: true
          type: string
        readOnly:
          description: Is the inbox readOnly for the caller. Read only means can not
            be deleted or modified. This flag is present when using team accounts
            and shared inboxes.
          type: boolean
        virtualInbox:
          description: Virtual inbox can receive email but will not send emails to
            real recipients. Will save sent email record but never send an actual
            email. Perfect for testing mail server actions.
          type: boolean
        functionsAs:
          description: Inbox function if used as a primitive for another system.
          enum:
          - ALIAS
          - THREAD
          - CATCH_ALL
          - CONNECTOR
          - ACCOUNT
          - GUEST
          - OAUTH_CONNECTION_GMAIL
          nullable: true
          type: string
        userId:
          description: ID of user that inbox belongs to
          format: uuid
          type: string
        description:
          description: Description of an inbox for labelling and searching purposes
          nullable: true
          type: string
        expiresAt:
          description: "Inbox expiration time. When, if ever, the inbox should expire\
            \ and be deleted. If null then this inbox is permanent and the emails\
            \ in it won't be deleted. This is the default behavior unless expiration\
            \ date is set. If an expiration date is set and the time is reached MailSlurp\
            \ will expire the inbox and move it to an expired inbox entity. You can\
            \ still access the emails belonging to it but it can no longer send or\
            \ receive email."
          format: date-time
          nullable: true
          type: string
        accountRegion:
          description: Region of the inbox
          enum:
          - US_WEST_2
          nullable: true
          type: string
      required:
      - createdAt
      - emailAddress
      - favourite
      - id
      - readOnly
      - teamAccess
      - userId
      - virtualInbox
      type: object
    PageOrganizationInboxProjection:
      description: Paginated organization inbox results. Page index starts at zero.
        Projection results may omit larger entity fields. For fetching a full entity
        use the projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - inboxType: HTTP_INBOX
          accountRegion: US_WEST_2
          description: description
          readOnly: true
          favourite: true
          teamAccess: true
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          expiresAt: 2000-01-23T04:56:07.000+00:00
          tags:
          - tags
          - tags
          createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          virtualInbox: true
          functionsAs: ALIAS
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - inboxType: HTTP_INBOX
          accountRegion: US_WEST_2
          description: description
          readOnly: true
          favourite: true
          teamAccess: true
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          expiresAt: 2000-01-23T04:56:07.000+00:00
          tags:
          - tags
          - tags
          createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          virtualInbox: true
          functionsAs: ALIAS
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/OrganizationInboxProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    ImapSmtpAccessDetails:
      description: Access details for inbox using SMTP or IMAP
      example:
        secureImapUsername: secureImapUsername
        secureSmtpUsername: secureSmtpUsername
        smtpUsername: smtpUsername
        imapMailbox: imapMailbox
        secureImapPassword: secureImapPassword
        imapServerHost: imapServerHost
        secureSmtpServerPort: 0
        smtpServerPort: 6
        imapPassword: imapPassword
        secureSmtpServerHost: secureSmtpServerHost
        imapUsername: imapUsername
        imapServerPort: 5
        smtpServerHost: smtpServerHost
        secureImapServerHost: secureImapServerHost
        secureSmtpPassword: secureSmtpPassword
        secureImapServerPort: 1
        emailAddress: emailAddress
        smtpPassword: smtpPassword
        mailFromDomain: mailFromDomain
      properties:
        emailAddress:
          description: Email address for SMTP/IMAP login
          type: string
        secureSmtpServerHost:
          description: Secure TLS SMTP server host domain
          type: string
        secureSmtpServerPort:
          description: Secure TLS SMTP server host port
          format: int32
          type: integer
        secureSmtpUsername:
          description: Secure TLS SMTP username for login
          type: string
        secureSmtpPassword:
          description: Secure TLS SMTP password for login
          type: string
        smtpServerHost:
          description: SMTP server host domain
          type: string
        smtpServerPort:
          description: SMTP server host port
          format: int32
          type: integer
        smtpUsername:
          description: SMTP username for login
          type: string
        smtpPassword:
          description: SMTP password for login
          type: string
        secureImapServerHost:
          description: Secure TLS IMAP server host domain
          type: string
        secureImapServerPort:
          description: Secure TLS IMAP server host port
          format: int32
          type: integer
        secureImapUsername:
          description: Secure TLS IMAP username for login
          type: string
        secureImapPassword:
          description: Secure TLS IMAP password for login
          type: string
        imapServerHost:
          description: IMAP server host domain
          type: string
        imapServerPort:
          description: IMAP server host port
          format: int32
          type: integer
        imapUsername:
          description: IMAP username for login
          type: string
        imapPassword:
          description: IMAP password for login
          type: string
        imapMailbox:
          description: IMAP mailbox to SELECT
          type: string
        mailFromDomain:
          description: Mail from domain or SMTP HELO value
          nullable: true
          type: string
      required:
      - emailAddress
      - imapMailbox
      - imapPassword
      - imapServerHost
      - imapServerPort
      - imapUsername
      - secureImapPassword
      - secureImapServerHost
      - secureImapServerPort
      - secureImapUsername
      - secureSmtpPassword
      - secureSmtpServerHost
      - secureSmtpServerPort
      - secureSmtpUsername
      - smtpPassword
      - smtpServerHost
      - smtpServerPort
      - smtpUsername
      type: object
    ImapSmtpAccessServers:
      description: IMAP and SMTP server endpoints for MailSlurp
      example:
        secureImapServer:
          port: 0
          host: host
          altPorts:
          - 6
          - 6
          tls: true
        secureSmtpServer:
          port: 0
          host: host
          altPorts:
          - 6
          - 6
          tls: true
        imapServer:
          port: 0
          host: host
          altPorts:
          - 6
          - 6
          tls: true
        smtpServer:
          port: 0
          host: host
          altPorts:
          - 6
          - 6
          tls: true
      properties:
        imapServer:
          $ref: '#/components/schemas/ServerEndpoints'
        secureImapServer:
          $ref: '#/components/schemas/ServerEndpoints'
        smtpServer:
          $ref: '#/components/schemas/ServerEndpoints'
        secureSmtpServer:
          $ref: '#/components/schemas/ServerEndpoints'
      required:
      - imapServer
      - secureImapServer
      - secureSmtpServer
      - smtpServer
      type: object
    ServerEndpoints:
      example:
        port: 0
        host: host
        altPorts:
        - 6
        - 6
        tls: true
      properties:
        host:
          type: string
        port:
          format: int32
          type: integer
        tls:
          type: boolean
        altPorts:
          items:
            format: int32
            type: integer
          type: array
      required:
      - altPorts
      - host
      - port
      - tls
      type: object
    ImapAccessDetails:
      description: Access details for inbox using IMAP
      example:
        secureImapServerPort: 0
        secureImapUsername: secureImapUsername
        imapMailbox: imapMailbox
        secureImapPassword: secureImapPassword
        imapServerHost: imapServerHost
        imapPassword: imapPassword
        imapUsername: imapUsername
        imapServerPort: 6
        secureImapServerHost: secureImapServerHost
      properties:
        secureImapServerHost:
          description: Secure TLS IMAP server host domain
          type: string
        secureImapServerPort:
          description: Secure TLS IMAP server host port
          format: int32
          type: integer
        secureImapUsername:
          description: Secure TLS IMAP username for login
          type: string
        secureImapPassword:
          description: Secure TLS IMAP password for login
          type: string
        imapServerHost:
          description: IMAP server host domain
          type: string
        imapServerPort:
          description: IMAP server host port
          format: int32
          type: integer
        imapUsername:
          description: IMAP username for login
          type: string
        imapPassword:
          description: IMAP password for login
          type: string
        imapMailbox:
          description: IMAP mailbox to SELECT
          type: string
      required:
      - imapMailbox
      - imapPassword
      - imapServerHost
      - imapServerPort
      - imapUsername
      - secureImapPassword
      - secureImapServerHost
      - secureImapServerPort
      - secureImapUsername
      type: object
    InboxIdItem:
      description: Inbox ID and email address pair
      example:
        emailAddress: emailAddress
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        emailAddress:
          type: string
      required:
      - emailAddress
      - id
      type: object
    InboxIdsResult:
      description: List of inbox IDs and email addresses
      example:
        inboxIds:
        - emailAddress: emailAddress
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - emailAddress: emailAddress
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        inboxIds:
          items:
            $ref: '#/components/schemas/InboxIdItem'
          type: array
      required:
      - inboxIds
      type: object
    InboxExistsDto:
      description: Result of email exists query
      example:
        exists: true
      properties:
        exists:
          type: boolean
      required:
      - exists
      type: object
    InboxByNameResult:
      description: Result of search for inbox by name
      example:
        exists: true
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        inboxId:
          format: uuid
          nullable: true
          type: string
        exists:
          type: boolean
      required:
      - exists
      type: object
    InboxByEmailAddressResult:
      description: Result of search for inbox by email address
      example:
        exists: true
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        inboxId:
          format: uuid
          nullable: true
          type: string
        exists:
          type: boolean
      required:
      - exists
      type: object
    GuestPortalUserProjection:
      description: Representation of a guest portal user
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        portalId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: inboxId
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        username: username
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        username:
          type: string
        inboxId:
          type: string
        userId:
          format: uuid
          type: string
        emailAddress:
          type: string
        updatedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        portalId:
          format: uuid
          type: string
        name:
          type: string
        id:
          format: uuid
          type: string
      required:
      - createdAt
      - id
      - portalId
      - updatedAt
      - userId
      - username
      type: object
    PageGuestPortalUsers:
      description: Paginated guest portal users
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          portalId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: inboxId
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          username: username
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          portalId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: inboxId
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          username: username
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/GuestPortalUserProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    GroupProjection:
      description: Data for contact group
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        createdAt:
          format: date-time
          type: string
        name:
          type: string
        id:
          format: uuid
          type: string
        description:
          nullable: true
          type: string
      required:
      - createdAt
      - id
      - name
      type: object
    ContactProjection:
      description: Email contact for address book
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        firstName: firstName
        lastName: lastName
        optOut: true
        emailAddress: emailAddress
        emailAddresses:
        - emailAddresses
        - emailAddresses
        groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        company: company
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        emailAddress:
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
        emailAddresses:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        firstName:
          nullable: true
          type: string
        lastName:
          nullable: true
          type: string
        company:
          nullable: true
          type: string
        optOut:
          nullable: true
          type: boolean
        id:
          format: uuid
          type: string
        groupId:
          format: uuid
          nullable: true
          type: string
      required:
      - createdAt
      - id
      type: object
    PageContactProjection:
      description: Paginated contact results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          firstName: firstName
          lastName: lastName
          optOut: true
          emailAddress: emailAddress
          emailAddresses:
          - emailAddresses
          - emailAddresses
          groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          company: company
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          firstName: firstName
          lastName: lastName
          optOut: true
          emailAddress: emailAddress
          emailAddresses:
          - emailAddresses
          - emailAddresses
          groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          company: company
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/ContactProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    PageGroupProjection:
      description: Paginated missed email results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/GroupProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    PageInboxForwarderDto:
      description: Paginated inbox forwarder results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          field: RECIPIENTS
          forwardToRecipients:
          - forwardToRecipients
          - forwardToRecipients
          name: name
          match: match
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          field: RECIPIENTS
          forwardToRecipients:
          - forwardToRecipients
          - forwardToRecipients
          name: name
          match: match
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/InboxForwarderDto'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    InboxForwarderEventProjection:
      description: Inbox forwarder event
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        sentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message: message
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        forwarderId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        status: SUCCESS
      properties:
        emailId:
          format: uuid
          nullable: true
          type: string
        inboxId:
          format: uuid
          nullable: true
          type: string
        userId:
          format: uuid
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
        sentId:
          format: uuid
          nullable: true
          type: string
        forwarderId:
          format: uuid
          nullable: true
          type: string
        message:
          nullable: true
          type: string
        id:
          format: uuid
          nullable: true
          type: string
        status:
          enum:
          - SUCCESS
          - FAILURE
          nullable: true
          type: string
      required:
      - createdAt
      type: object
    PageInboxForwarderEvents:
      description: Paginated inbox forwarder events. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          sentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          message: message
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          forwarderId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: SUCCESS
        - createdAt: 2000-01-23T04:56:07.000+00:00
          sentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          message: message
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          forwarderId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: SUCCESS
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/InboxForwarderEventProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    InboxForwarderEventDto:
      description: Inbox forwarder event. Describes how an email was handled by an
        inbox forwarder.
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        sentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message: message
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        forwarderId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        status: SUCCESS
      externalDocs:
        url: https://docs.mailslurp.com/forwarding/
      properties:
        id:
          format: uuid
          nullable: true
          type: string
        inboxId:
          format: uuid
          nullable: true
          type: string
        emailId:
          format: uuid
          nullable: true
          type: string
        sentId:
          format: uuid
          nullable: true
          type: string
        userId:
          format: uuid
          nullable: true
          type: string
        forwarderId:
          format: uuid
          nullable: true
          type: string
        message:
          nullable: true
          type: string
        status:
          enum:
          - SUCCESS
          - FAILURE
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
      required:
      - createdAt
      type: object
    ExpiredInboxRecordProjection:
      description: Record of inbox expiration
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        userId:
          format: uuid
          type: string
        emailAddress:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          format: uuid
          type: string
      required:
      - createdAt
      - emailAddress
      - id
      - userId
      type: object
    PageExpiredInboxRecordProjection:
      description: Paginated expired inbox results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/ExpiredInboxRecordProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    ExpiredInboxDto:
      description: Expired inbox
      example:
        emailAddress: emailAddress
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        emailAddress:
          type: string
      required:
      - emailAddress
      - id
      - inboxId
      type: object
    ExpirationDefaults:
      description: Expiration defaults for your account
      example:
        nextInboxAllowsPermanent: true
        defaultExpirationMillis: 0
        maxExpirationMillis: 6
        defaultExpiresAt: 2000-01-23T04:56:07.000+00:00
        canPermanentInbox: true
      properties:
        defaultExpirationMillis:
          format: int64
          nullable: true
          type: integer
        maxExpirationMillis:
          format: int64
          nullable: true
          type: integer
        defaultExpiresAt:
          format: date-time
          nullable: true
          type: string
        canPermanentInbox:
          type: boolean
        nextInboxAllowsPermanent:
          type: boolean
      required:
      - canPermanentInbox
      - nextInboxAllowsPermanent
      type: object
    EmailTextLinesResult:
      description: Parsed text of an email
      example:
        lines:
        - lines
        - lines
        body: body
      properties:
        lines:
          items:
            type: string
          type: array
        body:
          type: string
      required:
      - body
      - lines
      type: object
    EmailLinksResult:
      description: Links found in HTML
      example:
        links:
        - links
        - links
        body: body
      properties:
        links:
          items:
            type: string
          type: array
        body:
          type: string
      required:
      - body
      - links
      type: object
    EmailHtmlDto:
      example:
        subject: subject
        body: body
      properties:
        subject:
          type: string
        body:
          type: string
      type: object
    EmailContentPartResult:
      example:
        content: content
      properties:
        content:
          nullable: true
          type: string
      type: object
    DownloadAttachmentDto:
      description: Content of attachment
      example:
        base64FileContents: base64FileContents
        contentType: contentType
        sizeBytes: 0
      properties:
        base64FileContents:
          description: Base64 encoded string of attachment bytes. Decode the base64
            encoded string to get the raw contents. If the file has a content type
            such as `text/html` you can read the contents directly by converting it
            to string using `utf-8` encoding.
          type: string
        contentType:
          description: "Content type of attachment. Examples are `image/png`, `application/msword`,\
            \ `text/csv` etc."
          type: string
        sizeBytes:
          description: Size in bytes of attachment content
          format: int64
          type: integer
      required:
      - base64FileContents
      - contentType
      - sizeBytes
      type: object
    EmailRecipientsProjection:
      description: Recipients of original email in thread
      example:
        cc:
        - emailAddress: emailAddress
          rawValue: rawValue
          name: name
        - emailAddress: emailAddress
          rawValue: rawValue
          name: name
        bcc:
        - emailAddress: emailAddress
          rawValue: rawValue
          name: name
        - emailAddress: emailAddress
          rawValue: rawValue
          name: name
        to:
        - emailAddress: emailAddress
          rawValue: rawValue
          name: name
        - emailAddress: emailAddress
          rawValue: rawValue
          name: name
      properties:
        to:
          items:
            $ref: '#/components/schemas/RecipientProjection'
          type: array
        cc:
          items:
            $ref: '#/components/schemas/RecipientProjection'
          type: array
        bcc:
          items:
            $ref: '#/components/schemas/RecipientProjection'
          type: array
      type: object
    EmailThreadProjection:
      description: "An email thread is a message thread created for a email based\
        \ on Message-ID, In-Reply-To, and References headers"
      example:
        cc:
        - cc
        - cc
        bcc:
        - bcc
        - bcc
        messageCount: 0
        lastSender:
          emailAddress: emailAddress
          rawValue: rawValue
          name: name
        unread: true
        subject: subject
        lastBodyExcerpt: lastBodyExcerpt
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        createdAt: 2000-01-23T04:56:07.000+00:00
        lastCreatedAt: 2000-01-23T04:56:07.000+00:00
        sender:
          emailAddress: emailAddress
          rawValue: rawValue
          name: name
        lastTextExcerpt: lastTextExcerpt
        recipients:
          cc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          bcc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          to:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
        from: from
        to:
        - to
        - to
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        hasAttachments: true
        lastFrom: lastFrom
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        sender:
          $ref: '#/components/schemas/SenderProjection'
        recipients:
          $ref: '#/components/schemas/EmailRecipientsProjection'
        inboxId:
          description: Inbox ID
          format: uuid
          type: string
        userId:
          description: User ID
          format: uuid
          type: string
        updatedAt:
          description: Updated at DateTime
          format: date-time
          type: string
        createdAt:
          description: Created at DateTime
          format: date-time
          type: string
        to:
          description: To recipients
          items:
            description: To recipients
            type: string
          type: array
        cc:
          description: CC recipients
          items:
            description: CC recipients
            type: string
          type: array
        bcc:
          description: BCC recipients
          items:
            description: BCC recipients
            type: string
          type: array
        hasAttachments:
          description: Has attachments
          type: boolean
        unread:
          description: Has unread
          type: boolean
        messageCount:
          description: Number of messages in the thread
          format: int32
          type: integer
        lastBodyExcerpt:
          description: Last body excerpt
          type: string
        lastTextExcerpt:
          description: Last text excerpt
          type: string
        lastCreatedAt:
          description: Last email created time
          format: date-time
          type: string
        lastFrom:
          description: Last sender
          type: string
        lastSender:
          $ref: '#/components/schemas/SenderProjection'
        subject:
          description: Thread topic subject
          type: string
        id:
          description: ID of email thread
          format: uuid
          type: string
        from:
          description: From sender
          type: string
      required:
      - createdAt
      - hasAttachments
      - id
      - messageCount
      - to
      - unread
      - updatedAt
      - userId
      type: object
    PageEmailThreadProjection:
      description: Paginated email thread projection results.
      example:
        number: 2
        last: true
        numberOfElements: 5
        size: 5
        totalPages: 1
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - cc:
          - cc
          - cc
          bcc:
          - bcc
          - bcc
          messageCount: 0
          lastSender:
            emailAddress: emailAddress
            rawValue: rawValue
            name: name
          unread: true
          subject: subject
          lastBodyExcerpt: lastBodyExcerpt
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          createdAt: 2000-01-23T04:56:07.000+00:00
          lastCreatedAt: 2000-01-23T04:56:07.000+00:00
          sender:
            emailAddress: emailAddress
            rawValue: rawValue
            name: name
          lastTextExcerpt: lastTextExcerpt
          recipients:
            cc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            bcc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            to:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
          from: from
          to:
          - to
          - to
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          hasAttachments: true
          lastFrom: lastFrom
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - cc:
          - cc
          - cc
          bcc:
          - bcc
          - bcc
          messageCount: 0
          lastSender:
            emailAddress: emailAddress
            rawValue: rawValue
            name: name
          unread: true
          subject: subject
          lastBodyExcerpt: lastBodyExcerpt
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          createdAt: 2000-01-23T04:56:07.000+00:00
          lastCreatedAt: 2000-01-23T04:56:07.000+00:00
          sender:
            emailAddress: emailAddress
            rawValue: rawValue
            name: name
          lastTextExcerpt: lastTextExcerpt
          recipients:
            cc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            bcc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            to:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
          from: from
          to:
          - to
          - to
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          hasAttachments: true
          lastFrom: lastFrom
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 6
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/EmailThreadProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    RecipientProjection:
      example:
        emailAddress: emailAddress
        rawValue: rawValue
        name: name
      properties:
        emailAddress:
          type: string
        rawValue:
          type: string
        name:
          type: string
      required:
      - emailAddress
      - rawValue
      type: object
    SenderProjection:
      description: Last sender object
      example:
        emailAddress: emailAddress
        rawValue: rawValue
        name: name
      properties:
        emailAddress:
          type: string
        rawValue:
          type: string
        name:
          type: string
      required:
      - emailAddress
      - rawValue
      type: object
    EmailThreadDto:
      example:
        cc:
        - cc
        - cc
        createdAt: 2000-01-23T04:56:07.000+00:00
        bcc:
        - bcc
        - bcc
        sender:
          emailAddress: emailAddress
          rawValue: rawValue
          name: name
        recipients:
          cc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          bcc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          to:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
        subject: subject
        from: from
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        to:
        - to
        - to
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: ID of email thread
          format: uuid
          type: string
        userId:
          description: User ID
          format: uuid
          type: string
        inboxId:
          description: Inbox ID
          format: uuid
          type: string
        from:
          description: From sender
          type: string
        to:
          description: To recipients
          items:
            description: To recipients
            type: string
          type: array
        cc:
          description: CC recipients
          items:
            description: CC recipients
            type: string
          type: array
        bcc:
          description: BCC recipients
          items:
            description: BCC recipients
            type: string
          type: array
        sender:
          $ref: '#/components/schemas/Sender'
        recipients:
          $ref: '#/components/schemas/EmailRecipients'
        subject:
          description: Thread topic subject
          type: string
        createdAt:
          description: Created at DateTime
          format: date-time
          type: string
        updatedAt:
          description: Updated at DateTime
          format: date-time
          type: string
      required:
      - createdAt
      - id
      - to
      - updatedAt
      - userId
      type: object
    EmailThreadItem:
      example:
        cc:
        - cc
        - cc
        itemType: RECEIVED_EMAIL
        bcc:
        - bcc
        - bcc
        attachments:
        - attachments
        - attachments
        read: true
        subject: subject
        inReplyTo: inReplyTo
        messageId: messageId
        entityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        threadId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        createdAt: 2000-01-23T04:56:07.000+00:00
        sender:
          emailAddress: emailAddress
          rawValue: rawValue
          name: name
        recipients:
          cc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          bcc:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          to:
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
          - emailAddress: emailAddress
            rawValue: rawValue
            name: name
        textExcerpt: textExcerpt
        from: from
        bodyExcerpt: bodyExcerpt
        to:
        - to
        - to
      properties:
        itemType:
          enum:
          - RECEIVED_EMAIL
          - SENT_EMAIL
          type: string
        entityId:
          format: uuid
          type: string
        bodyExcerpt:
          nullable: true
          type: string
        textExcerpt:
          nullable: true
          type: string
        subject:
          nullable: true
          type: string
        to:
          items:
            type: string
          type: array
        from:
          nullable: true
          type: string
        bcc:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        cc:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        attachments:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        createdAt:
          format: date-time
          type: string
        read:
          type: boolean
        inReplyTo:
          nullable: true
          type: string
        messageId:
          nullable: true
          type: string
        threadId:
          format: uuid
          nullable: true
          type: string
        sender:
          $ref: '#/components/schemas/Sender'
        recipients:
          $ref: '#/components/schemas/EmailRecipients'
      required:
      - createdAt
      - entityId
      - itemType
      - read
      - to
      type: object
    EmailThreadItemsDto:
      example:
        items:
        - cc:
          - cc
          - cc
          itemType: RECEIVED_EMAIL
          bcc:
          - bcc
          - bcc
          attachments:
          - attachments
          - attachments
          read: true
          subject: subject
          inReplyTo: inReplyTo
          messageId: messageId
          entityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          threadId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          createdAt: 2000-01-23T04:56:07.000+00:00
          sender:
            emailAddress: emailAddress
            rawValue: rawValue
            name: name
          recipients:
            cc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            bcc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            to:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
          textExcerpt: textExcerpt
          from: from
          bodyExcerpt: bodyExcerpt
          to:
          - to
          - to
        - cc:
          - cc
          - cc
          itemType: RECEIVED_EMAIL
          bcc:
          - bcc
          - bcc
          attachments:
          - attachments
          - attachments
          read: true
          subject: subject
          inReplyTo: inReplyTo
          messageId: messageId
          entityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          threadId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          createdAt: 2000-01-23T04:56:07.000+00:00
          sender:
            emailAddress: emailAddress
            rawValue: rawValue
            name: name
          recipients:
            cc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            bcc:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            to:
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
            - emailAddress: emailAddress
              rawValue: rawValue
              name: name
          textExcerpt: textExcerpt
          from: from
          bodyExcerpt: bodyExcerpt
          to:
          - to
          - to
      properties:
        items:
          items:
            $ref: '#/components/schemas/EmailThreadItem'
          type: array
      required:
      - items
      type: object
    GravatarUrl:
      description: User image
      example:
        url: url
        hash: hash
      properties:
        url:
          type: string
        hash:
          type: string
      required:
      - hash
      - url
      type: object
    EmailValidationRequestDto:
      description: Email validation request
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        isValid: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        emailAddress:
          type: string
        isValid:
          type: boolean
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - emailAddress
      - id
      - isValid
      - updatedAt
      - userId
      type: object
    PageEmailValidationRequest:
      description: Paginated email validation request records. Page index starts at
        zero. Projection results may omit larger entity fields. For fetching a full
        entity use the projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          isValid: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          isValid: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/EmailValidationRequestDto'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    DomainPreview:
      description: Preview object for domain entity
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        hasMissingRecords: true
        domainType: HTTP_INBOX
        isVerified: true
        domain: domain
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        catchAllInboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        domain:
          type: string
        catchAllInboxId:
          format: uuid
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
        domainType:
          description: Type of domain. Dictates type of inbox that can be created
            with domain. HTTP means inboxes are processed using SES while SMTP inboxes
            use a custom SMTP mail server. SMTP does not support sending so use HTTP
            for sending emails.
          enum:
          - HTTP_INBOX
          - SMTP_DOMAIN
          type: string
        isVerified:
          type: boolean
        hasMissingRecords:
          type: boolean
      required:
      - createdAt
      - domain
      - domainType
      - hasMissingRecords
      - id
      - isVerified
      type: object
    DomainGroup:
      example:
        domains:
        - domainType: HTTP_INBOX
          domainName: domainName
          verified: true
        - domainType: HTTP_INBOX
          domainName: domainName
          verified: true
        label: DEFAULT
      properties:
        label:
          enum:
          - DEFAULT
          - DOMAIN_POOL
          - CUSTOM
          type: string
        domains:
          items:
            $ref: '#/components/schemas/DomainInformation'
          type: array
      required:
      - domains
      - label
      type: object
    DomainGroupsDto:
      example:
        domainGroups:
        - domains:
          - domainType: HTTP_INBOX
            domainName: domainName
            verified: true
          - domainType: HTTP_INBOX
            domainName: domainName
            verified: true
          label: DEFAULT
        - domains:
          - domainType: HTTP_INBOX
            domainName: domainName
            verified: true
          - domainType: HTTP_INBOX
            domainName: domainName
            verified: true
          label: DEFAULT
      properties:
        domainGroups:
          items:
            $ref: '#/components/schemas/DomainGroup'
          type: array
      required:
      - domainGroups
      type: object
    DomainInformation:
      example:
        domainType: HTTP_INBOX
        domainName: domainName
        verified: true
      properties:
        domainName:
          type: string
        verified:
          type: boolean
        domainType:
          description: Type of domain. Dictates type of inbox that can be created
            with domain. HTTP means inboxes are processed using SES while SMTP inboxes
            use a custom SMTP mail server. SMTP does not support sending so use HTTP
            for sending emails.
          enum:
          - HTTP_INBOX
          - SMTP_DOMAIN
          type: string
      required:
      - domainName
      - domainType
      - verified
      type: object
    DomainIssuesDto:
      example:
        hasIssues: true
      properties:
        hasIssues:
          type: boolean
      required:
      - hasIssues
      type: object
    OptInIdentityProjection:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        verified: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        emailAddress:
          type: string
        updatedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        verified:
          type: boolean
      required:
      - createdAt
      - emailAddress
      - id
      - updatedAt
      type: object
    PageOptInIdentityProjection:
      description: Paginated opt in identity projections reflecting users who have
        verified double-opt in consent to receive emails from your account.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          verified: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          verified: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/OptInIdentityProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    OptInSendingConsentDto:
      example:
        userHasConsented: true
        verificationCodeSent: true
        canSend: true
      properties:
        verificationCodeSent:
          type: boolean
        userHasConsented:
          type: boolean
        canSend:
          type: boolean
      required:
      - canSend
      - userHasConsented
      - verificationCodeSent
      type: object
    ConnectorProjection:
      description: Connector
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        enabled: true
      properties:
        enabled:
          type: boolean
        inboxId:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        emailAddress:
          type: string
        createdAt:
          format: date-time
          type: string
        name:
          type: string
        id:
          format: uuid
          type: string
      required:
      - createdAt
      - id
      - inboxId
      - userId
      type: object
    PageConnector:
      description: Paginated inbox connectors. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          enabled: true
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          enabled: true
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/ConnectorProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    OptionalConnectorSyncSettingsDto:
      example:
        result:
          syncEnabled: true
          syncInterval: 0
          connectorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          syncScheduleType: INTERVAL
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        present: true
      properties:
        present:
          type: boolean
        result:
          $ref: '#/components/schemas/ConnectorSyncSettingsDto'
      required:
      - present
      type: object
    OptionalConnectorSmtpConnectionDto:
      example:
        result:
          localHostName: localHostName
          smtpMechanisms:
          - smtpMechanisms
          - smtpMechanisms
          proxyEnabled: true
          smtpUsername: smtpUsername
          startTls: true
          connectorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          smtpPort: 0
          proxyHost: proxyHost
          enabled: true
          proxyPort: 6
          sslProtocols:
          - sslProtocols
          - sslProtocols
          createdAt: 2000-01-23T04:56:07.000+00:00
          smtpHost: smtpHost
          smtpSsl: true
          smtpPassword: smtpPassword
          sslTrust: sslTrust
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        present: true
      properties:
        present:
          type: boolean
        result:
          $ref: '#/components/schemas/ConnectorSmtpConnectionDto'
      required:
      - present
      type: object
    OptionalConnectorImapConnectionDto:
      example:
        result:
          imapSsl: true
          localHostName: localHostName
          proxyEnabled: true
          searchTerms: searchTerms
          startTls: true
          connectorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          selectFolder: selectFolder
          imapPassword: imapPassword
          imapUsername: imapUsername
          imapPort: 0
          proxyHost: proxyHost
          imapHost: imapHost
          enabled: true
          proxyPort: 6
          sslProtocols:
          - sslProtocols
          - sslProtocols
          createdAt: 2000-01-23T04:56:07.000+00:00
          sslTrust: sslTrust
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          mechanisms:
          - mechanisms
          - mechanisms
        present: true
      properties:
        present:
          type: boolean
        result:
          $ref: '#/components/schemas/ConnectorImapConnectionDto'
      required:
      - present
      type: object
    ConnectorEventProjection:
      description: ConnectorEventProjection
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        size: 0
        connectorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        eventType: SEND
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message: message
        seen: true
        status: SUCCESS
      properties:
        eventType:
          enum:
          - SEND
          - SYNC
          type: string
        createdAt:
          format: date-time
          type: string
        connectorId:
          format: uuid
          type: string
        seen:
          type: boolean
        message:
          type: string
        id:
          format: uuid
          type: string
        size:
          format: int64
          type: integer
        status:
          enum:
          - SUCCESS
          - INTERNAL_ERROR
          - SUBSCRIPTION_ERROR
          - CONNECTION_ERROR
          - NOT_FOUND
          type: string
      required:
      - connectorId
      - createdAt
      - eventType
      - size
      - status
      type: object
    PageConnectorEvents:
      description: Paginated inbox connector events. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 2
        last: true
        numberOfElements: 5
        size: 5
        totalPages: 1
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          size: 0
          connectorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          eventType: SEND
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          message: message
          seen: true
          status: SUCCESS
        - createdAt: 2000-01-23T04:56:07.000+00:00
          size: 0
          connectorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          eventType: SEND
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          message: message
          seen: true
          status: SUCCESS
        first: true
        totalElements: 6
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/ConnectorEventProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    ConnectorProviderSettingsDto:
      example:
        googleSettings:
          imapSsl: true
          smtpHost: smtpHost
          smtpStartTls: true
          imapStartTls: true
          smtpSsl: true
          smtpPort: 6
          imapPort: 0
          imapHost: imapHost
          mailProvider: GOOGLE
        microsoftSettings:
          imapSsl: true
          smtpHost: smtpHost
          smtpStartTls: true
          imapStartTls: true
          smtpSsl: true
          smtpPort: 6
          imapPort: 0
          imapHost: imapHost
          mailProvider: GOOGLE
      properties:
        googleSettings:
          $ref: '#/components/schemas/ProviderSettings'
        microsoftSettings:
          $ref: '#/components/schemas/ProviderSettings'
      required:
      - googleSettings
      - microsoftSettings
      type: object
    ProviderSettings:
      example:
        imapSsl: true
        smtpHost: smtpHost
        smtpStartTls: true
        imapStartTls: true
        smtpSsl: true
        smtpPort: 6
        imapPort: 0
        imapHost: imapHost
        mailProvider: GOOGLE
      properties:
        mailProvider:
          enum:
          - GOOGLE
          - MICROSOFT
          type: string
        imapHost:
          type: string
        imapPort:
          format: int32
          type: integer
        imapSsl:
          type: boolean
        imapStartTls:
          type: boolean
        smtpHost:
          type: string
        smtpPort:
          format: int32
          type: integer
        smtpSsl:
          type: boolean
        smtpStartTls:
          type: boolean
      required:
      - imapHost
      - imapPort
      - imapSsl
      - mailProvider
      - smtpHost
      - smtpPort
      - smtpSsl
      type: object
    ConnectorEventDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        size: 0
        connectorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        eventType: SEND
        message: message
        logs: logs
        seen: true
        status: SUCCESS
      properties:
        id:
          format: uuid
          type: string
        connectorId:
          format: uuid
          type: string
        status:
          enum:
          - SUCCESS
          - INTERNAL_ERROR
          - SUBSCRIPTION_ERROR
          - CONNECTION_ERROR
          - NOT_FOUND
          type: string
        eventType:
          enum:
          - SEND
          - SYNC
          type: string
        size:
          format: int64
          type: integer
        message:
          type: string
        logs:
          type: string
        seen:
          type: boolean
        createdAt:
          format: date-time
          type: string
      required:
      - connectorId
      - createdAt
      - eventType
      - id
      - size
      - status
      type: object
    OptionalConnectorDto:
      example:
        result:
          createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          enabled: true
        present: true
      properties:
        present:
          type: boolean
        result:
          $ref: '#/components/schemas/ConnectorDto'
      required:
      - present
      type: object
    PageReputationItems:
      description: Paginated reputation items like complaints and bounces. Page index
        starts at zero. Projection results may omit larger entity fields. For fetching
        a full entity use the projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - severity: INFO
          createdAt: 2000-01-23T04:56:07.000+00:00
          recipient: recipient
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          source: source
          reputationType: COMPLAINT
        - severity: INFO
          createdAt: 2000-01-23T04:56:07.000+00:00
          recipient: recipient
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          source: source
          reputationType: COMPLAINT
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/ReputationItemProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    ReputationItemProjection:
      example:
        severity: INFO
        createdAt: 2000-01-23T04:56:07.000+00:00
        recipient: recipient
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        source: source
        reputationType: COMPLAINT
      properties:
        createdAt:
          format: date-time
          type: string
        recipient:
          type: string
        reputationType:
          enum:
          - COMPLAINT
          - BOUNCE
          type: string
        id:
          format: uuid
          type: string
        severity:
          enum:
          - INFO
          - WARNING
          - DANGER
          type: string
        source:
          type: string
      required:
      - createdAt
      - id
      - reputationType
      - severity
      type: object
    BounceRecipientProjection:
      description: Bounced recipient
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        bounceType: bounceType
        recipient: recipient
        action: action
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        status: status
      properties:
        sentEmailId:
          format: uuid
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
        recipient:
          type: string
        bounceType:
          nullable: true
          type: string
        action:
          nullable: true
          type: string
        id:
          format: uuid
          type: string
        status:
          nullable: true
          type: string
      required:
      - createdAt
      - recipient
      type: object
    PageBouncedRecipients:
      description: Paginated bounced recipients. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          bounceType: bounceType
          recipient: recipient
          action: action
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: status
        - createdAt: 2000-01-23T04:56:07.000+00:00
          sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          bounceType: bounceType
          recipient: recipient
          action: action
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: status
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/BounceRecipientProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    BouncedRecipientDto:
      description: Bounced recipient
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        bounceType: bounceType
        recipient: recipient
        action: action
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        diagnosticCode: diagnosticCode
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        status: status
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          nullable: true
          type: string
        sentEmailId:
          format: uuid
          nullable: true
          type: string
        recipient:
          type: string
        diagnosticCode:
          nullable: true
          type: string
        action:
          nullable: true
          type: string
        bounceType:
          nullable: true
          type: string
        status:
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
      required:
      - createdAt
      - id
      - recipient
      type: object
    ListUnsubscribeRecipientProjection:
      description: List unsubscribe recipient
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        emailAddress:
          type: string
        createdAt:
          format: date-time
          type: string
        domainId:
          format: uuid
          nullable: true
          type: string
        id:
          format: uuid
          type: string
      required:
      - createdAt
      - emailAddress
      - id
      type: object
    PageListUnsubscribeRecipients:
      description: Paginated list unsubscribe recipients. Page index starts at zero.
        Projection results may omit larger entity fields. For fetching a full entity
        use the projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          domainId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/ListUnsubscribeRecipientProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    BounceProjection:
      description: Bounced email event
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        sender: sender
        bounceType: bounceType
        subject: subject
        bounceMta: bounceMta
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        sender:
          type: string
        createdAt:
          format: date-time
          type: string
        bounceType:
          nullable: true
          type: string
        bounceMta:
          nullable: true
          type: string
        subject:
          nullable: true
          type: string
        id:
          format: uuid
          type: string
      required:
      - createdAt
      - sender
      type: object
    PageBouncedEmail:
      description: Paginated bounced email. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          sender: sender
          bounceType: bounceType
          subject: subject
          bounceMta: bounceMta
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          sender: sender
          bounceType: bounceType
          subject: subject
          bounceMta: bounceMta
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/BounceProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    BouncedEmailDto:
      description: Bounced email
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        bounceRecipients:
        - bounceRecipients
        - bounceRecipients
        sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sender: sender
        bounceType: bounceType
        subject: subject
        bounceMta: bounceMta
        sentToRecipients:
        - sentToRecipients
        - sentToRecipients
        bounceSubType: bounceSubType
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        notificationType: notificationType
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        notificationType:
          type: string
        sentToRecipients:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        sender:
          type: string
        bounceMta:
          nullable: true
          type: string
        bounceType:
          nullable: true
          type: string
        bounceRecipients:
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        bounceSubType:
          nullable: true
          type: string
        sentEmailId:
          format: uuid
          nullable: true
          type: string
        subject:
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
      required:
      - createdAt
      - id
      - notificationType
      - sender
      - userId
      type: object
    Complaint:
      example:
        complaintRecipient: complaintRecipient
        createdAt: 2000-01-23T04:56:07.000+00:00
        mailMessageId: mailMessageId
        mailSource: mailSource
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        eventType: eventType
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        eventType:
          type: string
        mailSource:
          type: string
        mailMessageId:
          type: string
        complaintRecipient:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - complaintRecipient
      - createdAt
      - id
      - updatedAt
      type: object
    PageComplaint:
      description: Paginated complaint email. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - complaintRecipient: complaintRecipient
          createdAt: 2000-01-23T04:56:07.000+00:00
          mailMessageId: mailMessageId
          mailSource: mailSource
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          eventType: eventType
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - complaintRecipient: complaintRecipient
          createdAt: 2000-01-23T04:56:07.000+00:00
          mailMessageId: mailMessageId
          mailSource: mailSource
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          eventType: eventType
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/Complaint'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    AccountBounceBlockDto:
      example:
        bounceCount: 0
        maximumDailyBounces: 1
        isSendingBlocked: true
        bounceCountToday: 6
        isFrozen: true
        maximumAccountBounces: 5
      properties:
        isFrozen:
          type: boolean
        isSendingBlocked:
          type: boolean
        bounceCount:
          format: int64
          type: integer
        bounceCountToday:
          format: int64
          type: integer
        maximumDailyBounces:
          format: int64
          type: integer
        maximumAccountBounces:
          format: int64
          type: integer
      required:
      - bounceCount
      - bounceCountToday
      - isFrozen
      - isSendingBlocked
      - maximumAccountBounces
      - maximumDailyBounces
      type: object
    AttachmentProjection:
      description: Email attachment data
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        contentId: contentId
        name: name
        contentLength: 0
        attachmentId: attachmentId
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        contentType: image/png
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        inboxId:
          description: Inbox ID
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        updatedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        contentId:
          description: Content ID of attachment.
          nullable: true
          type: string
        attachmentId:
          description: Attachment ID
          type: string
        name:
          nullable: true
          type: string
        id:
          description: ID
          format: uuid
          type: string
        contentLength:
          description: Content length of attachment in bytes
          format: int64
          nullable: true
          type: integer
        contentType:
          description: Content type of attachment.
          example: image/png
          nullable: true
          type: string
      required:
      - attachmentId
      - createdAt
      - id
      - updatedAt
      - userId
      type: object
    PageAttachmentEntity:
      description: Paginated attachment entity results. Page index starts at zero.
        Projection results may omit larger entity fields. For fetching a full entity
        use the projection ID with individual method calls.
      example:
        number: 2
        last: true
        numberOfElements: 5
        size: 5
        totalPages: 1
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          contentId: contentId
          name: name
          contentLength: 0
          attachmentId: attachmentId
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          contentType: image/png
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          contentId: contentId
          name: name
          contentLength: 0
          attachmentId: attachmentId
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          contentType: image/png
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 6
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/AttachmentProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    AttachmentEntityDto:
      description: DTO representation of an attachment.
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        contentId: contentId
        name: name
        contentLength: 0
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        attachmentId: attachmentId
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        contentType: contentType
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: The unique identifier for this attachment.
          format: uuid
          type: string
        attachmentId:
          description: The identifier of the attachment file
          type: string
        userId:
          description: The user identifier associated with this attachment.
          format: uuid
          type: string
        contentType:
          description: The content type of the attachment.
          nullable: true
          type: string
        contentLength:
          description: The content length of the attachment in bytes.
          format: int64
          nullable: true
          type: integer
        contentId:
          description: "The content identifier, which is a unique ID for the content\
            \ part of the email."
          nullable: true
          type: string
        name:
          description: The name of the attachment file.
          nullable: true
          type: string
        inboxId:
          description: The inbox identifier associated with this attachment.
          format: uuid
          nullable: true
          type: string
        createdAt:
          description: The timestamp when this attachment was created.
          format: date-time
          type: string
        updatedAt:
          description: The timestamp when this attachment was last updated.
          format: date-time
          type: string
      required:
      - attachmentId
      - createdAt
      - id
      - updatedAt
      - userId
      type: object
    AliasProjection:
      description: Representation of a alias
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        useThreads: true
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        inboxId:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        emailAddress:
          type: string
        updatedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        useThreads:
          type: boolean
        name:
          type: string
        id:
          format: uuid
          type: string
      required:
      - createdAt
      - emailAddress
      - id
      - inboxId
      - updatedAt
      - userId
      type: object
    PageAlias:
      description: Paginated email alias results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          useThreads: true
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          useThreads: true
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/AliasProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    AliasThreadProjection:
      description: A thread is a message thread created for a message received by
        an alias
      example:
        cc:
        - cc
        - cc
        createdAt: 2000-01-23T04:56:07.000+00:00
        bcc:
        - bcc
        - bcc
        aliasId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        subject: subject
        name: name
        to:
        - to
        - to
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        inboxId:
          description: Inbox ID
          format: uuid
          type: string
        userId:
          description: User ID
          format: uuid
          type: string
        updatedAt:
          description: Updated at DateTime
          format: date-time
          type: string
        createdAt:
          description: Created at DateTime
          format: date-time
          type: string
        to:
          description: To recipients
          items:
            description: To recipients
            type: string
          type: array
        cc:
          description: CC recipients
          items:
            description: CC recipients
            type: string
          type: array
        bcc:
          description: BCC recipients
          items:
            description: BCC recipients
            type: string
          type: array
        aliasId:
          description: Alias ID
          format: uuid
          type: string
        subject:
          description: Thread subject
          type: string
        name:
          description: Name of thread
          type: string
        id:
          description: ID of email thread
          format: uuid
          type: string
      required:
      - aliasId
      - createdAt
      - id
      - inboxId
      - to
      - updatedAt
      - userId
      type: object
    PageAliasThreadProjection:
      description: Paginated alias thread projection results.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - cc:
          - cc
          - cc
          createdAt: 2000-01-23T04:56:07.000+00:00
          bcc:
          - bcc
          - bcc
          aliasId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          subject: subject
          name: name
          to:
          - to
          - to
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - cc:
          - cc
          - cc
          createdAt: 2000-01-23T04:56:07.000+00:00
          bcc:
          - bcc
          - bcc
          aliasId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          subject: subject
          name: name
          to:
          - to
          - to
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/AliasThreadProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    AITransformProjection:
      example:
        instructions:
        - instructions
        - instructions
        outputSchema:
          maxItems: 0
          nullable: true
          minLength: 0
          format: format
          pattern: pattern
          anyOf:
          - null
          - null
          description: description
          title: title
          type: string
          enum:
          - enum
          - enum
          required:
          - required
          - required
          example: "{}"
          minProperties: 0
          minItems: 0
          default: "{}"
          propertyOrdering:
          - propertyOrdering
          - propertyOrdering
          maximum: 7.061401241503109
          maxProperties: 0
          items: null
          minimum: 9.301444243932576
          maxLength: 0
          properties:
            key: null
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        conditions:
        - conditions
        - conditions
      properties:
        conditions:
          items:
            type: string
          type: array
        instructions:
          items:
            type: string
          type: array
        outputSchema:
          $ref: '#/components/schemas/StructuredOutputSchema'
        name:
          type: string
        id:
          format: uuid
          type: string
      required:
      - id
      type: object
    PageAITransformProjection:
      description: Paginated AI Transform entity. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 1
        last: true
        numberOfElements: 4
        size: 7
        totalPages: 2
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - instructions:
          - instructions
          - instructions
          outputSchema:
            maxItems: 0
            nullable: true
            minLength: 0
            format: format
            pattern: pattern
            anyOf:
            - null
            - null
            description: description
            title: title
            type: string
            enum:
            - enum
            - enum
            required:
            - required
            - required
            example: "{}"
            minProperties: 0
            minItems: 0
            default: "{}"
            propertyOrdering:
            - propertyOrdering
            - propertyOrdering
            maximum: 7.061401241503109
            maxProperties: 0
            items: null
            minimum: 9.301444243932576
            maxLength: 0
            properties:
              key: null
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          conditions:
          - conditions
          - conditions
        - instructions:
          - instructions
          - instructions
          outputSchema:
            maxItems: 0
            nullable: true
            minLength: 0
            format: format
            pattern: pattern
            anyOf:
            - null
            - null
            description: description
            title: title
            type: string
            enum:
            - enum
            - enum
            required:
            - required
            - required
            example: "{}"
            minProperties: 0
            minItems: 0
            default: "{}"
            propertyOrdering:
            - propertyOrdering
            - propertyOrdering
            maximum: 7.061401241503109
            maxProperties: 0
            items: null
            minimum: 9.301444243932576
            maxLength: 0
            properties:
              key: null
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          conditions:
          - conditions
          - conditions
        first: true
        totalElements: 3
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/AITransformProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    AITransformResultProjection:
      example:
        aiTransformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        entityType: INBOX
        entityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        aiTransformMappingId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        value: value
      properties:
        userId:
          format: uuid
          type: string
        aiTransformId:
          format: uuid
          type: string
        entityId:
          format: uuid
          type: string
        entityType:
          enum:
          - INBOX
          - PHONE
          type: string
        aiTransformMappingId:
          format: uuid
          type: string
        value:
          type: string
        id:
          format: uuid
          type: string
      required:
      - aiTransformId
      - aiTransformMappingId
      - entityId
      - entityType
      - id
      - userId
      type: object
    PageAITransformResultProjection:
      description: Paginated AI Transform result entities. Page index starts at zero.
        Projection results may omit larger entity fields. For fetching a full entity
        use the projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - aiTransformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entityType: INBOX
          entityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          aiTransformMappingId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          value: value
        - aiTransformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entityType: INBOX
          entityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          aiTransformMappingId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          value: value
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/AITransformResultProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    AITransformResultDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        aiTransformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        entityType: INBOX
        entityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        aiTransformMappingId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        value: "{}"
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        aiTransformId:
          format: uuid
          type: string
        aiTransformMappingId:
          format: uuid
          type: string
        value:
          nullable: true
          type: object
        entityId:
          format: uuid
          type: string
        entityType:
          enum:
          - INBOX
          - PHONE
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - aiTransformId
      - aiTransformMappingId
      - createdAt
      - entityId
      - entityType
      - id
      - updatedAt
      - userId
      - value
      type: object
    AITransformMappingProjection:
      example:
        aiTransformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        contentSelector: RAW
        entityType: INBOX
        name: name
        triggerSelector: PER_MESSAGE
        entityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        userId:
          format: uuid
          type: string
        aiTransformId:
          format: uuid
          type: string
        entityId:
          format: uuid
          type: string
        entityType:
          enum:
          - INBOX
          - PHONE
          type: string
        contentSelector:
          enum:
          - RAW
          - BODY
          - BODY_ATTACHMENTS
          type: string
        triggerSelector:
          enum:
          - PER_MESSAGE
          - PER_ATTACHMENT
          type: string
        name:
          type: string
        id:
          format: uuid
          type: string
      required:
      - aiTransformId
      - entityId
      - entityType
      - id
      - userId
      type: object
    PageAITransformMappingProjection:
      description: Paginated AI Transform mapping entities. Page index starts at zero.
        Projection results may omit larger entity fields. For fetching a full entity
        use the projection ID with individual method calls.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 6
          offset: 1
          pageSize: 0
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - aiTransformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          contentSelector: RAW
          entityType: INBOX
          name: name
          triggerSelector: PER_MESSAGE
          entityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - aiTransformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          contentSelector: RAW
          entityType: INBOX
          name: name
          triggerSelector: PER_MESSAGE
          entityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        totalElements: 0
        empty: true
      properties:
        content:
          items:
            $ref: '#/components/schemas/AITransformMappingProjection'
          type: array
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
        last:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        first:
          type: boolean
        size:
          format: int32
          type: integer
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        empty:
          type: boolean
      required:
      - totalElements
      - totalPages
      type: object
    EmptyResponseDto:
      example:
        message: message
      properties:
        message:
          type: string
      type: object
    FlushExpiredInboxesResult:
      description: Result from calling expire on any inboxes that have applicable
        expiration dates given current time.
      example:
        inboxIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        expireBefore: 2000-01-23T04:56:07.000+00:00
      properties:
        inboxIds:
          description: Inbox IDs affected by expiration
          items:
            description: Inbox IDs affected by expiration
            format: uuid
            type: string
          type: array
        expireBefore:
          description: DateTime to filter inboxes so that those expiring before this
            time are expired
          format: date-time
          type: string
      required:
      - expireBefore
      - inboxIds
      type: object
    uploadMultipartForm_request:
      properties:
        file:
          format: binary
          type: string
      required:
      - file
      type: object
  securitySchemes:
    API_KEY:
      description: Set x-api-key API KEY header in your client to your MailSlurp API
        Key value.
      in: header
      name: x-api-key
      type: apiKey

